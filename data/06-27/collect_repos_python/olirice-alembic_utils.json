{
    "repository": "olirice/alembic_utils",
    "stars": 125,
    "language": "python",
    "size": 5764,
    "clone_url": "https://github.com/olirice/alembic_utils.git",
    "timestamp": "2023-06-28T15:18:51.933790Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "src.test.test_collect_instances",
                "name": "test_walk_modules",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_collect_instances",
                "name": "test_collect_instances",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_collect_instances",
                "name": "test_collect_subclasses",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_create_function",
                "name": "test_create_and_drop",
                "time": 0.043,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_current",
                "name": "test_current",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_depends",
                "name": "test_solve_resolution_order[order0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_depends",
                "name": "test_solve_resolution_order[order1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_depends",
                "name": "test_solve_resolution_order[order2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_depends",
                "name": "test_solve_resolution_order[order3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_depends",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_duplicate_registration",
                "name": "test_migration_create_function",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_generate_revision",
                "name": "test_migration_create_function",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_include_filters",
                "name": "test_create_revision_with_filters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_initializers",
                "name": "test_pg_function_from_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_initializers",
                "name": "test_pg_function_from_sql_file_valid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_initializers",
                "name": "test_pg_function_from_sql_file_invalid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_op_drop_cascade",
                "name": "test_drop_fails_without_cascade",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_op_drop_cascade",
                "name": "test_drop_fails_with_cascade",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_trig_update_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_noop_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_drop",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_unparsable",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_on_entity_schema_not_qualified",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_constraint_trigger",
                "name": "test_fail_create_sql_statement_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_extension",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_extension",
                "name": "test_create_or_replace_raises",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_extension",
                "name": "test_update_is_unreachable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_extension",
                "name": "test_noop_revision",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_extension",
                "name": "test_drop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_create_revision",
                "time": 0.011,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_update_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_noop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_drop",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_has_no_parameters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_ignores_extension_functions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function",
                "name": "test_plpgsql_colon_esacpe",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function_overloading",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_function_overloading",
                "name": "test_update_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_bad_input",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_replace_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_noop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table",
                "name": "test_drop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table_w_columns",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table_w_columns",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table_w_columns",
                "name": "test_replace_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table_w_columns",
                "name": "test_noop_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_grant_table_w_columns",
                "name": "test_drop_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_unparsable_view",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_parsable_body",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_create_revision",
                "time": 0.028,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_update_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_noop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_materialized_view",
                "name": "test_drop_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_unparsable",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_parse_without_schema_on_entity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_create_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_update_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_noop_revision",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_policy",
                "name": "test_drop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_create_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_trig_update_revision",
                "time": 0.018,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_noop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_drop",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_unparsable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_on_entity_schema_not_qualified",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_trigger",
                "name": "test_fail_create_sql_statement_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_unparsable_view",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_parsable_body",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_create_revision",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_update_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_noop_revision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_drop_revision",
                "time": 0.02,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_update_create_or_replace_failover_to_drop_add",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_attempt_revision_on_unparsable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_create_revision_with_url_w_colon",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_pg_view",
                "name": "test_view_contains_colon",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_recreate_dropped",
                "name": "test_fails_without_defering",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_recreate_dropped",
                "name": "test_succeeds_when_defering",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_recreate_dropped",
                "name": "test_fails_gracefully_on_bad_user_statement",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_recreate_dropped",
                "name": "test_fails_if_user_creates_new_entity",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_simulate_entity",
                "name": "test_simulate_entity_shows_user_code_error",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_statement",
                "name": "test_coerce_to_quoted",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.test_statement",
                "name": "test_coerce_to_unquoted",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \ud83d\ude80  Start image=crawlergpt:latest\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-alembic_utils] user=0 workdir=\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \ud83e\uddea  Matrix: map[postgres-version:11 python-version:3.7]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \u2b50 Run Main actions/checkout@v1\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2705  Success - Main actions/checkout@v1\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \u2b50 Run Main Set up Python 3.7\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/44bf7ef5-9658-4088-9dc4-d47a048e6a2c/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2753  ::group::Installed versions\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? false\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::explicit? true\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Successfully set up CPython (3.7.11)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2753  ::endgroup::\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2705  Success - Main Set up Python 3.7\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-output:: python-version=3.7.11\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \u2b50 Run Main Install\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pip\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Installing collected packages: pip\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Attempting uninstall: pip\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     Found existing installation: pip 21.2.4\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     Uninstalling pip-21.2.4:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |       Successfully uninstalled pip-21.2.4\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Successfully installed pip-23.1.2\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting wheel\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.5/64.5 kB 790.5 kB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Installing collected packages: wheel\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Successfully installed wheel-0.40.0\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | [notice] To update, run: pip install --upgrade pip\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-alembic_utils\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Installing build dependencies: started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Installing build dependencies: finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Checking if build backend supports build_editable: started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Checking if build backend supports build_editable: finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Getting requirements to build editable: started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Getting requirements to build editable: finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Preparing editable metadata (pyproject.toml): started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting alembic>=1.5.7 (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading alembic-1.11.1-py3-none-any.whl (224 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 224.5/224.5 kB 3.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting flupy (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading flupy-1.2.0.tar.gz (12 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Installing build dependencies: started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Installing build dependencies: finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Getting requirements to build wheel: started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Getting requirements to build wheel: finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Preparing metadata (pyproject.toml): started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting parse>=1.8.4 (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading parse-1.19.1-py2.py3-none-any.whl (18 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting sqlalchemy>=1.4 (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading SQLAlchemy-2.0.17-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.7 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.7/2.7 MB 49.2 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting typing-extensions (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting black (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading black-23.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 31.7 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pylint (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pylint-2.17.4-py3-none-any.whl (536 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 536.6/536.6 kB 32.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pre-commit (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pre_commit-2.21.0-py2.py3-none-any.whl (201 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 201.9/201.9 kB 2.6 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting mypy (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading mypy-1.4.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.6 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.6/11.6 MB 30.8 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting psycopg2-binary (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading psycopg2_binary-2.9.6-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.0/3.0 MB 24.5 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pytest (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 13.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pytest-cov (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting mkdocs (from alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading mkdocs-1.4.3-py3-none-any.whl (3.7 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.7/3.7 MB 19.1 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting Mako (from alembic>=1.5.7->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading Mako-1.2.4-py3-none-any.whl (78 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 78.7/78.7 kB 5.5 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting importlib-metadata (from alembic>=1.5.7->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting importlib-resources (from alembic>=1.5.7->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting greenlet!=0.4.17 (from sqlalchemy>=1.4->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading greenlet-2.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (566 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 566.1/566.1 kB 7.3 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting click>=8.0.0 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 1.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting mypy-extensions>=0.4.3 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting packaging>=22.0 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.7 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pathspec>=0.9.0 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting platformdirs>=2 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting tomli>=1.1.0 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting typed-ast>=1.4.2 (from black->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 10.1 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting ghp-import>=1.0 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading ghp_import-2.1.0-py3-none-any.whl (11 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting jinja2>=2.11.1 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 4.9 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting markdown<3.4,>=3.2.1 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading Markdown-3.3.7-py3-none-any.whl (97 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 97.8/97.8 kB 1.5 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting mergedeep>=1.3.4 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading mergedeep-1.3.4-py3-none-any.whl (6.4 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pyyaml-env-tag>=0.1 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pyyaml_env_tag-0.1-py3-none-any.whl (3.9 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pyyaml>=5.1 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 596.3/596.3 kB 2.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting watchdog>=2.0 (from mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading watchdog-3.0.0-py3-none-manylinux2014_x86_64.whl (82 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 82.1/82.1 kB 274.0 kB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting cfgv>=2.0.0 (from pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting identify>=1.0.0 (from pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.8/98.8 kB 4.2 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting nodeenv>=0.11.1 (from pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting virtualenv>=20.10.0 (from pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 12.2 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting astroid<=2.17.0-dev0,>=2.15.4 (from pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading astroid-2.15.5-py3-none-any.whl (278 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 278.1/278.1 kB 7.1 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting isort<6,>=4.2.5 (from pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading isort-5.11.5-py3-none-any.whl (104 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 104.1/104.1 kB 2.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting mccabe<0.8,>=0.6 (from pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting tomlkit>=0.10.1 (from pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting dill>=0.2 (from pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading dill-0.3.6-py3-none-any.whl (110 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 110.5/110.5 kB 3.1 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting iniconfig (from pytest->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting pluggy<2.0,>=0.12 (from pytest->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 7.3 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting lazy-object-proxy>=1.4.0 (from astroid<=2.17.0-dev0,>=2.15.4->pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading lazy_object_proxy-1.9.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (58 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.5/58.5 kB 1.5 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting wrapt<2,>=1.11 (from astroid<=2.17.0-dev0,>=2.15.4->pylint->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading wrapt-1.15.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (75 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 75.7/75.7 kB 8.2 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting python-dateutil>=2.8.1 (from ghp-import>=1.0->mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 3.9 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting zipp>=0.5 (from importlib-metadata->alembic>=1.5.7->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting MarkupSafe>=2.0 (from jinja2>=2.11.1->mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from nodeenv>=0.11.1->pre-commit->alembic-utils==0.8.1) (47.1.0)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.10.0->pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 11.4 MB/s eta 0:00:00\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting filelock<4,>=3.12 (from virtualenv>=20.10.0->pre-commit->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Collecting six>=1.5 (from python-dateutil>=2.8.1->ghp-import>=1.0->mkdocs->alembic-utils==0.8.1)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Building wheels for collected packages: alembic-utils, flupy\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Building editable for alembic-utils (pyproject.toml): started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Building editable for alembic-utils (pyproject.toml): finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Created wheel for alembic-utils: filename=alembic_utils-0.8.1-0.editable-py3-none-any.whl size=2532 sha256=e030841b7a90be23a1c892b1dc9a897edf25af2d07bc1a1f1d95fafbda9a6c3c\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-1p7mxj91/wheels/b8/4f/e8/d1ac26e27e58eb3f6967eaeaa9d99e36f05224cc1cfa213962\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Building wheel for flupy (pyproject.toml): started\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Building wheel for flupy (pyproject.toml): finished with status 'done'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Created wheel for flupy: filename=flupy-1.2.0-py3-none-any.whl size=11021 sha256=67a39ae50540fa18b9f31c6b590791dcfbf173e186c9b258019a02addf3f1e9f\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/ca/d4/c5/3d131adcf02a379e03aadddfa1ec5618e418b260a9be405b3f\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Successfully built alembic-utils flupy\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Installing collected packages: parse, distlib, zipp, wrapt, watchdog, typing-extensions, typed-ast, tomlkit, tomli, six, pyyaml, psycopg2-binary, pathspec, packaging, nodeenv, mypy-extensions, mergedeep, mccabe, MarkupSafe, lazy-object-proxy, isort, iniconfig, identify, greenlet, filelock, exceptiongroup, dill, coverage, cfgv, pyyaml-env-tag, python-dateutil, platformdirs, mypy, jinja2, importlib-resources, importlib-metadata, flupy, astroid, virtualenv, sqlalchemy, pylint, pluggy, markdown, Mako, ghp-import, click, pytest, pre-commit, mkdocs, black, alembic, pytest-cov, alembic-utils\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Successfully installed Mako-1.2.4 MarkupSafe-2.1.3 alembic-1.11.1 alembic-utils-0.8.1 astroid-2.15.5 black-23.3.0 cfgv-3.3.1 click-8.1.3 coverage-7.2.7 dill-0.3.6 distlib-0.3.6 exceptiongroup-1.1.1 filelock-3.12.2 flupy-1.2.0 ghp-import-2.1.0 greenlet-2.0.2 identify-2.5.24 importlib-metadata-6.7.0 importlib-resources-5.12.0 iniconfig-2.0.0 isort-5.11.5 jinja2-3.1.2 lazy-object-proxy-1.9.0 markdown-3.3.7 mccabe-0.7.0 mergedeep-1.3.4 mkdocs-1.4.3 mypy-1.4.1 mypy-extensions-1.0.0 nodeenv-1.8.0 packaging-23.1 parse-1.19.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 pre-commit-2.21.0 psycopg2-binary-2.9.6 pylint-2.17.4 pytest-7.4.0 pytest-cov-4.1.0 python-dateutil-2.8.2 pyyaml-6.0 pyyaml-env-tag-0.1 six-1.16.0 sqlalchemy-2.0.17 tomli-2.0.1 tomlkit-0.11.8 typed-ast-1.5.4 typing-extensions-4.6.3 virtualenv-20.23.1 watchdog-3.0.0 wrapt-1.15.0 zipp-3.15.0\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | [notice] To update, run: pip install --upgrade pip\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u2705  Success - Main Install\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \u2b50 Run Main Test with Coverage\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ============================= test session starts ==============================\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-alembic_utils\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | configfile: pytest.ini\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | plugins: cov-4.1.0\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | collected 86 items\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_collect_instances.py ...                                   [  3%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_create_function.py E                                       [  4%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_current.py E                                               [  5%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_depends.py EEEEE                                           [ 11%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_duplicate_registration.py E                                [ 12%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_generate_revision.py E                                     [ 13%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_include_filters.py E                                       [ 15%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_initializers.py ...                                        [ 18%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_op_drop_cascade.py EE                                      [ 20%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_constraint_trigger.py EEEE...                           [ 29%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_extension.py E.EEE                                      [ 34%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_function.py EEEEEEE                                     [ 43%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_function_overloading.py EE                              [ 45%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_grant_table.py ..EEEE                                   [ 52%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_grant_table_w_columns.py .EEEE                          [ 58%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_materialized_view.py ..EEEE                             [ 65%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_policy.py ..EEEE                                        [ 72%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_trigger.py EEEE...                                      [ 80%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_pg_view.py ..EEEEEEEE                                      [ 91%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_recreate_dropped.py EEEE                                   [ 96%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_simulate_entity.py E                                       [ 97%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/test_statement.py ..                                            [100%]\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ==================================== ERRORS ====================================\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_and_drop ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05beeb3050>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ________________________ ERROR at setup of test_current ________________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd17f910>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________ ERROR at setup of test_solve_resolution_order[order0] _____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd460150>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________ ERROR at setup of test_solve_resolution_order[order1] _____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd42b390>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________ ERROR at setup of test_solve_resolution_order[order2] _____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd633a90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________ ERROR at setup of test_solve_resolution_order[order3] _____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd308750>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd64b510>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _______________ ERROR at setup of test_migration_create_function _______________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd26b950>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _______________ ERROR at setup of test_migration_create_function _______________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd0bd090>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________ ERROR at setup of test_create_revision_with_filters ______________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd0513d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ______________ ERROR at setup of test_drop_fails_without_cascade _______________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd5ba7d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ________________ ERROR at setup of test_drop_fails_with_cascade ________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd47ba10>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd27a450>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________ ERROR at setup of test_trig_update_revision __________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd2a8f10>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd540390>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________________ ERROR at setup of test_drop __________________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd55f490>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd4e0190>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________ ERROR at setup of test_update_is_unreachable _________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bced5350>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bf0a8690>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcdc7f10>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd1b4490>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_update_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd058150>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd362390>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________________ ERROR at setup of test_drop __________________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd09b910>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ___________________ ERROR at setup of test_has_no_parameters ___________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd7692d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ______________ ERROR at setup of test_ignores_extension_functions ______________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd7834d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________ ERROR at setup of test_plpgsql_colon_esacpe __________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd62a950>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd4840d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_update_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcff2650>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd19d690>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ___________________ ERROR at setup of test_replace_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd10a590>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd465d50>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd12d250>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd61ed90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ___________________ ERROR at setup of test_replace_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd3701d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd5bc210>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd13c1d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd31c850>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_update_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcfeebd0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd4e3f90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd476450>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd26aa90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_update_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd38a350>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd6dd650>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd1687d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd345b90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________ ERROR at setup of test_trig_update_revision __________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd3820d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd32c510>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________________________ ERROR at setup of test_drop __________________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd04bf90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_create_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd4e5510>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________________ ERROR at setup of test_update_revision ____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bce159d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_noop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd641710>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____________________ ERROR at setup of test_drop_revision _____________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcf6b610>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _____ ERROR at setup of test_update_create_or_replace_failover_to_drop_add _____\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcd860d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ____________ ERROR at setup of test_attempt_revision_on_unparsable _____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bccdd4d0>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ___________ ERROR at setup of test_create_revision_with_url_w_colon ____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bce1c890>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | __________________ ERROR at setup of test_view_contains_colon __________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bcbdac50>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ________________ ERROR at setup of test_fails_without_defering _________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd1f3a10>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ________________ ERROR at setup of test_succeeds_when_defering _________________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd15d150>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ________ ERROR at setup of test_fails_gracefully_on_bad_user_statement _________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bccf1f10>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ___________ ERROR at setup of test_fails_if_user_creates_new_entity ____________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd17a990>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _________ ERROR at setup of test_simulate_entity_shows_user_code_error _________\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | self = <sqlalchemy.engine.base.Connection object at 0x7f05bd3c0c90>\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection = None, _has_events = None, _allow_revalidate = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _allow_autobegin = True\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def __init__(\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         engine: Engine,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         connection: Optional[PoolProxiedConnection] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _has_events: Optional[bool] = None,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_revalidate: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         _allow_autobegin: bool = True,\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     ):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Construct a new Connection.\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.engine = engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         self.dialect = dialect = engine.dialect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if connection is None:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             try:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >               self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | The above exception was the direct cause of the following exception:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | raw_engine = Engine(postgresql://alem_user:***@localhost:5610/alem_db)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     @pytest.fixture(scope=\"function\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def engine(raw_engine: Engine) -> Generator[Engine, None, None]:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"Engine that has been reset between tests\"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         def run_cleaners():\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             registry.clear()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text(\"drop schema public cascade; create schema public;\"))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop schema if exists \"DEV\" cascade; create schema \"DEV\";'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |                 connection.execute(text('drop role if exists \"anon_user\"'))\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             # Remove any migrations that were left behind\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             shutil.rmtree(TEST_VERSIONS_ROOT)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             TEST_VERSIONS_ROOT.mkdir(exist_ok=True, parents=True)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       run_cleaners()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:122: \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | src/test/conftest.py:113: in run_cleaners\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with raw_engine.begin() as connection:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:112: in __enter__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return next(self.gen)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3228: in begin\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     with self.connect() as conn:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3264: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._connection_cls(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:148: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     err, dialect, engine\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2426: in _handle_dbapi_exception_noconnection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:145: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dbapi_connection = engine.raw_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3288: in raw_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.pool.connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:452: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionFairy._checkout(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:1267: in _checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:716: in checkout\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     rec = pool._do_get()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:170: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self._dec_overflow()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:167: in _do_get\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self._create_connection()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:393: in _create_connection\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return _ConnectionRecord(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:678: in __init__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.__connect()\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:903: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:147: in __exit__\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     raise exc_value.with_traceback(exc_tb)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:898: in __connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:637: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return dialect.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:615: in connect\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     return self.loaded_dbapi.connect(*cargs, **cparams)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | dsn = 'host=localhost dbname=alem_db user=alem_user password=password port=5610'\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | connection_factory = None, cursor_factory = None\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwargs = {'dbname': 'alem_db', 'host': 'localhost', 'password': 'password', 'port': 5610, ...}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Create a new database connection.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         The connection parameters can be specified as a string:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         or using a set of keyword arguments:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Or as a mix of both. The basic connection parameters are:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *dbname*: the database name\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *database*: the database name (only as keyword argument)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *user*: user name used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *password*: password used to authenticate\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *connection_factory* parameter a different class or connections\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         factory can be specified. It should be a callable object taking a dsn\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         argument.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         used by cursor().\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         Any other keyword parameter will be passed to the underlying client\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         library: the list of supported parameters depends on the library version.\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         \"\"\"\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         kwasync = {}\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async'] = kwargs.pop('async')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         if 'async_' in kwargs:\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |     \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | E       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-alembic_utils/report.xml -\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | Coverage XML written to file coverage.xml\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | =========================== short test summary info ============================\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_create_function.py::test_create_and_drop - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_current.py::test_current - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_depends.py::test_solve_resolution_order[order0] - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_depends.py::test_solve_resolution_order[order1] - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_depends.py::test_solve_resolution_order[order2] - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_depends.py::test_solve_resolution_order[order3] - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_depends.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_duplicate_registration.py::test_migration_create_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_generate_revision.py::test_migration_create_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_include_filters.py::test_create_revision_with_filters - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_op_drop_cascade.py::test_drop_fails_without_cascade - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_op_drop_cascade.py::test_drop_fails_with_cascade - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_constraint_trigger.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_constraint_trigger.py::test_trig_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_constraint_trigger.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_constraint_trigger.py::test_drop - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_extension.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_extension.py::test_update_is_unreachable - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_extension.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_extension.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_drop - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_has_no_parameters - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_ignores_extension_functions - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function.py::test_plpgsql_colon_esacpe - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function_overloading.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_function_overloading.py::test_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table.py::test_replace_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table_w_columns.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table_w_columns.py::test_replace_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table_w_columns.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_grant_table_w_columns.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_materialized_view.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_materialized_view.py::test_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_materialized_view.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_materialized_view.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_policy.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_policy.py::test_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_policy.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_policy.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_trigger.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_trigger.py::test_trig_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_trigger.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_trigger.py::test_drop - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_create_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_update_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_noop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_drop_revision - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_update_create_or_replace_failover_to_drop_add - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_attempt_revision_on_unparsable - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_create_revision_with_url_w_colon - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_pg_view.py::test_view_contains_colon - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_recreate_dropped.py::test_fails_without_defering - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_recreate_dropped.py::test_succeeds_when_defering - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_recreate_dropped.py::test_fails_gracefully_on_bad_user_statement - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_recreate_dropped.py::test_fails_if_user_creates_new_entity - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | ERROR src/test/test_simulate_entity.py::test_simulate_entity_shows_user_code_error - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 5610 failed: Connection refused\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | \n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | (Background on this error at: https://sqlalche.me/e/20/e3q8)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | =================== 24 passed, 62 errors in 63.33s (0:01:03) ===================\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coverage/inorout.py:523: CoverageWarning: Module alembic_utils was previously imported, but not measured (module-not-measured)\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   |   self.warn(msg, slug=\"module-not-measured\")\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build]   \u274c  Failure - Main Test with Coverage\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] exitcode '1': failure\n[988fb99f-d6dd-4f68-a144-2f521b6b511d/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-alembic_utils/.github/workflows/test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 459.2007920742035
    }
}