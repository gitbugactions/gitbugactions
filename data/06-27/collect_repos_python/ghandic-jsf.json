{
    "repository": "ghandic/jsf",
    "stars": 110,
    "language": "python",
    "size": 1303,
    "clone_url": "https://github.com/ghandic/jsf.git",
    "timestamp": "2023-07-01T16:21:54.127076Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \ud83d\ude80  Start image=crawlergpt:latest\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/ghandic-jsf] user=0 workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \ud83e\uddea  Matrix: map[python-version:3.8]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main actions/checkout@v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main actions/checkout@v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main actions/cache@v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/92977f75-f15f-4764-a61f-91d1b543fc28/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Resolved Keys:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::[\"Linux-\"]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::1.5.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:39331/_apis/artifactcache/cache?keys=Linux-&version=329fc5364ff2388f62d775e6339e06d1557553e178fc936ab94222ad91373269\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Cache not found for input keys: Linux-\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main actions/cache@v3\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Set up Python 3.8\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/92977f75-f15f-4764-a61f-91d1b543fc28/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2753  ::group::Installed versions\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? false\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::explicit? true\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::matched: 3.8.11\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Successfully set up CPython (3.8.11)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2753  ::endgroup::\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main Set up Python 3.8\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-output:: python-version=3.8.11\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Bootstrap Pants\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mBootstrapping Pants using /opt/hostedtoolcache/Python/3.8.11/x64/bin/python3.8\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mCreating the virtualenv PEX.\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mDownloading the Pex PEX.\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mSHA256 fingerprint of https://github.com/pantsbuild/pex/releases/download/v2.1.103/pex verified.\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mInstalling pantsbuild.pants==2.14.0 into a virtual environment at /home/runneradmin/.cache/pants/setup/bootstrap-Linux-x86_64/2.14.0_py38\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u001b[32mNew virtual environment successfully created at /home/runneradmin/.cache/pants/setup/bootstrap-Linux-x86_64/2.14.0_py38.\u001b[0m\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:26:39.38 [INFO] Initializing scheduler...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:26:39.79 [INFO] Scheduler initialized.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 2.14.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main Bootstrap Pants\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Check BUILD files\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:22.84 [WARN] No arguments specified with `./pants tailor`, so the goal will do nothing.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Instead, you should provide arguments like this:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants tailor ::` to run on everything\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants tailor dir::` to run on `dir` and subdirs\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants tailor dir` to run on `dir`\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants --changed-since=HEAD tailor` to only run on changed and new files\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:22.84 [WARN] No arguments specified with `./pants update-build-files`, so the goal will do nothing.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Instead, you should provide arguments like this:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants update-build-files ::` to run on everything\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants update-build-files dir::` to run on `dir` and subdirs\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants update-build-files dir` to run on `dir`\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants update-build-files dir/BUILD` to run on that single BUILD file\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * `./pants --changed-since=HEAD update-build-files` to run only on changed BUILD files\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main Check BUILD files\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Lint\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:34.94 [INFO] Starting: Building docformatter.pex from docformatter_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:34.94 [INFO] Starting: Building black.pex from black_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:34.94 [INFO] Starting: Building pyupgrade.pex from pyupgrade_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:34.94 [INFO] Starting: Building flake8.pex from flake8_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:34.94 [INFO] Starting: Building isort.pex from isort_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:40.45 [INFO] Completed: Building isort.pex from isort_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:40.73 [INFO] Completed: Building flake8.pex from flake8_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:40.97 [INFO] Completed: Format with isort - isort made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:40.98 [INFO] Completed: Format with isort - isort made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:40.99 [INFO] Completed: Format with isort - isort made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.02 [INFO] Completed: Building pyupgrade.pex from pyupgrade_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.40 [INFO] Completed: Building black.pex from black_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.50 [INFO] Completed: Lint with Flake8 - flake8 succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.50 [INFO] Completed: Format with pyupgrade - pyupgrade made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.60 [INFO] Completed: Format with pyupgrade - pyupgrade made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.71 [INFO] Completed: Format with pyupgrade - pyupgrade made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:41.80 [INFO] Completed: Lint with Flake8 - flake8 succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.04 [INFO] Completed: Lint with Flake8 - flake8 succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.12 [INFO] Completed: Format with Black - black made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.26 [INFO] Completed: Format with Black - black made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.31 [INFO] Completed: Building docformatter.pex from docformatter_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.35 [INFO] Completed: Format with Black - black made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.48 [INFO] Completed: Format with docformatter - docformatter made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.52 [INFO] Completed: Format with docformatter - docformatter made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:42.55 [INFO] Completed: Format with docformatter - docformatter made no changes.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 black succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 docformatter succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 flake8 succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 isort succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 pyupgrade succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2705  Success - Main Lint\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Test\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:47.41 [WARN] Pants cannot infer owners for the following imports in the target jsf/tests/test_default_fake.py:pytest@interpreter_constraints=py3:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * jwt (line: 4)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | If you do not expect an import to be inferrable, add `# pants: no-infer-dep` to the import line. Otherwise, see https://www.pantsbuild.org/v2.14/docs/troubleshooting#import-errors-and-missing-dependencies for common problems.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:47.56 [WARN] Pants cannot infer owners for the following imports in the target jsf/tests/test_cli.py:pytest@interpreter_constraints=py3:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * typer.testing.CliRunner (line: 6)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | If you do not expect an import to be inferrable, add `# pants: no-infer-dep` to the import line. Otherwise, see https://www.pantsbuild.org/v2.14/docs/troubleshooting#import-errors-and-missing-dependencies for common problems.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:47.93 [WARN] Pants cannot infer owners for the following imports in the target jsf/cli.py:src:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * typer (line: 3)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | If you do not expect an import to be inferrable, add `# pants: no-infer-dep` to the import line. Otherwise, see https://www.pantsbuild.org/v2.14/docs/troubleshooting#import-errors-and-missing-dependencies for common problems.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:48.33 [WARN] Pants cannot infer owners for the following imports in the target jsf/schema_types/string_utils/content_type/image__jpeg.py:src:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * requests (line: 3)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | If you do not expect an import to be inferrable, add `# pants: no-infer-dep` to the import line. Otherwise, see https://www.pantsbuild.org/v2.14/docs/troubleshooting#import-errors-and-missing-dependencies for common problems.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:48.40 [WARN] Pants cannot infer owners for the following imports in the target jsf/schema_types/string_utils/content_type/image__webp.py:src:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * requests (line: 3)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | If you do not expect an import to be inferrable, add `# pants: no-infer-dep` to the import line. Otherwise, see https://www.pantsbuild.org/v2.14/docs/troubleshooting#import-errors-and-missing-dependencies for common problems.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:48.45 [INFO] Starting: Building requirements.pex with 5 requirements: faker>=15.3.4, jsonschema>=4.17.3, pydantic>=1.10.4, rstr>=3.2.0, smart-open[http]>=6.3.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:48.60 [INFO] Starting: Building pytest.pex with 4 requirements: pyjwt, pytest-cov, pytest==7.0.1, typer>=0.7.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:28:59.78 [INFO] Completed: Building pytest.pex with 4 requirements: pyjwt, pytest-cov, pytest==7.0.1, typer>=0.7.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:05.85 [INFO] Completed: Building requirements.pex with 5 requirements: faker>=15.3.4, jsonschema>=4.17.3, pydantic>=1.10.4, rstr>=3.2.0, smart-open[http]>=6.3.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:05.86 [INFO] Starting: Building local_dists.pex\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:06.58 [INFO] Completed: Building local_dists.pex\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:06.58 [INFO] Starting: Building pytest_runner.pex\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:09.20 [INFO] Completed: Building pytest_runner.pex\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:12.75 [INFO] Completed: Run Pytest - jsf/tests/test_utils.py:pytest@interpreter_constraints=py3 succeeded.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:12.88 [ERROR] Completed: Run Pytest - jsf/tests/test_nullable_types_gen.py:pytest@interpreter_constraints=py3 failed (exit code 1).\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ============================= test session starts ==============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | platform linux -- Python 3.8.11, pytest-7.0.1, pluggy-1.2.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | rootdir: /tmp/pants-sandbox-Ilu7tD\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | plugins: cov-4.1.0, Faker-18.11.2\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | collected 9 items\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_nullable_types_gen.py F........                           [100%]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================================== FAILURES ===================================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _____________________________ test_string_null_gen _____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-Ilu7tD/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_string_null_gen(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"type-list-null.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema[\"str\"])\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_nullable_types_gen.py:9: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': True, 'name': 'root', 'path': '#', 'type': ['string', 'null']}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...pe': ['string', 'null']}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =============================== warnings summary ===============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257: UserWarning: Valid config keys have changed in V2:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * 'smart_union' has been removed\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(message, UserWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/object.py:62\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /tmp/pants-sandbox-Ilu7tD/jsf/schema_types/object.py:62: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     Object.update_forward_refs()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | - generated xml file: /tmp/pants-sandbox-Ilu7tD/jsf.tests.test_nullable_types_gen.py.pytest@@interpreter_constraints=py3.xml -\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =========================== short test summary info ============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_nullable_types_gen.py::test_string_null_gen - pydantic_...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================== 1 failed, 8 passed, 4 warnings in 0.27s ====================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:12.96 [ERROR] Completed: Run Pytest - jsf/tests/test_cli.py:pytest@interpreter_constraints=py3 failed (exit code 1).\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ============================= test session starts ==============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | platform linux -- Python 3.8.11, pytest-7.0.1, pluggy-1.2.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | rootdir: /tmp/pants-sandbox-AzdX1C\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | plugins: cov-4.1.0, Faker-18.11.2\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | collected 1 item\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_cli.py F                                                  [100%]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================================== FAILURES ===================================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ___________________________________ test_app ___________________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-AzdX1C/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_app(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         file = Path(\"tmp.json\")\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         try:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             result = runner.invoke(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |                 app, [\"--schema\", TestData / \"custom.json\", \"--instance\", \"tmp.json\"]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >           assert result.exit_code == 0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           AssertionError: assert 1 == 0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E            +  where 1 = <Result 1 validation error for String\\ncontentEncoding\\n  Field required [type=missing, input_value={'name': 'suburb', '...ovider': 'faker.city'}, input_type=dict]\\n    For further information visit https://errors.pydantic.dev/2.0.1/v/missing>.exit_code\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_cli.py:17: AssertionError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | During handling of the above exception, another exception occurred:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-AzdX1C/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_app(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         file = Path(\"tmp.json\")\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         try:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             result = runner.invoke(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |                 app, [\"--schema\", TestData / \"custom.json\", \"--instance\", \"tmp.json\"]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             assert result.exit_code == 0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             assert file.exists()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             with open(file, \"r\") as f:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |                 instance = json.load(f)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             with open(TestData / \"custom.json\", \"r\") as f:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |                 schema = json.load(f)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             validate(instance, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         finally:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >           file.unlink()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_cli.py:25: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | self = PosixPath('tmp.json'), missing_ok = False\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def unlink(self, missing_ok=False):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"\"\"\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         Remove this file or link.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         If the path is a directory, use rmdir() instead.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"\"\"\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         if self._closed:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             self._raise_closed()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         try:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >           self._accessor.unlink(self)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           FileNotFoundError: [Errno 2] No such file or directory: 'tmp.json'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/pathlib.py:1325: FileNotFoundError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =============================== warnings summary ===============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257: UserWarning: Valid config keys have changed in V2:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * 'smart_union' has been removed\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(message, UserWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/object.py:62\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /tmp/pants-sandbox-AzdX1C/jsf/schema_types/object.py:62: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     Object.update_forward_refs()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | - generated xml file: /tmp/pants-sandbox-AzdX1C/jsf.tests.test_cli.py.pytest@@interpreter_constraints=py3.xml -\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =========================== short test summary info ============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_cli.py::test_app - FileNotFoundError: [Errno 2] No such...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ======================== 1 failed, 4 warnings in 0.32s =========================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:13.11 [ERROR] Completed: Run Pytest - jsf/tests/test_model_gen.py:pytest@interpreter_constraints=py3 failed (exit code 1).\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ============================= test session starts ==============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | platform linux -- Python 3.8.11, pytest-7.0.1, pluggy-1.2.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | rootdir: /tmp/pants-sandbox-5lNCuK\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | plugins: cov-4.1.0, Faker-18.11.2\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | collected 12 items\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py ..F...FF.FF.                                 [100%]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================================== FAILURES ===================================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________ test_gen_model[inner-ref-Object] _______________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-5lNCuK/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'inner-ref', expected_type_anno = <class 'pydantic.main.Object'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type_anno\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         expected,\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_model(TestData, filestem, expected_type_anno):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py:46: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'uuid', 'path': '#/$defs', 'pattern': '^[0-9A-F]{16,}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'uuid', 'path': ...ern': '^[0-9A-F]{16,}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ________________________ test_gen_model[object-Object] _________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-5lNCuK/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'object', expected_type_anno = <class 'pydantic.main.Object'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type_anno\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         expected,\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_model(TestData, filestem, expected_type_anno):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py:46: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ________________________ test_gen_model[custom-Object] _________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-5lNCuK/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'custom', expected_type_anno = <class 'pydantic.main.Object'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type_anno\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         expected,\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_model(TestData, filestem, expected_type_anno):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py:46: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'$provider': 'faker.city', 'description': 'The address suburb (Australia Only), eg: Watson', 'is_nullable': False, 'name': 'suburb', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'suburb', 'path'...provider': 'faker.city'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | __________________________ test_gen_model[string-str] __________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-5lNCuK/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'string', expected_type_anno = <class 'str'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type_anno\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         expected,\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_model(TestData, filestem, expected_type_anno):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py:46: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': '#', 'pattern': '^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...\\))?[0-9]{3}-[0-9]{4}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _________________________ test_gen_model[tuple-tuple] __________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-5lNCuK/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'tuple', expected_type_anno = <class 'tuple'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type_anno\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         expected,\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_model(TestData, filestem, expected_type_anno):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py:46: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:154: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_tuple(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:88: in __parse_tuple\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     arr.items.append(self.__parse_definition(name, path=f\"{name}[{i}]\", schema=item))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': 'root[1]', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =============================== warnings summary ===============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257: UserWarning: Valid config keys have changed in V2:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * 'smart_union' has been removed\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(message, UserWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/object.py:62\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /tmp/pants-sandbox-5lNCuK/jsf/schema_types/object.py:62: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     Object.update_forward_refs()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[boolean-bool]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[enum-Enum]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[integer-int]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[null-NoneType]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[number-float]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[string-enum-Enum]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[array-expected_type_anno11]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_model_gen.py::test_gen_model[array-expected_type_anno11]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/fields.py:710: PydanticDeprecatedSince20: Extra keyword arguments on `Field` is deprecated and will be removed. use `json_schema_extra` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | - generated xml file: /tmp/pants-sandbox-5lNCuK/jsf.tests.test_model_gen.py.pytest@@interpreter_constraints=py3.xml -\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =========================== short test summary info ============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_model_gen.py::test_gen_model[inner-ref-Object] - pydant...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_model_gen.py::test_gen_model[object-Object] - pydantic_...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_model_gen.py::test_gen_model[custom-Object] - pydantic_...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_model_gen.py::test_gen_model[string-str] - pydantic_cor...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_model_gen.py::test_gen_model[tuple-tuple] - pydantic_co...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================== 5 failed, 7 passed, 12 warnings in 0.52s ===================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:13.37 [ERROR] Completed: Run Pytest - jsf/tests/test_parser.py:pytest@interpreter_constraints=py3 failed (exit code 1).\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ============================= test session starts ==============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | platform linux -- Python 3.8.11, pytest-7.0.1, pluggy-1.2.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | rootdir: /tmp/pants-sandbox-2gilGP\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | plugins: cov-4.1.0, Faker-18.11.2\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | collected 15 items\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py ...F...F.FF.FFF                                 [100%]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================================== FAILURES ===================================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _________________________ test_types[inner-ref-Object] _________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'inner-ref', expected_type = <class 'jsf.schema_types.object.Object'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         [\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"array\", Array),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"boolean\", Boolean),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"inner-ref\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"integer\", Integer),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"null\", Null),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"number\", Number),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"object\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string-enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string\", String),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"tuple\", JSFTuple),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         ],\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_types(TestData, filestem, expected_type):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:38: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'uuid', 'path': '#/$defs', 'pattern': '^[0-9A-F]{16,}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'uuid', 'path': ...ern': '^[0-9A-F]{16,}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | __________________________ test_types[object-Object] ___________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'object', expected_type = <class 'jsf.schema_types.object.Object'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         [\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"array\", Array),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"boolean\", Boolean),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"inner-ref\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"integer\", Integer),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"null\", Null),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"number\", Number),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"object\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string-enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string\", String),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"tuple\", JSFTuple),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         ],\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_types(TestData, filestem, expected_type):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:38: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | __________________________ test_types[string-String] ___________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'string', expected_type = <class 'jsf.schema_types.string.String'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         [\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"array\", Array),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"boolean\", Boolean),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"inner-ref\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"integer\", Integer),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"null\", Null),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"number\", Number),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"object\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string-enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string\", String),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"tuple\", JSFTuple),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         ],\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_types(TestData, filestem, expected_type):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:38: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': '#', 'pattern': '^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...\\))?[0-9]{3}-[0-9]{4}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | __________________________ test_types[tuple-JSFTuple] __________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | filestem = 'tuple', expected_type = <class 'jsf.schema_types._tuple.JSFTuple'>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     @pytest.mark.parametrize(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         \"filestem, expected_type\",\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         [\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"array\", Array),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"boolean\", Boolean),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"inner-ref\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"integer\", Integer),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"null\", Null),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"number\", Number),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"object\", Object),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string-enum\", JSFEnum),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"string\", String),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             (\"tuple\", JSFTuple),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         ],\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     )\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_types(TestData, filestem, expected_type):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / f\"{filestem}.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:38: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:154: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_tuple(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:88: in __parse_tuple\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     arr.items.append(self.__parse_definition(name, path=f\"{name}[{i}]\", schema=item))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': 'root[1]', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ______________________________ test_nested_tuple _______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_nested_tuple(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"tuple.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:56: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:154: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_tuple(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:88: in __parse_tuple\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     arr.items.append(self.__parse_definition(name, path=f\"{name}[{i}]\", schema=item))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': 'root[1]', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ______________________________ test_nested_object ______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_nested_object(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"object.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:67: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ____________________________ test_nested_object_ref ____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-2gilGP/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_nested_object_ref(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"inner-ref.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_parser.py:83: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'uuid', 'path': '#/$defs', 'pattern': '^[0-9A-F]{16,}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'uuid', 'path': ...ern': '^[0-9A-F]{16,}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =============================== warnings summary ===============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257: UserWarning: Valid config keys have changed in V2:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * 'smart_union' has been removed\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(message, UserWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/object.py:62\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /tmp/pants-sandbox-2gilGP/jsf/schema_types/object.py:62: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     Object.update_forward_refs()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | - generated xml file: /tmp/pants-sandbox-2gilGP/jsf.tests.test_parser.py.pytest@@interpreter_constraints=py3.xml -\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =========================== short test summary info ============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_types[inner-ref-Object] - pydantic_core...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_types[object-Object] - pydantic_core._p...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_types[string-String] - pydantic_core._p...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_types[tuple-JSFTuple] - pydantic_core._...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_nested_tuple - pydantic_core._pydantic_...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_nested_object - pydantic_core._pydantic...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_parser.py::test_nested_object_ref - pydantic_core._pyda...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================== 7 failed, 8 passed, 4 warnings in 0.75s ====================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:15.60 [ERROR] Completed: Run Pytest - jsf/tests/test_default_fake.py:pytest@interpreter_constraints=py3 failed (exit code 1).\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ============================= test session starts ==============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | platform linux -- Python 3.8.11, pytest-7.0.1, pluggy-1.2.0\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | rootdir: /tmp/pants-sandbox-qpiQZJ\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | plugins: cov-4.1.0, Faker-18.11.2\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | collected 32 items\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py FFFFFFFF.F.F...........FFFF..FFF          [100%]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =================================== FAILURES ===================================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ________________________ test_fake_object_no_properties ________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_object_no_properties(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"object_no_properties.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:11: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'format': 'ipv4', 'is_nullable': False, 'name': 'audit_label', 'path': '#/audit_label', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'audit_label', '...ring', 'format': 'ipv4'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_anyof ________________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_anyof(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"anyof.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:19: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:169: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_anyOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:106: in __parse_anyOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     schemas.append(self.__parse_definition(name, path, d))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'maxLength': 5, 'name': 'root', 'path': '#', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...string', 'maxLength': 5}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_allof ________________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_allof(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"allof.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:29: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:171: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_allOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:114: in __parse_allOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     combined_schema=self.__parse_definition(name, path, combined_schema),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'maxLength': 5, 'name': 'root', 'path': '#', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...h': 5, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ___________________________ test_fake_allof_complex ____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_allof_complex(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"allof-complex.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:39: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'description': 'Path at which Prometheus metrics are exposed', 'is_nullable': False, 'name': 'path', 'path': '#/definitions/path', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'path', 'path': ...osed', 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ____________________________ test_fake_anyof_object ____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_anyof_object(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"anyof_object.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:53: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:143: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_anyOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:106: in __parse_anyOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     schemas.append(self.__parse_definition(name, path, d))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/ob/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_oneof ________________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_oneof(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"oneof.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:64: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:173: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_oneOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:121: in __parse_oneOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     schemas.append(self.__parse_definition(name, path, d))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'maxLength': 5, 'name': 'root', 'path': '#', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...string', 'maxLength': 5}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ____________________________ test_fake_oneof_allof _____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_oneof_allof(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"oneof_allof.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:74: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:173: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_oneOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:121: in __parse_oneOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     schemas.append(self.__parse_definition(name, path, d))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:171: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_allOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:114: in __parse_allOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     combined_schema=self.__parse_definition(name, path, combined_schema),\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'maxLength': 5, 'name': 'root', 'path': '#', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...h': 5, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ____________________________ test_fake_oneof_object ____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_oneof_object(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"oneof_object.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:84: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:147: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_oneOf(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:121: in __parse_oneOf\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     schemas.append(self.__parse_definition(name, path, d))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/ob/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_string _______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_string(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"string.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:106: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': '#', 'pattern': '^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...\\))?[0-9]{3}-[0-9]{4}$'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ________________________ test_fake_string_content_type _________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_string_content_type(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"string-content-type.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:126: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'contentMediaType': 'application/jwt', 'is_nullable': False, 'name': 'application/jwt', 'path': '#/application/jwt', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'application/jwt...ype': 'application/jwt'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_tuple ________________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_tuple(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"tuple.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:272: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:154: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_tuple(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:88: in __parse_tuple\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     arr.items.append(self.__parse_definition(name, path=f\"{name}[{i}]\", schema=item))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'root', 'path': 'root[1]', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'root', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _______________________________ test_fake_object _______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_object(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"object.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:286: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _____________________ test_fake_object_pattern_properties ______________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_object_pattern_properties(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"object-pattern-properties.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:298: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'name', 'path': '#/name', 'type': 'string'}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'name', 'path': ...False, 'type': 'string'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ___________________________ test_fake_string_format ____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_fake_string_format(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"string-format.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:320: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'format': 'date-time', 'is_nullable': False, 'name': 'date-time', 'path': '#/date-time', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'date-time', 'pa..., 'format': 'date-time'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ______________________________ test_external_ref _______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_external_ref(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"external-ref.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:403: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:163: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     external_jsf = JSF(json.load(f))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:150: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_array(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:80: in __parse_array\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     arr.items = self.__parse_definition(name, name, schema[\"items\"])\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'minLength': 1, 'name': 'src', 'path': 'src', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'src', 'path': '...string', 'minLength': 1}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ____________________________ test_gen_and_validate _____________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_gen_and_validate(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"custom.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       p = JSF(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:418: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:180: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     item = self.__parse_definition(name, path=f\"#/{def_tag}\", schema=definition)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'$provider': 'faker.city', 'description': 'The address suburb (Australia Only), eg: Watson', 'is_nullable': False, 'name': 'suburb', ...}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'suburb', 'path'...provider': 'faker.city'}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ______________________________ test_list_of_types ______________________________\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | TestData = PosixPath('/tmp/pants-sandbox-qpiQZJ/jsf/tests/data')\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def test_list_of_types(TestData):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |         with open(TestData / \"type-list.json\", \"r\") as file:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |             schema = json.load(file)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       fake_data = [JSF(schema).generate() for _ in range(100)]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:425: \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/tests/test_default_fake.py:425: in <listcomp>\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     fake_data = [JSF(schema).generate() for _ in range(100)]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:54: in __init__\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self._parse(schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:183: in _parse\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     self.root = self.__parse_definition(name=\"root\", path=\"#\", schema=schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:141: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_object(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:66: in __parse_object\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     props.append(self.__parse_definition(_name, path=f\"{path}/{_name}\", schema=definition))\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:156: in __parse_definition\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return self.__parse_primitive(name, path, schema)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/parser.py:59: in __parse_primitive\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     return cls.from_dict({\"name\": name, \"path\": path, \"is_nullable\": is_nullable, **schema})\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | d = {'is_nullable': False, 'name': 'randTypeValue', 'path': '#/randTypeValue', 'type': ['boolean', 'number', 'integer', 'string']}\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     def from_dict(d):\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | >       return String(**d)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       pydantic_core._pydantic_core.ValidationError: 1 validation error for String\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E       contentEncoding\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E         Field required [type=missing, input_value={'name': 'randTypeValue',...', 'integer', 'string']}, input_type=dict]\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | E           For further information visit https://errors.pydantic.dev/2.0.1/v/missing\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/string.py:156: ValidationError\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =============================== warnings summary ===============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:206: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/_internal/_config.py:257: UserWarning: Valid config keys have changed in V2:\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   * 'smart_union' has been removed\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(message, UserWarning)\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | jsf/schema_types/object.py:62\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /tmp/pants-sandbox-qpiQZJ/jsf/schema_types/object.py:62: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     Object.update_forward_refs()\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ../../home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |   /home/runneradmin/.cache/pants/named_caches/pex_root/venvs/s/388badc9/venv/lib/python3.8/site-packages/pydantic/main.py:1162: PydanticDeprecatedSince20: The `update_forward_refs` method is deprecated; use `model_rebuild` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.0/migration/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   |     warnings.warn(\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | - generated xml file: /tmp/pants-sandbox-qpiQZJ/jsf.tests.test_default_fake.py.pytest@@interpreter_constraints=py3.xml -\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | =========================== short test summary info ============================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_object_no_properties - pydan...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_anyof - pydantic_core._pydan...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_allof - pydantic_core._pydan...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_allof_complex - pydantic_cor...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_anyof_object - pydantic_core...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_oneof - pydantic_core._pydan...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_oneof_allof - pydantic_core....\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_oneof_object - pydantic_core...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_string - pydantic_core._pyda...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_string_content_type - pydant...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_tuple - pydantic_core._pydan...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_object - pydantic_core._pyda...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_object_pattern_properties - ...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_fake_string_format - pydantic_cor...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_external_ref - pydantic_core._pyd...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_gen_and_validate - pydantic_core....\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | FAILED jsf/tests/test_default_fake.py::test_list_of_types - pydantic_core._py...\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | ================== 17 failed, 15 passed, 4 warnings in 3.06s ===================\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2713 jsf/tests/test_utils.py:pytest@interpreter_constraints=py3 succeeded in 3.51s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2715 jsf/tests/test_cli.py:pytest@interpreter_constraints=py3 failed in 3.72s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2715 jsf/tests/test_default_fake.py:pytest@interpreter_constraints=py3 failed in 6.36s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2715 jsf/tests/test_model_gen.py:pytest@interpreter_constraints=py3 failed in 3.87s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2715 jsf/tests/test_nullable_types_gen.py:pytest@interpreter_constraints=py3 failed in 3.65s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \u2715 jsf/tests/test_parser.py:pytest@interpreter_constraints=py3 failed in 4.13s.\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:15.62 [INFO] Starting: Building coverage_py.pex from coverage-py_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | 16:29:18.96 [INFO] Completed: Building coverage_py.pex from coverage-py_default.lock\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Wrote xml coverage report to `dist/coverage/python`\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | \n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Wrote html coverage report to `dist/coverage/python`\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | make: *** [Makefile:4: test] Error 1\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u274c  Failure - Main Test\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] exitcode '2': failure\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \u2b50 Run Main Upload pants log\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/92977f75-f15f-4764-a61f-91d1b543fc28/act/actions-upload-artifact@v3/ dst=/var/run/act/actions/actions-upload-artifact@v3/\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-upload-artifact@v3/] user=0 workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-upload-artifact@v3/dist/index.js] user= workdir=\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::implicitDescendants 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::implicitDescendants 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::matchDirectories 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Search path '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/ghandic-jsf/.pants.d/pants.log'\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::File:/tmp/558156d8-17ed-11ee-8a50-bb14de238602/ghandic-jsf/.pants.d/pants.log was found using the provided searchPath\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | With the provided path, there will be 1 file uploaded\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \ud83d\udcac  ::debug::Root artifact directory is /tmp/558156d8-17ed-11ee-8a50-bb14de238602/ghandic-jsf/.pants.d\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Starting artifact upload\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | For more detailed logs during the artifact upload process, enable step-debugging: https://docs.github.com/actions/monitoring-and-troubleshooting-workflows/enabling-debug-logging#enabling-step-debug-logging\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   | Artifact name is valid!\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u2757  ::error::Unable to get ACTIONS_RUNTIME_TOKEN env variable\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build]   \u274c  Failure - Main Upload pants log\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] exitcode '1': failure\n[b5a7aa37-e72e-4d5e-a81a-963fe81139dc/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/ghandic-jsf/.github/workflows/python-package-crawler.yaml",
            "type": "pytest"
        },
        "workflow_name": "b5a7aa37-e72e-4d5e-a81a-963fe81139dc",
        "build_tool": "pytest",
        "elapsed_time": 468.1134407520294
    }
}