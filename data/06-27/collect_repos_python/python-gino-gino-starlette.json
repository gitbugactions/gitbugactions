{
    "repository": "python-gino/gino-starlette",
    "stars": 77,
    "language": "python",
    "size": 178,
    "clone_url": "https://github.com/python-gino/gino-starlette.git",
    "timestamp": "2023-07-01T14:14:30.809895Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_demo",
                "name": "test[simple_starlette_demo]",
                "time": 103.63,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_demo",
                "name": "test[simple_fastapi_demo]",
                "time": 45.777,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_demo",
                "name": "test[prod_fastapi_demo]",
                "time": 84.446,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"subprocess.CalledProcessError: Command '['/tmp/tmpeiadp0rb/.env/bin/python', '/tmp/tmpeiadp0rb/.env/bin/coverage', 'run', '-p', '--source=src,migrations/versions', '/tmp/tmpeiadp0rb/.env/bin/pytest']' returned non-zero exit status 1.\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_index_returns_200",
                "time": 1.811,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_index_returns_200_dsn",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_ssl",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_dsn",
                "time": 0.006,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_app_factory",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_gino_starlette",
                "name": "test_no_db",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \ud83d\ude80  Start image=crawlergpt:latest\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette] user=0 workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2601  git clone 'https://github.com/actions/cache' # ref=preview\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \ud83e\uddea  Matrix: map[python-version:3.7]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \u2b50 Run Main Checkout source code\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2705  Success - Main Checkout source code\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \u2b50 Run Main Set up Python\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/7934bc53-3d42-471f-8563-6bc20f253303/act/actions-setup-python@v1/ dst=/var/run/act/actions/actions-setup-python@v1/\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v1/] user=0 workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v1/dist/index.js] user= workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? false\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::explicit? true\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully setup CPython (3.7.11)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v1/.github/python.json\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2705  Success - Main Set up Python\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2699  ::set-output:: python-version=3.7.11\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \u2b50 Run Main virtualenv cache\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/7934bc53-3d42-471f-8563-6bc20f253303/act/actions-cache@preview/ dst=/var/run/act/actions/actions-cache@preview/\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@preview/] user=0 workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@preview/dist/restore/index.js] user= workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::Cache Path: /home/runneradmin/.cache/pypoetry/virtualenvs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcbe  ::save-state name=CACHE_KEY,::Linux-3.7-poetry-\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::[\"Linux-3.7-poetry-\",\"Linux-3.7-poetry-\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udcac  ::debug::Cache Url: http://130.242.72.40:42993/\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Cache not found for input keys: [\"Linux-3.7-poetry-\",\"Linux-3.7-poetry-\"].\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2705  Success - Main virtualenv cache\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \u2b50 Run Main Install Python dependencies\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Retrieving Poetry metadata\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | # Welcome to Poetry!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | This will download and install the latest version of Poetry,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | a dependency and package manager for Python.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.local/bin\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | and these changes will be reverted.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing Poetry (1.5.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing Poetry (1.5.1): Creating environment\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing Poetry (1.5.1): Installing Poetry\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing Poetry (1.5.1): Creating script\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing Poetry (1.5.1): Done\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Poetry (1.5.1) is installed now. Great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | environment variable.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | You can test that everything is set up by executing:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | `poetry --version`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Creating virtualenv gino-starlette-is8H0KNC-py3.7 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing dependencies from lock file\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Package operations: 44 installs, 0 updates, 0 removals\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing zipp (3.6.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing importlib-metadata (1.7.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing attrs (22.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing exceptiongroup (1.1.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing iniconfig (2.0.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing packaging (23.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing path (16.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pluggy (1.0.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing tomli (1.2.3)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing contextlib2 (21.6.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing distlib (0.3.6)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing execnet (1.9.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing filelock (3.4.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing idna (3.4)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing mock (5.0.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing path-py (12.5.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing platformdirs (2.4.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest (7.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing six (1.16.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing sniffio (1.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing termcolor (1.1.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing typing-extensions (4.1.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing anyio (3.6.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing asyncpg (0.26.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing certifi (2022.12.7)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing charset-normalizer (2.0.12)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing click (8.0.4)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing coverage (6.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing mypy-extensions (0.4.3)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pathspec (0.9.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-fixture-config (1.7.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-shutil (1.7.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing typed-ast (1.5.4)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing sqlalchemy (1.3.24)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing urllib3 (1.26.13)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing virtualenv (20.16.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing black (22.8.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing gino (1.0.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-asyncio (0.15.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-cov (3.0.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-mock (3.6.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest-virtualenv (1.7.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing requests (2.27.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing starlette (0.19.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing the current project: gino-starlette (0.1.6)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u2705  Success - Main Install Python dependencies\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \u2b50 Run Main Test with pytest\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ============================= test session starts ==============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | platform linux -- Python 3.7.11, pytest-7.2.0, pluggy-1.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette, configfile: pytest.ini, testpaths: tests\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | plugins: shutil-1.7.0, virtualenv-1.7.0, anyio-3.6.2, asyncio-0.15.1, mock-3.6.1, cov-3.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | collected 10 items\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/test_demo.py EEE                                                   [ 30%]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/test_gino_starlette.py EEEEEEE                                     [100%]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ==================================== ERRORS ====================================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ________________ ERROR at setup of test[simple_starlette_demo] _________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _new_conn(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: New socket connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         extra_kw = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"source_address\"] = self.source_address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.socket_options:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"socket_options\"] = self.socket_options\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = connection.create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               (self._dns_host, self.port), self.timeout, **extra_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:175: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('localhost', 49133), timeout = None, source_address = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | socket_options = [(6, 1, 1)]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         address,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         source_address=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         socket_options=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Connect to *address* and return the socket object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port)``) and return the socket object.  Passing the optional\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         *timeout* parameter will set the timeout on the socket instance\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for the socket to bind as a source address before making the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         An host of '' or port 0 tells the OS to use the default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         host, port = address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if host.startswith(\"[\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host = host.strip(\"[]\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # The original create_connection function always returns all records.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         family = allowed_gai_family()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host.encode(\"idna\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except UnicodeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return six.raise_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 LocationParseError(u\"'%s', label empty or too long\" % host), None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             af, socktype, proto, canonname, sa = res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock = socket.socket(af, socktype, proto)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # If provided, set socket level options before connecting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 _set_socket_options(sock, socket_options)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.settimeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.bind(source_address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock.connect(sa)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return sock\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except socket.error as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if sock is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if err is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise err\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/connection.py:95: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('localhost', 49133), timeout = None, source_address = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | socket_options = [(6, 1, 1)]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         address,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         source_address=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         socket_options=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Connect to *address* and return the socket object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port)``) and return the socket object.  Passing the optional\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         *timeout* parameter will set the timeout on the socket instance\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for the socket to bind as a source address before making the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         An host of '' or port 0 tells the OS to use the default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         host, port = address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if host.startswith(\"[\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host = host.strip(\"[]\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # The original create_connection function always returns all records.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         family = allowed_gai_family()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host.encode(\"idna\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except UnicodeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return six.raise_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 LocationParseError(u\"'%s', label empty or too long\" % host), None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             af, socktype, proto, canonname, sa = res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock = socket.socket(af, socktype, proto)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # If provided, set socket level options before connecting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 _set_socket_options(sock, socket_options)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.settimeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.bind(source_address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               sock.connect(sa)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/connection.py:85: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:710: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | conn = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout_obj = Timeout(connect=None, read=None, total=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Perform a request on a given urllib connection object taken from our\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             a connection from one of our connection pools\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Socket timeout in seconds for the request. This can be a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             float or integer, which will set the same timeout value for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the socket connect and the socket read, or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             control over your timeouts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.num_requests += 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout_obj.start_connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Trigger any extra validation we need to do.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self._validate_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # conn.request() calls http.client.*.request, not the method in\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               conn.request(method, url, **httplib_request_kw)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:398: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, body=None, headers=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Avoid modifying the headers passed into .request()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers[\"User-Agent\"] = _get_default_user_agent()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:239: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, body=None, headers={}, *,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1281: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         header_names = frozenset(k.lower() for k in headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         skips = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'host' in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             skips['skip_host'] = 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'accept-encoding' in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             skips['skip_accept_encoding'] = 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.putrequest(method, url, **skips)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the caller passes encode_chunked=True or the following\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # conditions hold:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 1. content-length has not been explicitly set\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'content-length' not in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # only chunk body if not explicitly set for backwards\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # compatibility, assuming the client code is already handling the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # chunking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if 'transfer-encoding' not in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # if content-length cannot be automatically determined, fall\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # back to chunked encoding\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 content_length = self._get_content_length(body, method)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if content_length is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     if body is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         if self.debuglevel > 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             print('Unable to determine size of %r' % body)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         encode_chunked = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     self.putheader('Content-Length', str(content_length))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for hdr, value in headers.items():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.putheader(hdr, value)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(body, str):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # default charset of iso-8859-1.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             body = _encode(body, 'body')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1327: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | message_body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         This method sends the request to the server.  The optional message_body\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         argument can be used to pass a message body associated with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.__state == _CS_REQ_STARTED:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.__state = _CS_REQ_SENT\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise CannotSendHeader()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | message_body = None, encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         A message_body may be specified, to be appended to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self._buffer.extend((b\"\", b\"\"))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         del self._buffer[:]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self.send(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | data = b'GET / HTTP/1.1\\r\\nHost: localhost:49133\\r\\nUser-Agent: python-requests/2.27.1\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, data):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send `data' to the server.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         file-like object that supports a .read() method, or an iterable object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.sock is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if self.auto_open:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               self.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def connect(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       conn = self._new_conn()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:205: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _new_conn(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: New socket connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         extra_kw = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"source_address\"] = self.source_address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.socket_options:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"socket_options\"] = self.socket_options\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = connection.create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 (self._dns_host, self.port), self.timeout, **extra_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except SocketTimeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ConnectTimeoutError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Connection to %s timed out. (connect timeout=%s)\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 % (self.host, self.timeout),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except SocketError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise NewConnectionError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               self, \"Failed to establish a new connection: %s\" % e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f62d01bc110>: Failed to establish a new connection: [Errno 111] Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:187: NewConnectionError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f62d00968d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>, stream = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, proxies = OrderedDict()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) Whether to stream the request content.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             must be a path to a CA bundle to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self.get_connection(request.url, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except LocationValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise InvalidURL(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = self.request_url(request, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(timeout, tuple):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect, read = timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except ValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # this may raise a string formatting error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"timeout tuple, or a single float to set \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"both timeouts to the same value\".format(timeout))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ValueError(err)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif isinstance(timeout, TimeoutSauce):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 resp = conn.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     method=request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     body=request.body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     headers=request.headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     redirect=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     assert_same_host=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     decode_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     retries=self.max_retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                   timeout=timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/adapters.py:450: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=5, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01d8bd0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=4, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d029fe90>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d029fb90>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=2, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01af790>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=1, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01b4050>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01b4c50>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:788: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', response = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01bc110>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62d01d8f50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _stacktrace = <traceback object at 0x7f62d02ed730>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         response=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         error=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         _pool=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         _stacktrace=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param response: A response object, or None, if the server did not\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return a response.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param Exception error: An error encountered during the request, or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             None if the response was received successfully.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: A new ``Retry`` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.total is False and error:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Disabled, indicate to re-raise the error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         total = self.total\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if total is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         connect = self.connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         read = self.read\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect = self.redirect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         status_count = self.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         other = self.other\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cause = \"unknown\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         status = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect_location = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if error and self._is_connection_error(error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Connect retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if connect is False:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif connect is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif error and self._is_read_error(error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Read retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if read is False or not self._is_method_retryable(method):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif read is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 read -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif error:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Other retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if other is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 other -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif response and response.get_redirect_location():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Redirect retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if redirect is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cause = \"too many redirects\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect_location = response.get_redirect_location()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             status = response.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Incrementing because of a server error like a 500 in\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # status_forcelist and the given method is in the allowed_methods\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cause = ResponseError.GENERIC_ERROR\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if response and response.status:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if status_count is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     status_count -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 status = response.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         history = self.history + (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         new_retry = self.new(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=total,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connect=connect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read=read,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect=redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             status=status_count,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             other=other,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             history=history,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if new_retry.is_exhausted():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise MaxRetryError(_pool, url, error or ResponseError(cause))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=49133): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01bc110>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/retry.py:592: MaxRetryError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | virtualenv = <pytest_virtualenv.VirtualEnv object at 0x7f62d02b1d90>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'venv_client' for <Function test[simple_starlette_demo]>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | pytestconfig = <_pytest.config.Config object at 0x7f62d26fbc50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         params=[\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_starlette_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_fastapi_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"prod_fastapi_demo\", \"pyproject.toml\", \"run.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ids=[\"simple_starlette_demo\", \"simple_fastapi_demo\", \"prod_fastapi_demo\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def venv_client(virtualenv, request, pytestconfig):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         demo, install, run = request.param\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent.absolute()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         run_with_coverage = [virtualenv.python, virtualenv.coverage, \"run\", \"-p\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         base_path = cwd / \"examples\" / demo\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env = virtualenv.env.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env.update(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 k: v\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 for k, v in os.environ.items()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if k.startswith(\"DB_\") or k.startswith(\"APP_\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         virtualenv.run(\"pip install coverage\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install -r requirements.txt\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install poetry\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"poetry install\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"pytest\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"alembic\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"upgrade\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"head\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port = find_free_port()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         class Client(requests.Session):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client = Client()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries = Retry(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=6, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client.mount(\"http://\", HTTPAdapter(max_retries=retries))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args = run_with_coverage.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if getattr(pytestconfig.option, \"cov_source\", None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 source_dirs = \",\".join(pytestconfig.option.cov_source)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 args += [\"--source=%s\" % source_dirs]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args.append(base_path / run)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             with subprocess.Popen(args, env={\"APP_PORT\": str(port), **env}) as p:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                   client.get(\"/\").raise_for_status()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:360: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62d01dbd10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | url = '/', kwargs = {'allow_redirects': True}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def get(self, url, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url: URL for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('allow_redirects', True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return self.request('GET', url, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:542: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62d01dbd10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = 'http://localhost:49133/', args = ()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'allow_redirects': True}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:342: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62d01dbd10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = 'http://localhost:49133/', params = None, data = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = None, cookies = None, files = None, auth = None, timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, json = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Returns :class:`Response <Response>` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method: method for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url: URL for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             string for the :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             object to send in the body of the :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param json: (optional) json to send in the body of the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             for multipart encoding upload.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Basic/Digest/Custom HTTP Auth.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param allow_redirects: (optional) Set to True by default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type allow_redirects: bool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hostname to the URL of the proxy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) whether to immediately download the response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content. Defaults to ``False``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``False``, requests will accept any TLS certificate presented by\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the server, and will ignore hostname mismatches and/or expired\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             certificates, which will make your application vulnerable to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             may be useful during local development or testing.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If Tuple, ('cert', 'key') pair.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Create the Request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         req = Request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             method=method.upper(),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             files=files,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data=data or {},\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             json=json,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             params=params or {},\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auth=auth,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cookies=cookies,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hooks=hooks,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         prep = self.prepare_request(req)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         proxies = proxies or {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         settings = self.merge_environment_settings(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             prep.url, proxies, stream, verify, cert\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Send the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         send_kwargs = {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             'timeout': timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             'allow_redirects': allow_redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         send_kwargs.update(settings)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       resp = self.send(prep, **send_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:529: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62d01dbd10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': None, ...}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | adapter = <requests.adapters.HTTPAdapter object at 0x7f62d00968d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | start = 1688221164.9060023\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send a given PreparedRequest.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the correct parameters to reproduce the previous request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('stream', self.stream)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('verify', self.verify)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('cert', self.cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'proxies' not in kwargs:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             kwargs['proxies'] = resolve_proxies(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 request, self.proxies, self.trust_env\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # It's possible that users might accidentally send a Request object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Guard against that specific failure case.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(request, Request):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ValueError('You can only send PreparedRequests.')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         stream = kwargs.get('stream')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         hooks = request.hooks\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Get the appropriate adapter to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         adapter = self.get_adapter(url=request.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Start time (approximately) of the request\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         start = preferred_clock()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Send the request\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       r = adapter.send(request, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:645: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f62d00968d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>, stream = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, proxies = OrderedDict()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) Whether to stream the request content.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             must be a path to a CA bundle to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self.get_connection(request.url, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except LocationValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise InvalidURL(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = self.request_url(request, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(timeout, tuple):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect, read = timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except ValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # this may raise a string formatting error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"timeout tuple, or a single float to set \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"both timeouts to the same value\".format(timeout))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ValueError(err)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif isinstance(timeout, TimeoutSauce):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 resp = conn.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     method=request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     body=request.body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     headers=request.headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     redirect=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     assert_same_host=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     decode_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     retries=self.max_retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     timeout=timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Send the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if hasattr(conn, 'proxy_pool'):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     conn = conn.proxy_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     skip_host = 'Host' in request.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.putrequest(request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         skip_accept_encoding=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         skip_host=skip_host)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     for header, value in request.headers.items():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.putheader(header, value)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.endheaders()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     for i in request.body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(b'\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(i)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(b'\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # Receive the response from the server\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r = low_conn.getresponse(buffering=True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     except TypeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         # For compatibility with Python 3.3+\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r = low_conn.getresponse()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     resp = HTTPResponse.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         pool=conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         connection=low_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         decode_content=False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # If we hit any problems here, clean up the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # Then, reraise so that we can handle the actual exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (ProtocolError, socket.error) as err:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ConnectionError(err, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except MaxRetryError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ConnectTimeout(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, ResponseError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise RetryError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, _ProxyError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ProxyError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, _SSLError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # This branch is for urllib3 v1.22 and later.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise SSLError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise ConnectionError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=49133): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01bc110>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | virtualenv = <pytest_virtualenv.VirtualEnv object at 0x7f62d02b1d90>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'venv_client' for <Function test[simple_starlette_demo]>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | pytestconfig = <_pytest.config.Config object at 0x7f62d26fbc50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         params=[\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_starlette_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_fastapi_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"prod_fastapi_demo\", \"pyproject.toml\", \"run.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ids=[\"simple_starlette_demo\", \"simple_fastapi_demo\", \"prod_fastapi_demo\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def venv_client(virtualenv, request, pytestconfig):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         demo, install, run = request.param\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent.absolute()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         run_with_coverage = [virtualenv.python, virtualenv.coverage, \"run\", \"-p\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         base_path = cwd / \"examples\" / demo\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env = virtualenv.env.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env.update(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 k: v\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 for k, v in os.environ.items()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if k.startswith(\"DB_\") or k.startswith(\"APP_\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         virtualenv.run(\"pip install coverage\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install -r requirements.txt\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install poetry\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"poetry install\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"pytest\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"alembic\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"upgrade\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"head\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port = find_free_port()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         class Client(requests.Session):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client = Client()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries = Retry(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=6, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client.mount(\"http://\", HTTPAdapter(max_retries=retries))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args = run_with_coverage.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if getattr(pytestconfig.option, \"cov_source\", None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 source_dirs = \",\".join(pytestconfig.option.cov_source)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 args += [\"--source=%s\" % source_dirs]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args.append(base_path / run)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             with subprocess.Popen(args, env={\"APP_PORT\": str(port), **env}) as p:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     client.get(\"/\").raise_for_status()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     yield client\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     p.terminate()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         async def tear_down():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             conn = await asyncpg.connect(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             await conn.execute(\"DROP TABLE {}_users\".format(demo))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             await conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                       asyncio.get_event_loop().run_until_complete(tear_down())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:371: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:367: in tear_down\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     conn = await asyncpg.connect(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stdout setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | created virtual environment CPython3.7.11.final.0-64 in 1184ms\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   creator CPython3Posix(dest=/tmp/tmp2xf0m97_/.env, clear=False, no_vcs_ignore=False, global=False)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/runneradmin/.local/share/virtualenv)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     added seed packages: pip==22.2.1, setuptools==63.2.0, wheel==0.37.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 4.1 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed coverage-7.2.7\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting uvicorn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading uvicorn-0.22.0-py3-none-any.whl (58 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 952.8 kB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting starlette<1.0,>=0.19\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading starlette-0.28.0-py3-none-any.whl (68 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 68.9/68.9 kB 6.0 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting gino<2.0,>=1.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading gino-1.0.1-py3-none-any.whl (49 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 49.6/49.6 kB 5.2 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting h11>=0.8\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 2.7 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting click>=7.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 5.2 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting typing-extensions\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting importlib-metadata\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading importlib_metadata-1.7.0-py2.py3-none-any.whl (31 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting asyncpg<1.0,>=0.18\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading asyncpg-0.27.0.tar.gz (808 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 808.9/808.9 kB 35.3 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting SQLAlchemy<1.4,>=1.2.16\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading SQLAlchemy-1.3.24-cp37-cp37m-manylinux2010_x86_64.whl (1.3 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.3/1.3 MB 4.1 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting anyio<5,>=3.4.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading anyio-3.7.0-py3-none-any.whl (80 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 80.9/80.9 kB 2.4 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting exceptiongroup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting idna>=2.8\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached idna-3.4-py3-none-any.whl (61 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting sniffio>=1.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting zipp>=0.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Building wheels for collected packages: gino-starlette, asyncpg\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for gino-starlette (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for gino-starlette (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Created wheel for gino-starlette: filename=gino_starlette-0.1.6-py3-none-any.whl size=6047 sha256=d7de4e334290ad68eccea09af46288f154ca28414e0caa0c3b74667407d488b4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/5c/41/4f/89a547cee70fef28c477e9f28e72478e671714de151465b3e1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for asyncpg (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for asyncpg (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Created wheel for asyncpg: filename=asyncpg-0.27.0-cp37-cp37m-linux_x86_64.whl size=2888893 sha256=2857ed2c278932be68fe45ecc9e85f9ea3445cfe82d5c282d62d06185125b502\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/ed/ca/ea/b9c732e62c9027765c25f63b69abe34e013ee35448f1cd1a45\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully built gino-starlette asyncpg\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: zipp, typing-extensions, SQLAlchemy, sniffio, idna, exceptiongroup, importlib-metadata, h11, asyncpg, anyio, starlette, gino, click, uvicorn, gino-starlette\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed SQLAlchemy-1.3.24 anyio-3.7.0 asyncpg-0.27.0 click-8.1.3 exceptiongroup-1.1.1 gino-1.0.1 gino-starlette-0.1.6 h11-0.14.0 idna-3.4 importlib-metadata-1.7.0 sniffio-1.3.0 starlette-0.28.0 typing-extensions-4.7.0 uvicorn-0.22.0 zipp-3.15.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stderr setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | INFO:     Started server process [337]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | INFO:     Waiting for application startup.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Cannot connect to the database; max retries reached.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR:    Traceback (most recent call last):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/starlette/routing.py\", line 686, in lifespan\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     async with self.lifespan_context(app) as maybe_state:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/starlette/routing.py\", line 575, in __aenter__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._router.startup()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/starlette/routing.py\", line 663, in startup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await handler()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino_starlette.py\", line 183, in startup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **config[\"kwargs\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino_starlette.py\", line 226, in set_bind\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await super().set_bind(bind, loop=loop, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino/api.py\", line 417, in set_bind\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     bind = await create_engine(bind, loop=loop, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino/strategies.py\", line 55, in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 465, in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 218, in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 409, in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 437, in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 129, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 512, in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connection.py\", line 2110, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 895, in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 888, in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 773, in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 825, in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/compat.py\", line 56, in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmp2xf0m97_/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 687, in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py\", line 962, in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py\", line 949, in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py\", line 473, in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py\", line 503, in _sock_connect_cb\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR:    Application startup failed. Exiting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ------------------------------ Captured log setup ------------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=5, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01d8bd0>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d029fe90>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d029fb90>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01af790>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01b4050>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62d01b4c50>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _________________ ERROR at setup of test[simple_fastapi_demo] __________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _new_conn(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: New socket connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         extra_kw = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"source_address\"] = self.source_address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.socket_options:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"socket_options\"] = self.socket_options\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = connection.create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               (self._dns_host, self.port), self.timeout, **extra_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:175: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('localhost', 39045), timeout = None, source_address = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | socket_options = [(6, 1, 1)]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         address,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         source_address=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         socket_options=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Connect to *address* and return the socket object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port)``) and return the socket object.  Passing the optional\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         *timeout* parameter will set the timeout on the socket instance\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for the socket to bind as a source address before making the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         An host of '' or port 0 tells the OS to use the default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         host, port = address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if host.startswith(\"[\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host = host.strip(\"[]\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # The original create_connection function always returns all records.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         family = allowed_gai_family()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host.encode(\"idna\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except UnicodeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return six.raise_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 LocationParseError(u\"'%s', label empty or too long\" % host), None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             af, socktype, proto, canonname, sa = res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock = socket.socket(af, socktype, proto)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # If provided, set socket level options before connecting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 _set_socket_options(sock, socket_options)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.settimeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.bind(source_address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock.connect(sa)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return sock\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except socket.error as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if sock is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if err is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise err\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/connection.py:95: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('localhost', 39045), timeout = None, source_address = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | socket_options = [(6, 1, 1)]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         address,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         source_address=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         socket_options=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Connect to *address* and return the socket object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port)``) and return the socket object.  Passing the optional\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         *timeout* parameter will set the timeout on the socket instance\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         before attempting to connect.  If no *timeout* is supplied, the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for the socket to bind as a source address before making the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         An host of '' or port 0 tells the OS to use the default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         host, port = address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if host.startswith(\"[\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host = host.strip(\"[]\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # The original create_connection function always returns all records.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         family = allowed_gai_family()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             host.encode(\"idna\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except UnicodeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return six.raise_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 LocationParseError(u\"'%s', label empty or too long\" % host), None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             af, socktype, proto, canonname, sa = res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             sock = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 sock = socket.socket(af, socktype, proto)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # If provided, set socket level options before connecting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 _set_socket_options(sock, socket_options)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.settimeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     sock.bind(source_address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               sock.connect(sa)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/connection.py:85: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:710: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | conn = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | httplib_request_kw = {'body': None, 'headers': {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout_obj = Timeout(connect=None, read=None, total=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Perform a request on a given urllib connection object taken from our\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             a connection from one of our connection pools\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Socket timeout in seconds for the request. This can be a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             float or integer, which will set the same timeout value for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the socket connect and the socket read, or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`, which gives you more fine-grained\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             control over your timeouts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.num_requests += 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout_obj.start_connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Trigger any extra validation we need to do.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self._validate_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (SocketTimeout, BaseSSLError) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # conn.request() calls http.client.*.request, not the method in\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # urllib3.request. It also calls makefile (recv) on the socket.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn.request_chunked(method, url, **httplib_request_kw)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               conn.request(method, url, **httplib_request_kw)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:398: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, body=None, headers=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Avoid modifying the headers passed into .request()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers[\"User-Agent\"] = _get_default_user_agent()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:239: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, body=None, headers={}, *,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send a complete request to the server.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self._send_request(method, url, body, headers, encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1281: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _send_request(self, method, url, body, headers, encode_chunked):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Honor explicitly requested Host: and Accept-Encoding: headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         header_names = frozenset(k.lower() for k in headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         skips = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'host' in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             skips['skip_host'] = 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'accept-encoding' in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             skips['skip_accept_encoding'] = 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.putrequest(method, url, **skips)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # chunked encoding will happen if HTTP/1.1 is used and either\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the caller passes encode_chunked=True or the following\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # conditions hold:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 1. content-length has not been explicitly set\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 2. the body is a file or iterable, but not a str or bytes-like\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # 3. Transfer-Encoding has NOT been explicitly set by the caller\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'content-length' not in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # only chunk body if not explicitly set for backwards\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # compatibility, assuming the client code is already handling the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # chunking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if 'transfer-encoding' not in header_names:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # if content-length cannot be automatically determined, fall\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # back to chunked encoding\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 content_length = self._get_content_length(body, method)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if content_length is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     if body is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         if self.debuglevel > 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             print('Unable to determine size of %r' % body)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         encode_chunked = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         self.putheader('Transfer-Encoding', 'chunked')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     self.putheader('Content-Length', str(content_length))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         for hdr, value in headers.items():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.putheader(hdr, value)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(body, str):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # RFC 2616 Section 3.7.1 says that text default has a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # default charset of iso-8859-1.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             body = _encode(body, 'body')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self.endheaders(body, encode_chunked=encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1327: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | message_body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def endheaders(self, message_body=None, *, encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Indicate that the last header line has been sent to the server.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         This method sends the request to the server.  The optional message_body\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         argument can be used to pass a message body associated with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.__state == _CS_REQ_STARTED:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.__state = _CS_REQ_SENT\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise CannotSendHeader()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self._send_output(message_body, encode_chunked=encode_chunked)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1276: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | message_body = None, encode_chunked = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _send_output(self, message_body=None, encode_chunked=False):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send the currently buffered request and clear the buffer.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Appends an extra \\\\r\\\\n to the buffer.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         A message_body may be specified, to be appended to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self._buffer.extend((b\"\", b\"\"))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         msg = b\"\\r\\n\".join(self._buffer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         del self._buffer[:]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       self.send(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1036: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | data = b'GET / HTTP/1.1\\r\\nHost: localhost:39045\\r\\nUser-Agent: python-requests/2.27.1\\r\\nAccept-Encoding: gzip, deflate\\r\\nAccept: */*\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, data):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send `data' to the server.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ``data`` can be a string object, a bytes object, an array object, a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         file-like object that supports a .read() method, or an iterable object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.sock is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if self.auto_open:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               self.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:976: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def connect(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       conn = self._new_conn()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:205: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _new_conn(self):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: New socket connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         extra_kw = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.source_address:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"source_address\"] = self.source_address\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.socket_options:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             extra_kw[\"socket_options\"] = self.socket_options\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = connection.create_connection(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 (self._dns_host, self.port), self.timeout, **extra_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except SocketTimeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ConnectTimeoutError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Connection to %s timed out. (connect timeout=%s)\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 % (self.host, self.timeout),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except SocketError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise NewConnectionError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               self, \"Failed to establish a new connection: %s\" % e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>: Failed to establish a new connection: [Errno 111] Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connection.py:187: NewConnectionError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f62cf3f27d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>, stream = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, proxies = OrderedDict()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) Whether to stream the request content.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             must be a path to a CA bundle to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self.get_connection(request.url, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except LocationValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise InvalidURL(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = self.request_url(request, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(timeout, tuple):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect, read = timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except ValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # this may raise a string formatting error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"timeout tuple, or a single float to set \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"both timeouts to the same value\".format(timeout))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ValueError(err)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif isinstance(timeout, TimeoutSauce):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 resp = conn.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     method=request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     body=request.body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     headers=request.headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     redirect=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     assert_same_host=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     decode_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     retries=self.max_retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                   timeout=timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/adapters.py:450: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=5, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf242350>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=4, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf1a75d0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf1a70d0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=2, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf2cbb90>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=1, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf2c0090>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf36d390>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries.sleep()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Keep track of the error for the retry warning.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not clean_exit:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We hit some kind of exception, handled or otherwise. We need\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # to throw the connection away unless explicitly told not to.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Close the connection, set the variable to None, and make sure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # we put the None back in the pool to avoid leaking it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn = conn and conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if release_this_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Put the connection back to be reused. If the connection is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # expired then it will be None, which will get replaced with a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # fresh connection during _get_conn.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._put_conn(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try again\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.warning(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 \"Retrying (%r) after connection broken by '%r': %s\", retries, err, url\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return self.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 assert_same_host,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool_timeout=pool_timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 release_conn=release_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body_pos=body_pos,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:828: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', body = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = {'User-Agent': 'python-requests/2.27.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | redirect = False, assert_same_host = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | release_conn = False, chunked = False, body_pos = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | response_kw = {'decode_content': False, 'preload_content': False}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/', query=None, fragment=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | destination_scheme = None, conn = None, release_this_conn = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | http_tunnel_required = False, err = None, clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         headers=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         assert_same_host=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         timeout=_Default,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         pool_timeout=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_conn=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Get a connection from the pool and perform an HTTP request. This is the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         lowest level call for making a request, so you'll need to specify all\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the raw details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            More commonly, it's appropriate to use a convenience method provided\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         .. note::\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `release_conn` will only behave as expected if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` because we want to make\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            `preload_content=False` the default behaviour someday soon without\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |            breaking backwards compatibility.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             The URL to perform the request on.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Dictionary of custom headers to send, such as User-Agent,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             these headers completely replace any pool-specific headers.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param retries:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Configure the number of retries to allow before raising a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass ``None`` to retry until you receive a response. Pass a\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             over different types of retries.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Pass an integer number to retry connection errors that many times,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             but no other types of errors. Pass zero to never retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``False``, then retries are disabled and any exception is raised\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the redirect response will be returned.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param redirect:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, automatically handle redirects (status codes 301, 302,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             will disable redirect, too.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param assert_same_host:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If ``True``, will make sure that the host of the pool requests is\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             consistent else will raise HostChangedError. When ``False``, you can\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             use the pool on an HTTP proxy and request foreign hosts.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If specified, overrides the default timeout for this one\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             request. It may be a float (in seconds) or an instance of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`urllib3.util.Timeout`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param pool_timeout:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If set and the pool is set to block=True, then this method will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connection is available within the time period.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param release_conn:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If False, then the urlopen call will not release the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool once a response is received (but will release if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             you read the entire contents of the response such as when\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             `preload_content=True`). This is useful if you're not preloading\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the response's content immediately. You will need to call\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             back into the pool. If None, it takes the value of\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``response_kw.get('preload_content', True)``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If True, urllib3 will send the body using chunked transfer\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content-length form. Defaults to False.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param int body_pos:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Position to seek to in file-like body in the event of a retry or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect. Typically this won't need to be set because urllib3 will\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auto-populate the value when needed.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\\\**response_kw:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Additional parameters are passed to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         parsed_url = parse_url(url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         destination_scheme = parsed_url.scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if headers is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = self.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not isinstance(retries, Retry):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if release_conn is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_conn = response_kw.get(\"preload_content\", True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Check host\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if assert_same_host and not self.is_same_host(url):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise HostChangedError(self, url, retries)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Ensure that the URL we're connecting to is properly encoded\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if url.startswith(\"/\"):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(_encode_target(url))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url = six.ensure_str(parsed_url.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         conn = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Track whether `conn` needs to be released before\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # returning/raising/recursing. Update this variable if necessary, and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # leave `release_conn` constant throughout the function. That way, if\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the function recurses, the original value of `release_conn` will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # passed down into the recursive call, and its value will be respected.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # See issue #651 [1] for details.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         #\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         release_this_conn = release_conn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         http_tunnel_required = connection_requires_http_tunnel(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             self.proxy, self.proxy_config, destination_scheme\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # have to copy the headers dict so we can safely change it without those\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # changes being reflected in anyone else's copy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers = headers.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers.update(self.proxy_headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Must keep the exception bound to a separate variable or else Python 3\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # complains about UnboundLocalError.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         err = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Keep track of whether we cleanly exited the except block. This\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # ensures we do proper cleanup in finally.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Rewind body position, if needed. Record current position\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # for future rewinds in the event of a redirect/retry.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         body_pos = set_file_position(body, body_pos)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Request a connection from the queue.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout_obj = self._get_timeout(timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self._get_conn(timeout=pool_timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn.timeout = timeout_obj.connect_timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn, \"sock\", None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if is_new_proxy_conn and http_tunnel_required:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 self._prepare_proxy(conn)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Make the request on the httplib connection object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             httplib_response = self._make_request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout=timeout_obj,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 body=body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 chunked=chunked,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # If we're going to release the connection in ``finally:``, then\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # the response doesn't need to know about the connection. Otherwise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # it will also try to release it and we'll have a double-release\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # mess.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_conn = conn if not release_conn else None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Pass method to Response for length checking\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response_kw[\"request_method\"] = method\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Import httplib's response into our own wrapper object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             response = self.ResponseCls.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 httplib_response,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 pool=self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connection=response_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 retries=retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 **response_kw\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Everything went great!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except EmptyPoolError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Didn't get a connection from the pool, no need to clean up\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             release_this_conn = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             TimeoutError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             HTTPException,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SocketError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ProtocolError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             BaseSSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             SSLError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             CertificateError,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ) as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Discard the connection for these exceptions. It will be\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # replaced during the next _get_conn() call.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             clean_exit = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def _is_ssl_error_message_from_http_proxy(ssl_error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # We're trying to detect the message 'WRONG_VERSION_NUMBER' but\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # SSLErrors are kinda all over the place when it comes to the message,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # so we try to cover our bases here!\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 message = \" \".join(re.split(\"[^a-z]\", str(ssl_error).lower()))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"wrong version number\" in message or \"unknown protocol\" in message\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Try to detect a common user error with proxies which is to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # set an HTTP proxy to be HTTPS when it should be 'http://'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # (ie {'http': 'http://proxy', 'https': 'https://proxy'})\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Instead we add a nice error message and point to a URL.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 isinstance(e, BaseSSLError)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and self.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and _is_ssl_error_message_from_http_proxy(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 and conn.proxy.scheme == \"https\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"Your proxy appears to only use HTTP and not HTTPS, \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"try changing your proxy URL to be HTTP. See: \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"#https-proxy-error-http-proxy\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     SSLError(e),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (BaseSSLError, CertificateError)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = SSLError(e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProxyError(\"Cannot connect to proxy.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif isinstance(e, (SocketError, HTTPException)):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 e = ProtocolError(\"Connection aborted.\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             retries = retries.increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/connectionpool.py:788: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = Retry(total=0, connect=None, read=None, redirect=None, status=None)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = '/', response = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>: Failed to establish a new connection: [Errno 111] Connection refused')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f62cf2426d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _stacktrace = <traceback object at 0x7f62cf34e3c0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def increment(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         method=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         response=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         error=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         _pool=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         _stacktrace=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param response: A response object, or None, if the server did not\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return a response.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type response: :class:`~urllib3.response.HTTPResponse`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param Exception error: An error encountered during the request, or\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             None if the response was received successfully.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :return: A new ``Retry`` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if self.total is False and error:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Disabled, indicate to re-raise the error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         total = self.total\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if total is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         connect = self.connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         read = self.read\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect = self.redirect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         status_count = self.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         other = self.other\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cause = \"unknown\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         status = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         redirect_location = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if error and self._is_connection_error(error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Connect retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if connect is False:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif connect is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif error and self._is_read_error(error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Read retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if read is False or not self._is_method_retryable(method):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise six.reraise(type(error), error, _stacktrace)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             elif read is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 read -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif error:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Other retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if other is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 other -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif response and response.get_redirect_location():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Redirect retry?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if redirect is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 redirect -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cause = \"too many redirects\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect_location = response.get_redirect_location()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             status = response.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Incrementing because of a server error like a 500 in\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # status_forcelist and the given method is in the allowed_methods\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cause = ResponseError.GENERIC_ERROR\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if response and response.status:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if status_count is not None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     status_count -= 1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 status = response.status\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         history = self.history + (\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             RequestHistory(method, url, error, status, redirect_location),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         new_retry = self.new(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=total,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             connect=connect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read=read,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             redirect=redirect,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             status=status_count,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             other=other,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             history=history,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if new_retry.is_exhausted():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise MaxRetryError(_pool, url, error or ResponseError(cause))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=39045): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/urllib3/util/retry.py:592: MaxRetryError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | virtualenv = <pytest_virtualenv.VirtualEnv object at 0x7f62cf26f250>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'venv_client' for <Function test[simple_fastapi_demo]>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | pytestconfig = <_pytest.config.Config object at 0x7f62d26fbc50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         params=[\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_starlette_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_fastapi_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"prod_fastapi_demo\", \"pyproject.toml\", \"run.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ids=[\"simple_starlette_demo\", \"simple_fastapi_demo\", \"prod_fastapi_demo\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def venv_client(virtualenv, request, pytestconfig):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         demo, install, run = request.param\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent.absolute()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         run_with_coverage = [virtualenv.python, virtualenv.coverage, \"run\", \"-p\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         base_path = cwd / \"examples\" / demo\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env = virtualenv.env.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env.update(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 k: v\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 for k, v in os.environ.items()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if k.startswith(\"DB_\") or k.startswith(\"APP_\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         virtualenv.run(\"pip install coverage\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install -r requirements.txt\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install poetry\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"poetry install\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"pytest\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"alembic\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"upgrade\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"head\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port = find_free_port()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         class Client(requests.Session):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client = Client()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries = Retry(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=6, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client.mount(\"http://\", HTTPAdapter(max_retries=retries))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args = run_with_coverage.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if getattr(pytestconfig.option, \"cov_source\", None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 source_dirs = \",\".join(pytestconfig.option.cov_source)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 args += [\"--source=%s\" % source_dirs]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args.append(base_path / run)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             with subprocess.Popen(args, env={\"APP_PORT\": str(port), **env}) as p:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                   client.get(\"/\").raise_for_status()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:360: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62cf26a710>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | url = '/', kwargs = {'allow_redirects': True}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def get(self, url, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         r\"\"\"Sends a GET request. Returns :class:`Response` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url: URL for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('allow_redirects', True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return self.request('GET', url, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:542: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62cf26a710>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = 'http://localhost:39045/', args = ()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'allow_redirects': True}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:342: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62cf26a710>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | method = 'GET', url = 'http://localhost:39045/', params = None, data = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | headers = None, cookies = None, files = None, auth = None, timeout = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | allow_redirects = True, proxies = {}, hooks = None, stream = None, verify = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, json = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def request(self, method, url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             params=None, data=None, headers=None, cookies=None, files=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auth=None, timeout=None, allow_redirects=True, proxies=None,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hooks=None, stream=None, verify=None, cert=None, json=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Returns :class:`Response <Response>` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param method: method for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param url: URL for the new :class:`Request` object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param params: (optional) Dictionary or bytes to be sent in the query\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             string for the :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             object to send in the body of the :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param json: (optional) json to send in the body of the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param headers: (optional) Dictionary of HTTP Headers to send with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cookies: (optional) Dict or CookieJar object to send with the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             :class:`Request`.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param files: (optional) Dictionary of ``'filename': file-like-objects``\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             for multipart encoding upload.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param auth: (optional) Auth tuple or callable to enable\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Basic/Digest/Custom HTTP Auth.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param allow_redirects: (optional) Set to True by default.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type allow_redirects: bool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) Dictionary mapping protocol or protocol and\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hostname to the URL of the proxy.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) whether to immediately download the response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             content. Defaults to ``False``.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the server's TLS certificate, or a string, in which case it must be a path\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             to a CA bundle to use. Defaults to ``True``. When set to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             ``False``, requests will accept any TLS certificate presented by\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             the server, and will ignore hostname mismatches and/or expired\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             certificates, which will make your application vulnerable to\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             man-in-the-middle (MitM) attacks. Setting verify to ``False``\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             may be useful during local development or testing.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) if String, path to ssl client cert file (.pem).\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             If Tuple, ('cert', 'key') pair.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Create the Request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         req = Request(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             method=method.upper(),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             headers=headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             files=files,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data=data or {},\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             json=json,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             params=params or {},\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             auth=auth,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cookies=cookies,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             hooks=hooks,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         prep = self.prepare_request(req)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         proxies = proxies or {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         settings = self.merge_environment_settings(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             prep.url, proxies, stream, verify, cert\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Send the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         send_kwargs = {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             'timeout': timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             'allow_redirects': allow_redirects,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         send_kwargs.update(settings)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       resp = self.send(prep, **send_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:529: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <tests.conftest.venv_client.<locals>.Client object at 0x7f62cf26a710>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': None, ...}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | allow_redirects = True, stream = False, hooks = {'response': []}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | adapter = <requests.adapters.HTTPAdapter object at 0x7f62cf3f27d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | start = 1688221211.9729621\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Send a given PreparedRequest.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Set defaults that the hooks can utilize to ensure they always have\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # the correct parameters to reproduce the previous request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('stream', self.stream)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('verify', self.verify)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         kwargs.setdefault('cert', self.cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if 'proxies' not in kwargs:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             kwargs['proxies'] = resolve_proxies(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 request, self.proxies, self.trust_env\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # It's possible that users might accidentally send a Request object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Guard against that specific failure case.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(request, Request):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ValueError('You can only send PreparedRequests.')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Set up variables needed for resolve_redirects and dispatching of hooks\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         allow_redirects = kwargs.pop('allow_redirects', True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         stream = kwargs.get('stream')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         hooks = request.hooks\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Get the appropriate adapter to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         adapter = self.get_adapter(url=request.url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Start time (approximately) of the request\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         start = preferred_clock()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         # Send the request\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       r = adapter.send(request, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/sessions.py:645: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <requests.adapters.HTTPAdapter object at 0x7f62cf3f27d0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <PreparedRequest [GET]>, stream = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cert = None, proxies = OrderedDict()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param stream: (optional) Whether to stream the request content.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param timeout: (optional) How long to wait for the server to send\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             read timeout) <timeouts>` tuple.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :type timeout: float or tuple or urllib3 Timeout object\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             we verify the server's TLS certificate, or a string, in which case it\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             must be a path to a CA bundle to use\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         :rtype: requests.Response\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             conn = self.get_connection(request.url, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except LocationValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise InvalidURL(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.cert_verify(conn, request.url, verify, cert)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         url = self.request_url(request, proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         chunked = not (request.body is None or 'Content-Length' in request.headers)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(timeout, tuple):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 connect, read = timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             except ValueError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # this may raise a string formatting error.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = (\"Invalid timeout {}. Pass a (connect, read) \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"timeout tuple, or a single float to set \"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                        \"both timeouts to the same value\".format(timeout))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ValueError(err)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         elif isinstance(timeout, TimeoutSauce):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if not chunked:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 resp = conn.urlopen(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     method=request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     url=url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     body=request.body,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     headers=request.headers,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     redirect=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     assert_same_host=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     decode_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     retries=self.max_retries,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     timeout=timeout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Send the request.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if hasattr(conn, 'proxy_pool'):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     conn = conn.proxy_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     skip_host = 'Host' in request.headers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.putrequest(request.method,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         url,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         skip_accept_encoding=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                                         skip_host=skip_host)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     for header, value in request.headers.items():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.putheader(header, value)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.endheaders()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     for i in request.body:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(hex(len(i))[2:].encode('utf-8'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(b'\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(i)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         low_conn.send(b'\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.send(b'0\\r\\n\\r\\n')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # Receive the response from the server\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         # For Python 2.7, use buffering of HTTP responses\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r = low_conn.getresponse(buffering=True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     except TypeError:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         # For compatibility with Python 3.3+\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r = low_conn.getresponse()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     resp = HTTPResponse.from_httplib(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         r,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         pool=conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         connection=low_conn,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         preload_content=False,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         decode_content=False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # If we hit any problems here, clean up the connection.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     # Then, reraise so that we can handle the actual exception.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     low_conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except (ProtocolError, socket.error) as err:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             raise ConnectionError(err, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         except MaxRetryError as e:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, ConnectTimeoutError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # TODO: Remove this in 3.0.0: see #2811\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if not isinstance(e.reason, NewConnectionError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ConnectTimeout(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, ResponseError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise RetryError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, _ProxyError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise ProxyError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if isinstance(e.reason, _SSLError):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # This branch is for urllib3 v1.22 and later.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 raise SSLError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise ConnectionError(e, request=request)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=39045): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf3f9c10>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/requests/adapters.py:519: ConnectionError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | During handling of the above exception, another exception occurred:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | virtualenv = <pytest_virtualenv.VirtualEnv object at 0x7f62cf26f250>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'venv_client' for <Function test[simple_fastapi_demo]>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | pytestconfig = <_pytest.config.Config object at 0x7f62d26fbc50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         params=[\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_starlette_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_fastapi_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"prod_fastapi_demo\", \"pyproject.toml\", \"run.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ids=[\"simple_starlette_demo\", \"simple_fastapi_demo\", \"prod_fastapi_demo\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def venv_client(virtualenv, request, pytestconfig):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         demo, install, run = request.param\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent.absolute()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         run_with_coverage = [virtualenv.python, virtualenv.coverage, \"run\", \"-p\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         base_path = cwd / \"examples\" / demo\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env = virtualenv.env.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env.update(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 k: v\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 for k, v in os.environ.items()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if k.startswith(\"DB_\") or k.startswith(\"APP_\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         virtualenv.run(\"pip install coverage\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install -r requirements.txt\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install poetry\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"poetry install\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"pytest\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"alembic\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"upgrade\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"head\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         port = find_free_port()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         class Client(requests.Session):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             def request(self, method, url, *args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 url = urljoin(\"http://localhost:{}\".format(port), url)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 return super().request(method, url, *args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client = Client()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retries = Retry(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             total=6, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         client.mount(\"http://\", HTTPAdapter(max_retries=retries))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args = run_with_coverage.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if getattr(pytestconfig.option, \"cov_source\", None):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 source_dirs = \",\".join(pytestconfig.option.cov_source)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 args += [\"--source=%s\" % source_dirs]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             args.append(base_path / run)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             with subprocess.Popen(args, env={\"APP_PORT\": str(port), **env}) as p:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     client.get(\"/\").raise_for_status()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     yield client\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 finally:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     p.terminate()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                         async def tear_down():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             conn = await asyncpg.connect(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             await conn.execute(\"DROP TABLE {}_users\".format(demo))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                             await conn.close()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >                       asyncio.get_event_loop().run_until_complete(tear_down())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:371: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:367: in tear_down\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     conn = await asyncpg.connect(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stdout setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | created virtual environment CPython3.7.11.final.0-64 in 426ms\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   creator CPython3Posix(dest=/tmp/tmpqanlnnb3/.env, clear=False, no_vcs_ignore=False, global=False)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/runneradmin/.local/share/virtualenv)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     added seed packages: pip==22.2.1, setuptools==63.2.0, wheel==0.37.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed coverage-7.2.7\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Processing /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Installing build dependencies: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Getting requirements to build wheel: finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting fastapi\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading fastapi-0.99.0-py3-none-any.whl (58 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.2/58.2 kB 1.3 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting uvicorn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached uvicorn-0.22.0-py3-none-any.whl (58 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting gino<2.0,>=1.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached gino-1.0.1-py3-none-any.whl (49 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting starlette<1.0,>=0.19\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached starlette-0.28.0-py3-none-any.whl (68 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting typing-extensions>=4.5.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting starlette<1.0,>=0.19\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading starlette-0.27.0-py3-none-any.whl (66 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 67.0/67.0 kB 1.2 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pydantic!=1.8,!=1.8.1,<2.0.0,>=1.7.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Downloading pydantic-1.10.10-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.1/3.1 MB 13.6 MB/s eta 0:00:00\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting click>=7.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached click-8.1.3-py3-none-any.whl (96 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting h11>=0.8\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached h11-0.14.0-py3-none-any.whl (58 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting importlib-metadata\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting SQLAlchemy<1.4,>=1.2.16\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached SQLAlchemy-1.3.24-cp37-cp37m-manylinux2010_x86_64.whl (1.3 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting importlib-metadata\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached importlib_metadata-1.7.0-py2.py3-none-any.whl (31 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting asyncpg<1.0,>=0.18\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached asyncpg-0.27.0-cp37-cp37m-linux_x86_64.whl\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting anyio<5,>=3.4.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached anyio-3.7.0-py3-none-any.whl (80 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting exceptiongroup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting sniffio>=1.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached sniffio-1.3.0-py3-none-any.whl (10 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting idna>=2.8\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached idna-3.4-py3-none-any.whl (61 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting zipp>=0.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Building wheels for collected packages: gino-starlette\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for gino-starlette (pyproject.toml): started\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Building wheel for gino-starlette (pyproject.toml): finished with status 'done'\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Created wheel for gino-starlette: filename=gino_starlette-0.1.6-py3-none-any.whl size=6047 sha256=d7de4e334290ad68eccea09af46288f154ca28414e0caa0c3b74667407d488b4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/5c/41/4f/89a547cee70fef28c477e9f28e72478e671714de151465b3e1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully built gino-starlette\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: zipp, typing-extensions, SQLAlchemy, sniffio, idna, exceptiongroup, pydantic, importlib-metadata, h11, asyncpg, anyio, starlette, gino, click, uvicorn, gino-starlette, fastapi\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed SQLAlchemy-1.3.24 anyio-3.7.0 asyncpg-0.27.0 click-8.1.3 exceptiongroup-1.1.1 fastapi-0.99.0 gino-1.0.1 gino-starlette-0.1.6 h11-0.14.0 idna-3.4 importlib-metadata-1.7.0 pydantic-1.10.10 sniffio-1.3.0 starlette-0.27.0 typing-extensions-4.7.0 uvicorn-0.22.0 zipp-3.15.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stderr setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | INFO:     Started server process [380]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | INFO:     Waiting for application startup.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Cannot connect to the database; max retries reached.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR:    Traceback (most recent call last):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/starlette/routing.py\", line 677, in lifespan\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     async with self.lifespan_context(app) as maybe_state:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/starlette/routing.py\", line 566, in __aenter__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._router.startup()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/starlette/routing.py\", line 654, in startup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await handler()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino_starlette.py\", line 183, in startup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **config[\"kwargs\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino_starlette.py\", line 226, in set_bind\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await super().set_bind(bind, loop=loop, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino/api.py\", line 417, in set_bind\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     bind = await create_engine(bind, loop=loop, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino/strategies.py\", line 55, in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 465, in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/gino/dialects/asyncpg.py\", line 218, in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 409, in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 437, in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 129, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/pool.py\", line 512, in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connection.py\", line 2110, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 895, in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 888, in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 773, in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 825, in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/compat.py\", line 56, in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpqanlnnb3/.env/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 687, in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py\", line 962, in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py\", line 949, in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py\", line 473, in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py\", line 503, in _sock_connect_cb\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR:    Application startup failed. Exiting.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ------------------------------ Captured log setup ------------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=5, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf242350>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf1a75d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf1a70d0>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf2cbb90>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf2c0090>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | WARNING  urllib3.connectionpool:connectionpool.py:813 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f62cf36d390>: Failed to establish a new connection: [Errno 111] Connection refused')': /\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | __________________ ERROR at setup of test[prod_fastapi_demo] ___________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | virtualenv = <pytest_virtualenv.VirtualEnv object at 0x7f62cf1fa150>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'venv_client' for <Function test[prod_fastapi_demo]>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | pytestconfig = <_pytest.config.Config object at 0x7f62d26fbc50>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         params=[\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_starlette_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"simple_fastapi_demo\", \"requirements.txt\", \"app.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (\"prod_fastapi_demo\", \"pyproject.toml\", \"run.py\"),\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ids=[\"simple_starlette_demo\", \"simple_fastapi_demo\", \"prod_fastapi_demo\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def venv_client(virtualenv, request, pytestconfig):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         demo, install, run = request.param\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent.absolute()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         run_with_coverage = [virtualenv.python, virtualenv.coverage, \"run\", \"-p\"]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         base_path = cwd / \"examples\" / demo\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env = virtualenv.env.copy()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         env.update(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             {\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 k: v\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 for k, v in os.environ.items()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if k.startswith(\"DB_\") or k.startswith(\"APP_\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             }\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         virtualenv.run(\"pip install coverage\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if install == \"requirements.txt\":\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install -r requirements.txt\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"pip install poetry\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\"poetry install\", cwd=base_path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             virtualenv.run(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 run_with_coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 + [\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     \"--source=src,migrations/versions\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     virtualenv.virtualenv / \"bin\" / \"pytest\",\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 ],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cwd=base_path,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               env=env,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:323: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_virtualenv.py:151: in run\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return super(VirtualEnv, self).run(args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <pytest_virtualenv.VirtualEnv object at 0x7f62cf1fa150>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | cmd = ['/tmp/tmpeiadp0rb/.env/bin/python', '/tmp/tmpeiadp0rb/.env/bin/coverage', 'run', '-p', '--source=src,migrations/versions', '/tmp/tmpeiadp0rb/.env/bin/pytest']\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | capture = False, check_rc = True, cd = Path('/tmp/tmpeiadp0rb'), shell = False\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'cwd': PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette/examples/prod_fastapi_demo'), 'env': {'ACT': 'true', 'ACTIONS_CACHE_URL': 'http://130.242.72.40:42993/', 'CI': 'true', 'COV_CORE_CONFIG': ':', ...}}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | p = <subprocess.Popen object at 0x7f62cf2010d0>, out = None, _ = None\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | err = CalledProcessError(1, ['/tmp/tmpeiadp0rb/.env/bin/python', '/tmp/tmpeiadp0rb/.env/bin/coverage', 'run', '-p', '--source=src,migrations/versions', '/tmp/tmpeiadp0rb/.env/bin/pytest'])\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def run(self, cmd, capture=False, check_rc=True, cd=None, shell=False, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Run a command relative to a given directory, defaulting to the workspace root\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         Parameters\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         ----------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cmd : `str` or `list`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Command string or list. Commands given as a string will be run in a subshell.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         capture : `bool`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Capture and return output\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         check_rc : `bool`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Assert return code is zero\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cd : `str`\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             Path to chdir to, defaults to workspace root\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if isinstance(cmd, string_types):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             shell = True\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             # Some of the command components might be path objects or numbers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cmd = [str(i) for i in cmd]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if not cd:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cd = self.workspace\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         with cmdline.chdir(cd):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             log.debug(\"run: {0}\".format(cmd))\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if capture:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 p = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 p = subprocess.Popen(cmd, shell=shell, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             (out, _) = p.communicate()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if out is not None and not isinstance(out, string_types):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 out = out.decode('utf-8')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if self.debug and capture:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 log.debug(\"Stdout/stderr:\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 log.debug(out)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if check_rc and p.returncode != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err = subprocess.CalledProcessError(p.returncode, cmd)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 err.output = out\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 if capture and not self.debug:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     log.error(\"Stdout/stderr:\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     log.error(out)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise err\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               subprocess.CalledProcessError: Command '['/tmp/tmpeiadp0rb/.env/bin/python', '/tmp/tmpeiadp0rb/.env/bin/coverage', 'run', '-p', '--source=src,migrations/versions', '/tmp/tmpeiadp0rb/.env/bin/pytest']' returned non-zero exit status 1.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_shutil/workspace.py:132: CalledProcessError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stdout setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | created virtual environment CPython3.7.11.final.0-64 in 501ms\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   creator CPython3Posix(dest=/tmp/tmpeiadp0rb/.env, clear=False, no_vcs_ignore=False, global=False)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/runneradmin/.local/share/virtualenv)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     added seed packages: pip==22.2.1, setuptools==63.2.0, wheel==0.37.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: coverage\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed coverage-7.2.7\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting poetry\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached poetry-1.5.1-py3-none-any.whl (225 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting requests-toolbelt<2,>=0.9.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting filelock<4.0.0,>=3.8.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached filelock-3.12.2-py3-none-any.whl (10 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting tomli<3.0.0,>=2.0.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pyproject-hooks<2.0.0,>=1.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting installer<0.8.0,>=0.7.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached installer-0.7.0-py3-none-any.whl (453 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting trove-classifiers>=2022.5.19\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached trove_classifiers-2023.5.24-py3-none-any.whl (13 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting cleo<3.0.0,>=2.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached cleo-2.0.1-py3-none-any.whl (77 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting requests<3.0,>=2.18\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached requests-2.31.0-py3-none-any.whl (62 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pkginfo<2.0.0,>=1.9.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting platformdirs<4.0.0,>=3.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting poetry-core==1.6.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached poetry_core-1.6.1-py3-none-any.whl (450 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting jsonschema<5.0.0,>=4.10.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting backports.cached-property<2.0.0,>=1.0.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached backports.cached_property-1.0.2-py3-none-any.whl (6.1 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pexpect<5.0.0,>=4.7.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting shellingham<2.0,>=1.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached shellingham-1.5.0.post1-py2.py3-none-any.whl (9.4 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting dulwich<0.22.0,>=0.21.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached dulwich-0.21.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (508 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting poetry-plugin-export<2.0.0,>=1.4.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached poetry_plugin_export-1.4.0-py3-none-any.whl (10 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting urllib3<2.0.0,>=1.26.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting packaging>=20.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting importlib-metadata>=4.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting cachecontrol[filecache]<0.13.0,>=0.12.9\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached CacheControl-0.12.14-py2.py3-none-any.whl (21 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting keyring<24.0.0,>=23.9.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached keyring-23.13.1-py3-none-any.whl (37 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting crashtest<0.5.0,>=0.4.1\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached crashtest-0.4.1-py3-none-any.whl (7.6 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting virtualenv<21.0.0,>=20.22.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting build<0.11.0,>=0.10.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached build-0.10.0-py3-none-any.whl (17 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting html5lib<2.0,>=1.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached html5lib-1.1-py2.py3-none-any.whl (112 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting lockfile<0.13.0,>=0.12.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached lockfile-0.12.2-py2.py3-none-any.whl (13 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting tomlkit<1.0.0,>=0.11.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting msgpack>=0.5.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached msgpack-1.0.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (299 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting rapidfuzz<3.0.0,>=2.2.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached rapidfuzz-2.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting typing-extensions\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting webencodings\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting six>=1.9\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached six-1.16.0-py2.py3-none-any.whl (11 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting zipp>=0.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pkgutil-resolve-name>=1.3.10\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pkgutil_resolve_name-1.3.10-py3-none-any.whl (4.7 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting attrs>=17.4.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached attrs-23.1.0-py3-none-any.whl (61 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting importlib-resources>=1.4.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting jaraco.classes\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting jeepney>=0.4.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached jeepney-0.8.0-py3-none-any.whl (48 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting SecretStorage>=3.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting ptyprocess>=0.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting charset-normalizer<4,>=2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting idna<4,>=2.5\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached idna-3.4-py3-none-any.whl (61 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting certifi>=2017.4.17\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached certifi-2023.5.7-py3-none-any.whl (156 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting distlib<1,>=0.3.6\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting cryptography>=2.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting more-itertools\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting cffi>=1.12\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached cffi-1.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (427 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Collecting pycparser\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Using cached pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing collected packages: webencodings, trove-classifiers, ptyprocess, msgpack, lockfile, distlib, zipp, urllib3, typing-extensions, tomlkit, tomli, six, shellingham, rapidfuzz, pyrsistent, pycparser, pkgutil-resolve-name, pkginfo, pexpect, packaging, more-itertools, jeepney, installer, idna, filelock, crashtest, charset-normalizer, certifi, backports.cached-property, requests, pyproject-hooks, platformdirs, jaraco.classes, importlib-resources, importlib-metadata, html5lib, dulwich, cleo, cffi, virtualenv, requests-toolbelt, poetry-core, cryptography, cachecontrol, build, attrs, SecretStorage, jsonschema, keyring, poetry-plugin-export, poetry\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Successfully installed SecretStorage-3.3.3 attrs-23.1.0 backports.cached-property-1.0.2 build-0.10.0 cachecontrol-0.12.14 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 cleo-2.0.1 crashtest-0.4.1 cryptography-41.0.1 distlib-0.3.6 dulwich-0.21.5 filelock-3.12.2 html5lib-1.1 idna-3.4 importlib-metadata-6.7.0 importlib-resources-5.12.0 installer-0.7.0 jaraco.classes-3.2.3 jeepney-0.8.0 jsonschema-4.17.3 keyring-23.13.1 lockfile-0.12.2 more-itertools-9.1.0 msgpack-1.0.5 packaging-23.1 pexpect-4.8.0 pkginfo-1.9.6 pkgutil-resolve-name-1.3.10 platformdirs-3.8.0 poetry-1.5.1 poetry-core-1.6.1 poetry-plugin-export-1.4.0 ptyprocess-0.7.0 pycparser-2.21 pyproject-hooks-1.0.0 pyrsistent-0.19.3 rapidfuzz-2.15.1 requests-2.31.0 requests-toolbelt-1.0.0 shellingham-1.5.0.post1 six-1.16.0 tomli-2.0.1 tomlkit-0.11.8 trove-classifiers-2023.5.24 typing-extensions-4.7.0 urllib3-1.26.16 virtualenv-20.23.1 webencodings-0.5.1 zipp-3.15.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing dependencies from lock file\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Package operations: 24 installs, 7 updates, 0 removals\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating idna (3.4 -> 3.3)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing sniffio (1.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating typing-extensions (4.7.0 -> 3.10.0.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating zipp (3.15.0 -> 3.6.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing anyio (3.3.4)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing asyncpg (0.24.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating importlib-metadata (6.7.0 -> 1.7.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing sqlalchemy (1.3.24)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing gino (1.0.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing markupsafe (2.0.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pyparsing (2.4.7)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing starlette (0.16.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing asgiref (3.4.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating attrs (23.1.0 -> 21.2.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing click (8.0.3)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing gino-starlette (0.1.3)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing h11 (0.12.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating importlib-resources (5.12.0 -> 5.4.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing iniconfig (1.1.1)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing mako (1.1.5)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Updating packaging (23.1 -> 21.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pluggy (1.0.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing py (1.11.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pydantic (1.8.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing toml (0.10.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing alembic (1.7.5)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing fastapi (0.70.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing gunicorn (20.1.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing psycopg2 (2.9.2)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing pytest (6.2.5)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   \u2022 Installing uvicorn (0.15.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Installing the current project: gino-fastapi-demo (0.1.0)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ============================= test session starts ==============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | platform linux -- Python 3.7.11, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette/examples/prod_fastapi_demo, configfile: pytest.ini, testpaths: tests\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | plugins: anyio-3.3.4\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | collected 1 item\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/test_users.py E                                                    [100%]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ==================================== ERRORS ====================================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _________________________ ERROR at setup of test_crud __________________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     @pytest.fixture\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def client():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         cwd = Path(__file__).parent.parent\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       subprocess.check_call([\"alembic\", \"upgrade\", \"head\"], cwd=cwd)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:13: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | popenargs = (['alembic', 'upgrade', 'head'],)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | kwargs = {'cwd': PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette/examples/prod_fastapi_demo')}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | retcode = 1, cmd = ['alembic', 'upgrade', 'head']\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def check_call(*popenargs, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"Run command with arguments.  Wait for command to complete.  If\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         the exit code was zero then return, otherwise raise\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         CalledProcessError.  The CalledProcessError object will have the\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         return code in the returncode attribute.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         The arguments are the same as for the call function.  Example:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         check_call([\"ls\", \"-l\"])\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         \"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         retcode = call(*popenargs, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if retcode:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             cmd = kwargs.get(\"args\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if cmd is None:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 cmd = popenargs[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >           raise CalledProcessError(retcode, cmd)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E           subprocess.CalledProcessError: Command '['alembic', 'upgrade', 'head']' returned non-zero exit status 1.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/subprocess.py:363: CalledProcessError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stderr setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR [root] Max retries reached.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Traceback (most recent call last):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2336, in _wrap_pool_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fn()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 304, in unique_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return _ConnectionFairy._checkout(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 778, in _checkout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     fairy = _ConnectionRecord.checkout(pool)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 495, in checkout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     rec = pool._do_get()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/impl.py\", line 241, in _do_get\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return self._create_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 309, in _create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return _ConnectionRecord(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 440, in __init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self.__connect(first_connect_check=True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 661, in __connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 70, in __exit__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     with_traceback=exc_tb,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 182, in raise_\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exception\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 656, in __connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     connection = pool._invoke_creator(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/strategies.py\", line 114, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return dialect.connect(*cargs, **cparams)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 508, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return self.dbapi.connect(*cargs, **cparams)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/psycopg2/__init__.py\", line 122, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | psycopg2.OperationalError: could not connect to server: Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \tTCP/IP connections on port 5432?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | The above exception was the direct cause of the following exception:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Traceback (most recent call last):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/bin/alembic\", line 8, in <module>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     sys.exit(main())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/config.py\", line 588, in main\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     CommandLine(prog=prog).main(argv=argv)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/config.py\", line 582, in main\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self.run_cmd(cfg, options)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/config.py\", line 562, in run_cmd\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **dict((k, getattr(options, k, None)) for k in kwarg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/command.py\", line 320, in upgrade\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     script.run_env()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/script/base.py\", line 563, in run_env\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     util.load_python_file(self.dir, \"env.py\")\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/util/pyfiles.py\", line 92, in load_python_file\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     module = load_module_py(module_id, path)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/alembic/util/pyfiles.py\", line 108, in load_module_py\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     spec.loader.exec_module(module)  # type: ignore\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"migrations/env.py\", line 96, in <module>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     run_migrations_online()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"migrations/env.py\", line 74, in run_migrations_online\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     connection = connectable.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2263, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return self._connection_cls(self, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 104, in __init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     else engine.raw_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2370, in raw_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self.pool.unique_connection, _connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2340, in _wrap_pool_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e, dialect, self\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1584, in _handle_dbapi_exception_noconnection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 182, in raise_\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exception\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 2336, in _wrap_pool_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fn()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 304, in unique_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return _ConnectionFairy._checkout(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 778, in _checkout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     fairy = _ConnectionRecord.checkout(pool)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 495, in checkout\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     rec = pool._do_get()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/impl.py\", line 241, in _do_get\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return self._create_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 309, in _create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return _ConnectionRecord(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 440, in __init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self.__connect(first_connect_check=True)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 661, in __connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py\", line 70, in __exit__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     with_traceback=exc_tb,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/util/compat.py\", line 182, in raise_\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exception\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/pool/base.py\", line 656, in __connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     connection = pool._invoke_creator(self)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/strategies.py\", line 114, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return dialect.connect(*cargs, **cparams)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/sqlalchemy/engine/default.py\", line 508, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return self.dbapi.connect(*cargs, **cparams)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   File \"/tmp/tmpeiadp0rb/.env/lib/python3.7/site-packages/psycopg2/__init__.py\", line 122, in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) could not connect to server: Connection refused\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \tIs the server running on host \"localhost\" (127.0.0.1) and accepting\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \tTCP/IP connections on port 5432?\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | (Background on this error at: http://sqlalche.me/e/13/e3q8)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | =========================== short test summary info ============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_users.py::test_crud - subprocess.CalledProcessError: Command...\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ============================== 1 error in 32.42s ===============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------------------------- Captured stderr setup -----------------------------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] A new release of pip available: 22.2.1 -> 23.1.2\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | [notice] To update, run: pip install --upgrade pip\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ___________________ ERROR at setup of test_index_returns_200 ___________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'app' for <Function test_index_returns_200>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62d00e5290>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62d00e5cb0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:231: in app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     database=DB_ARGS[\"database\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _________________ ERROR at setup of test_index_returns_200_dsn _________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'app_dsn' for <Function test_index_returns_200_dsn>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62cf28ac20>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf2dc3b0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:272: in app_dsn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     async for a in _app(dsn=PG_URL):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ____________________________ ERROR at setup of test ____________________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}, request = <SubRequest 'app' for <Function test>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62cf28a830>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf28d0e0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:231: in app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     database=DB_ARGS[\"database\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | __________________________ ERROR at setup of test_ssl __________________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {'ssl_ctx': <ssl.SSLContext object at 0x7f62cf239830>}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'app_ssl' for <Function test_ssl>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62cf191680>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf1917a0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:265: in app_ssl\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     ssl=ssl_ctx,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | __________________________ ERROR at setup of test_dsn __________________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}, request = <SubRequest 'app_dsn' for <Function test_dsn>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62d00e57a0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf1919e0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:272: in app_dsn\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     async for a in _app(dsn=PG_URL):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ______________________ ERROR at setup of test_app_factory ______________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'app_factory' for <Function test_app_factory>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62cf1650e0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf165cb0>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:244: in app_factory\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     database=DB_ARGS[\"database\"],\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _________________________ ERROR at setup of test_no_db _________________________\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | args = (), kwargs = {}\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | request = <SubRequest 'app_db_delayed' for <Function test_no_db>>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7f62cf84d440>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | finalizer = <function pytest_fixture_setup.<locals>.wrapper.<locals>.finalizer at 0x7f62cf84d050>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def wrapper(*args, **kwargs):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         loop = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.EVENT_LOOP, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request = fixture_stripper.get_and_strip_from(\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             FixtureStripper.REQUEST, kwargs\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         )\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         gen_obj = generator(*args, **kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         async def setup():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return res\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         def finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             \"\"\"Yield again, to finalize.\"\"\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             async def async_finalizer():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 except StopAsyncIteration:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     pass\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 else:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg = \"Async generator fixture didn't stop.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     msg += \"Yield only once.\"\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                     raise ValueError(msg)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             loop.run_until_complete(async_finalizer())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         request.addfinalizer(finalizer)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >       return loop.run_until_complete(setup())\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:142: \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:587: in run_until_complete\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return future.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_asyncio/plugin.py:123: in setup\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     res = await gen_obj.__anext__()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:284: in app_db_delayed\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     db_delayed=True,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | tests/conftest.py:213: in _app\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     e = await gino.create_engine(PG_URL)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/strategies.py:55: in create\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     pool = await dialect.init_pool(u, loop, pool_class=pool_class)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:465: in init_pool\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await pool_class(url, loop, init=self.on_connect(), **self._pool_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/gino/dialects/asyncpg.py:218: in _init\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._pool = await asyncpg.create_pool(**args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:413: in _async__init__\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self._initialize()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:441: in _initialize\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await first_ch.connect()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:133: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     self._con = await self._pool._get_new_connection()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/pool.py:516: in _get_new_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     **self._connect_kwargs)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connection.py:2111: in connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     max_cacheable_statement_size=max_cacheable_statement_size,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:903: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise last_error\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:896: in _connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     record_class=record_class,\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:781: in _connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await __connect_addr(params, timeout, True, *args)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:833: in __connect_addr\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     tr, pr = await compat.wait_for(connector, timeout=timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/compat.py:66: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await asyncio.wait_for(fut, timeout)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/tasks.py:442: in wait_for\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return fut.result()\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/asyncpg/connect_utils.py:695: in _create_ssl_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     host, port)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     raise exceptions[0]\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     await self.sock_connect(sock, address)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     return await fut\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 5432)\")>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | address = ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def _sock_connect_cb(self, fut, sock, address):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         if fut.cancelled():\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             return\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |         try:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |             if err != 0:\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |                 # Jump to any except clause below.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | >               raise OSError(err, f'Connect call failed {address}')\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | =============================== warnings summary ===============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ../../../home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_cov/plugin.py:256\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_cov/plugin.py:256: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_configure_node uses old-style configuration options (marks or attributes).\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Please use the pytest.hookimpl(optionalhook=True) decorator instead\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |    to configure the hooks.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |    See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def pytest_configure_node(self, node):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ../../../home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_cov/plugin.py:265\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/gino-starlette-is8H0KNC-py3.7/lib/python3.7/site-packages/pytest_cov/plugin.py:265: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_testnodedown uses old-style configuration options (marks or attributes).\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |   Please use the pytest.hookimpl(optionalhook=True) decorator instead\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |    to configure the hooks.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |    See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   |     def pytest_testnodedown(self, node, error):\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette/report.xml -\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | Coverage XML written to file coverage.xml\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | \n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | FAIL Required test coverage of 95% not reached. Total coverage: 59.01%\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | =========================== short test summary info ============================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_demo.py::test[simple_starlette_demo] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_demo.py::test[simple_fastapi_demo] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_demo.py::test[prod_fastapi_demo] - subprocess.CalledProcessError: Command '['/tmp/tmpeiadp0rb/.env/bin/python', '/tmp/tmpeiadp0rb/.env/bin/coverage', 'run', '-p', '--source=src,migrations/versions', '/tmp/tmpeiadp0rb/.env/bin/pytest']' returned non-zero exit status 1.\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_index_returns_200 - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_index_returns_200_dsn - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_ssl - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_dsn - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_app_factory - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ERROR tests/test_gino_starlette.py::test_no_db - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 5432)\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   | ================== 2 warnings, 10 errors in 241.98s (0:04:01) ==================\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test]   \u274c  Failure - Main Test with pytest\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] exitcode '1': failure\n[339d553b-c3cd-4457-b212-8cbfc59a87aa/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-gino-gino-starlette/.github/workflows/test-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "339d553b-c3cd-4457-b212-8cbfc59a87aa",
        "build_tool": "pytest",
        "elapsed_time": 463.0121109485626
    }
}