{
    "repository": "fsspec/filesystem_spec",
    "stars": 604,
    "language": "python",
    "size": 2584,
    "clone_url": "https://github.com/fsspec/filesystem_spec.git",
    "timestamp": "2023-06-28T12:51:08.114425Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest",
        "unknown",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_read_block",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_seek_delimiter_endline",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[c:\\\\foo\\\\bar-c:\\\\foo\\\\bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[C:\\\\\\\\foo\\\\bar-C:\\\\\\\\foo\\\\bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[c:/foo/bar-c:/foo/bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[file:///c|\\\\foo\\\\bar-c:\\\\foo\\\\bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[file:///C|/foo/bar-C:/foo/bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_infer_storage_options_c[file:///C:/foo/bar-C:/foo/bar]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_bytes_utils",
                "name": "test_stringify_path",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[None-noop_file]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[zip-unzip]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[bz2-BZ2File]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[gzip-<lambda>]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[lzma-LZMAFile]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[xz-LZMAFile]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_compression",
                "name": "test_files[lz4-open]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_simple",
                "time": 0.146,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_loc",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_fetch_range_with_headers",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_ops[None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_ops[99999]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_ops_blocksize",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_errors",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_files",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_open_glob",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_parquet[pyarrow]",
                "time": 2.618,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_parquet[fastparquet]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "could not import 'fastparquet': No module named 'fastparquet'",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_bag",
                "time": 1.556,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_http",
                "name": "test_read_csv",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_unordered_urlpath_errors",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_sample_delimiter",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_parse_sample_bytes",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_no_sample",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_blocksize_none",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_blocksize_types[5.0]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_blocksize_types[5 B]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_blocksize_float_errs",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_include_path",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_with_urls",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_with_paths",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_block",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_read_bytes_delimited",
                "time": 0.06,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[None-None]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[zip-None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[bz2-None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[gzip-None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[lzma-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[xz-None]",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[lz4-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[None-10]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[zip-10]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[bz2-10]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[gzip-10]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[lzma-10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[xz-10]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_compression[lz4-10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_text_mode[utf-8]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_text_mode[ascii]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[None-rt]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[None-rb]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[zip-rt]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[zip-rb]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[bz2-rt]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[bz2-rb]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[gzip-rt]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[gzip-rb]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[lzma-rt]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[lzma-rb]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[xz-rt]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[xz-rb]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[lz4-rt]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_compression[lz4-rb]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_bad_compression",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_not_found",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_names",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "need --runslow option to run",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_write[compression_opener0]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_open_files_write[compression_opener1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_pickability_of_lazy_files",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_py2_local_bytes",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_local",
                "name": "test_abs_paths",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_get_s3",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_open_files_write",
                "time": 1.762,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes",
                "time": 0.783,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_sample_delimiter",
                "time": 0.464,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_non_existing_glob",
                "time": 0.632,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_blocksize_none",
                "time": 0.501,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_blocksize_on_large_data",
                "time": 2.621,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_block[5]",
                "time": 0.612,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_block[15]",
                "time": 0.642,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_block[45]",
                "time": 0.51,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_block[1500]",
                "time": 0.343,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_delimited[5]",
                "time": 1.244,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_delimited[15]",
                "time": 0.64,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_delimited[45]",
                "time": 0.845,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_read_bytes_delimited[1500]",
                "time": 0.387,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[None-None]",
                "time": 0.952,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[zip-None]",
                "time": 0.627,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[bz2-None]",
                "time": 0.855,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[gzip-None]",
                "time": 0.926,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[lzma-None]",
                "time": 0.212,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[xz-None]",
                "time": 0.807,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[lz4-None]",
                "time": 0.22,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[None-10]",
                "time": 0.833,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[zip-10]",
                "time": 1.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[bz2-10]",
                "time": 0.622,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[gzip-10]",
                "time": 1.123,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[lzma-10]",
                "time": 0.228,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[xz-10]",
                "time": 1.102,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_compression[lz4-10]",
                "time": 0.23,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "compression function not provided",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_open_files[rt]",
                "time": 0.438,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_open_files[rb]",
                "time": 0.763,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_modification_time_read_bytes",
                "time": 1.221,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet[True-pyarrow]",
                "time": 0.749,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet[True-fastparquet]",
                "time": 0.284,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "could not import 'fastparquet': No module named 'fastparquet'",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet[False-pyarrow]",
                "time": 0.994,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet[False-fastparquet]",
                "time": 0.651,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "could not import 'fastparquet': No module named 'fastparquet'",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet_append[pyarrow]",
                "time": 0.668,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet_append[fastparquet]",
                "time": 0.242,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "could not import 'fastparquet': No module named 'fastparquet'",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet_wstoragepars[pyarrow]",
                "time": 1.475,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "dask.bytes.tests.test_s3",
                "name": "test_parquet_wstoragepars[fastparquet]",
                "time": 0.293,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "could not import 'fastparquet': No module named 'fastparquet'",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \ud83d\ude80  Start image=crawlergpt:latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \u2b50 Run Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2705  Success - Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \u2b50 Run Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \ud83e\uddea  Matrix: map[FRIEND:gcsfs]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2705  Success - Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \u2b50 Run Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2705  Success - Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \ud83e\uddea  Matrix: map[PY:3.8]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \u2b50 Run Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \u2b50 Run Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2705  Success - Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \u2b50 Run Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2601  git clone 'https://github.com/pre-commit/action' # ref=main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Checkout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Pre pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Pre pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main actions/checkout@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Main actions/checkout@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main actions/setup-python@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/actions-setup-python@main/ dst=/var/run/act/actions/actions-setup-python@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::group::Install micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::group::Install micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@main/dist/setup/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Modifying RC file \"/tmp/micromamba-S1G4as/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Adding (or replacing) the following in your \"/tmp/micromamba-S1G4as/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::group::Install environment test_env from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-typecheck.yml ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | create env test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-typecheck.yml\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-typecheck.yml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | [warning]Neither 'python-version' nor 'python-version-file' inputs were supplied. Attempting to find '.python-version' file.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | [warning].python-version doesn't exist.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udea7  ::warning::The `python-version` input is not set.  The version of Python currently in `PATH` will be used.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2753 add-matcher /run/act/actions/actions-setup-python@main/.github/python.json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Main actions/setup-python@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::group::Install micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::group::Install micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::group::Install micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Wed%2520Jun%252028%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/pre-commit-action@main/ dst=/var/run/act/actions/pre-commit-action@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/pre-commit-action@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Modifying RC file \"/tmp/micromamba-DPrsDx/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Adding (or replacing) the following in your \"/tmp/micromamba-DPrsDx/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::group::Install environment test_env from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-win.yml ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | create env test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-win.yml\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-win.yml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Modifying RC file \"/tmp/micromamba-1lYF0D/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Adding (or replacing) the following in your \"/tmp/micromamba-1lYF0D/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::group::Install environment test_env from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-py38.yml python=3.8...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | create env test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning \\\"python=3.8\\\" -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-py38.yml\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning python=3.8 -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-py38.yml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Modifying RC file \"/tmp/micromamba-rz7OFA/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Adding (or replacing) the following in your \"/tmp/micromamba-rz7OFA/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::group::Install environment test_env from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-friends.yml ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | create env test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-friends.yml\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-friends.yml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Modifying RC file \"/tmp/micromamba-TZQUTE/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Adding (or replacing) the following in your \"/tmp/micromamba-TZQUTE/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::group::Install environment test_env from /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-downstream.yml ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | create env test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-downstream.yml\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n test_env -y --log-level warning -f /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/environment-downstream.yml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Transaction\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Prefix: /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Updating specs:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |    - mypy=1.3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |    - pyarrow\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |    - python=3.8\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |    - pip\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Package                    Version  Build                Channel          Size\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Install:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + _libgcc_mutex                0.1  conda_forge          conda-forge       3kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + _openmp_mutex                4.5  2_gnu                conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-auth                0.6.28  hccec9ca_5           conda-forge     102kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-cal                 0.5.27  hf85dbcb_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-common              0.8.20  hd590300_0           conda-forge     197kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-compression         0.2.17  h4b87b72_0           conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-event-stream         0.3.0  hc5de78f_6           conda-forge      54kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-http                 0.7.8  h412fb1b_4           conda-forge     193kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-io                 0.13.26  h0d05201_0           conda-forge     154kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-mqtt                0.8.13  ha5d9b87_2           conda-forge     151kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-s3                   0.3.4  h95e21fb_5           conda-forge      81kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-c-sdkutils            0.1.10  h4b87b72_0           conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-checksums             0.1.16  h4b87b72_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-crt-cpp               0.20.2  h5289e1f_9           conda-forge     321kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + aws-sdk-cpp              1.10.57  h8101662_14          conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + bzip2                      1.0.8  h7f98852_4           conda-forge     496kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + c-ares                    1.19.1  hd590300_0           conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + ca-certificates         2023.5.7  hbcca054_0           conda-forge     148kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + gflags                     2.2.2  he1b5a44_1004        conda-forge     117kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + glog                       0.6.0  h6f12383_0           conda-forge     114kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + keyutils                   1.6.1  h166bdaf_0           conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + krb5                      1.20.1  h81ceb04_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + ld_impl_linux-64            2.40  h41732ed_0           conda-forge     705kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libabseil             20230125.2  cxx17_h59595ed_2     conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libarrow                  12.0.1  hc410076_0_cpu       conda-forge      28MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libblas                    3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libbrotlicommon            1.0.9  h166bdaf_9           conda-forge      71kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libbrotlidec               1.0.9  h166bdaf_9           conda-forge      33kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libbrotlienc               1.0.9  h166bdaf_9           conda-forge     265kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libcblas                   3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libcrc32c                  1.1.2  h9c3ff4c_0           conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libcurl                    8.1.2  h409715c_0           conda-forge     373kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libedit             3.1.20191231  he28a2e2_2           conda-forge     124kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libev                       4.33  h516909a_1           conda-forge     106kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libevent                  2.1.12  hf998b51_1           conda-forge     427kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libffi                     3.4.2  h7f98852_5           conda-forge      58kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgcc-ng                 13.1.0  he5830b7_0           conda-forge     776kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgfortran-ng            13.1.0  h69a702a_0           conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgfortran5              13.1.0  h15d22d2_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgomp                   13.1.0  he5830b7_0           conda-forge     419kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgoogle-cloud           2.12.0  hac9eb74_0           conda-forge      45MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libgrpc                   1.54.2  hb20ce57_2           conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + liblapack                  3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libnghttp2                1.52.0  h61bc06f_0           conda-forge     622kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libnsl                     2.0.0  h7f98852_0           conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libnuma                   2.0.16  h0b41bf4_1           conda-forge      41kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libopenblas               0.3.23  pthreads_h80387f5_0  conda-forge       5MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libprotobuf              3.21.12  h3eb15da_0           conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libsqlite                 3.42.0  h2797004_0           conda-forge     829kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libssh2                   1.11.0  h0841786_0           conda-forge     271kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libstdcxx-ng              13.1.0  hfd8a6a1_0           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libthrift                 0.18.1  h8fd135c_2           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libutf8proc                2.8.0  h166bdaf_0           conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libuuid                   2.38.1  h0b41bf4_0           conda-forge      34kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + libzlib                   1.2.13  hd590300_5           conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + lz4-c                      1.9.4  hcb278e6_0           conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + mypy                       1.3.0  py38h01eb140_0       conda-forge      16MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + mypy_extensions            1.0.0  pyha770c72_0         conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + ncurses                      6.4  hcb278e6_0           conda-forge     881kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + numpy                     1.24.4  py38h59b608b_0       conda-forge       7MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + openssl                    3.1.1  hd590300_1           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + orc                        1.8.4  h2f23424_0           conda-forge     919kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + pip                       23.1.2  pyhd8ed1ab_0         conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + psutil                     5.9.5  py38h1de0b5d_0       conda-forge     357kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + pyarrow                   12.0.1  py38h39356d1_0_cpu   conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + python                    3.8.17  he550d4f_0_cpython   conda-forge      25MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + python_abi                   3.8  3_cp38               conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + rdma-core                   28.9  h59595ed_1           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + re2                   2023.03.02  h8c504da_0           conda-forge     201kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + readline                     8.2  h8228510_1           conda-forge     281kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + s2n                       1.3.45  h06160fa_0           conda-forge     368kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + setuptools                68.0.0  pyhd8ed1ab_0         conda-forge     464kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + snappy                    1.1.10  h9fff704_0           conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + tk                        8.6.12  h27826a3_0           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + tomli                      2.0.1  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + typing_extensions          4.6.3  pyha770c72_0         conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + ucx                       1.14.1  hf587318_2           conda-forge      17MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + wheel                     0.40.0  pyhd8ed1ab_0         conda-forge      56kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + xz                         5.2.6  h166bdaf_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + zlib                      1.2.13  hd590300_5           conda-forge      93kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   + zstd                       1.5.2  h3eb15da_6           conda-forge     420kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Summary:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Install: 81 packages\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Total download: 194MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Transaction starting\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main python -m pip install pre-commit\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Transaction\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Prefix: /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Updating specs:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - python=3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - aiohttp\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pip\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - requests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - zstandard\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - python-snappy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - lz4[version='<3.1.3']\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pyftpdlib\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - cloudpickle\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - fastparquet\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pandas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest-asyncio\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest-benchmark\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest-cov\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest-mock\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - pytest-vcr\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - python-libarchive-c\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - py\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - numpy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - nomkl\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |    - tqdm\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Package                 Version  Build                Channel          Size\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Install:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + _libgcc_mutex             0.1  conda_forge          conda-forge       3kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + _openmp_mutex             4.5  2_gnu                conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + aiobotocore             2.5.0  pyhd8ed1ab_0         conda-forge      63kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + aiohttp                 3.8.4  py39hd1e30aa_1       conda-forge     442kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + aioitertools           0.11.0  pyhd8ed1ab_0         conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + aiosignal               1.3.1  pyhd8ed1ab_0         conda-forge      13kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + async-timeout           4.0.2  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + attrs                  23.1.0  pyh71513ae_1         conda-forge      55kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + botocore              1.29.76  pyhd8ed1ab_0         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + brotlipy                0.7.0  py39hb9d737c_1005    conda-forge     351kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + bzip2                   1.0.8  h7f98852_4           conda-forge     496kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + ca-certificates      2023.5.7  hbcca054_0           conda-forge     148kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + certifi              2023.5.7  pyhd8ed1ab_0         conda-forge     152kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + cffi                   1.15.1  py39he91dace_3       conda-forge     235kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + charset-normalizer      3.1.0  pyhd8ed1ab_0         conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + cloudpickle             2.2.1  pyhd8ed1ab_0         conda-forge      28kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + colorama                0.4.6  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + coverage                7.2.7  py39hd1e30aa_0       conda-forge     279kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + cramjam                 2.6.2  py39h4ef89ea_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + cryptography           41.0.1  py39hd4f0224_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + exceptiongroup          1.1.1  pyhd8ed1ab_0         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + fastparquet          2023.4.0  py39h389d5f1_0       conda-forge     445kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + frozenlist              1.3.3  py39hb9d737c_0       conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + fsspec               2023.6.0  pyh1a96a4e_0         conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + icu                      72.1  hcb278e6_0           conda-forge      12MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + idna                      3.4  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + iniconfig               2.0.0  pyhd8ed1ab_0         conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + jmespath                1.0.1  pyhd8ed1ab_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + ld_impl_linux-64         2.40  h41732ed_0           conda-forge     705kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libarchive              3.6.2  h039dbb9_1           conda-forge     844kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libblas                 3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libcblas                3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libffi                  3.4.2  h7f98852_5           conda-forge      58kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libgcc-ng              13.1.0  he5830b7_0           conda-forge     776kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libgfortran-ng         13.1.0  h69a702a_0           conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libgfortran5           13.1.0  h15d22d2_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libgomp                13.1.0  he5830b7_0           conda-forge     419kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libiconv                 1.17  h166bdaf_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + liblapack               3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libnsl                  2.0.0  h7f98852_0           conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libopenblas            0.3.23  pthreads_h80387f5_0  conda-forge       5MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libsqlite              3.42.0  h2797004_0           conda-forge     829kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libstdcxx-ng           13.1.0  hfd8a6a1_0           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libuuid                2.38.1  h0b41bf4_0           conda-forge      34kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libxml2                2.11.4  h0d562d8_0           conda-forge     704kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + libzlib                1.2.13  hd590300_5           conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + lz4                     3.1.2  py39h03635ed_0       conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + lz4-c                   1.9.3  h9c3ff4c_1           conda-forge     184kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + lzo                      2.10  h516909a_1000        conda-forge     321kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + multidict               6.0.4  py39h72bdee0_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + ncurses                   6.4  hcb278e6_0           conda-forge     881kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + nomkl                     1.0  h5ca1d4c_0           conda-forge       4kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + numpy                  1.25.0  py39h6183b62_0       conda-forge       7MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + openssl                 3.1.1  hd590300_1           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + packaging                23.1  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pandas                  2.0.2  py39h40cae4c_0       conda-forge      12MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pip                    23.1.2  pyhd8ed1ab_0         conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pluggy                  1.2.0  pyhd8ed1ab_0         conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + py                     1.11.0  pyh6c4a22f_0         conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + py-cpuinfo              9.0.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pycparser                2.21  pyhd8ed1ab_0         conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pyftpdlib               1.5.7  pyhd8ed1ab_0         conda-forge      99kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pyopenssl              23.2.0  pyhd8ed1ab_1         conda-forge     129kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pysocks                 1.7.1  pyha2e5f31_6         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest                  7.4.0  pyhd8ed1ab_0         conda-forge     244kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest-asyncio         0.21.0  pyhd8ed1ab_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest-benchmark        4.0.0  pyhd8ed1ab_0         conda-forge      40kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest-cov              4.1.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest-mock            3.11.1  pyhd8ed1ab_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytest-vcr              1.0.2  pyh9f0ad1d_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python                 3.9.16  h2782a2a_0_cpython   conda-forge      24MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python-dateutil         2.8.2  pyhd8ed1ab_0         conda-forge     246kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python-libarchive-c       4.0  py39hf3d152e_2       conda-forge      64kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python-snappy           0.6.1  py39he8e2bb5_0       conda-forge      32kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python-tzdata          2023.3  pyhd8ed1ab_0         conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + python_abi                3.9  3_cp39               conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pytz                   2023.3  pyhd8ed1ab_0         conda-forge     187kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + pyyaml                    6.0  py39hb9d737c_5       conda-forge     184kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + readline                  8.2  h8228510_1           conda-forge     281kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + requests               2.31.0  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + s3fs                 2023.6.0  pyhd8ed1ab_0         conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + setuptools             68.0.0  pyhd8ed1ab_0         conda-forge     464kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + six                    1.16.0  pyh6c4a22f_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + snappy                 1.1.10  h9fff704_0           conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + tk                     8.6.12  h27826a3_0           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + toml                   0.10.2  pyhd8ed1ab_0         conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + tomli                   2.0.1  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + tqdm                   4.65.0  pyhd8ed1ab_1         conda-forge      88kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + typing-extensions       4.6.3  hd8ed1ab_0           conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + typing_extensions       4.6.3  pyha770c72_0         conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + tzdata                  2023c  h71feb2d_0           conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + urllib3               1.26.15  pyhd8ed1ab_0         conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + vcrpy                   4.4.0  pyhd8ed1ab_0         conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + wheel                  0.40.0  pyhd8ed1ab_0         conda-forge      56kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + wrapt                  1.15.0  py39h72bdee0_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + xz                      5.2.6  h166bdaf_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + yaml                    0.2.5  h7f98852_2           conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + yarl                    1.9.2  py39hd1e30aa_0       conda-forge      96kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + zstandard              0.19.0  py39h6e5214e_2       conda-forge     394kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   + zstd                    1.5.2  h3eb15da_6           conda-forge     420kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Summary:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Install: 100 packages\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Total download: 98MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Transaction starting\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Transaction\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Prefix: /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Updating specs:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - python=3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-asyncio\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-benchmark\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-cov\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-mock\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-vcr\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pip\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - ujson\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - requests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - decorator\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - pytest-timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - google-auth\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - aiohttp\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - google-auth-oauthlib\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - flake8\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - black\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - google-cloud-core\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - google-api-core\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - google-api-python-client\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - httpretty\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - aiobotocore\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - moto[version='>=4']\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |    - flask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Package                        Version  Build               Channel          Size\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Install:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + _libgcc_mutex                    0.1  conda_forge         conda-forge       3kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + _openmp_mutex                    4.5  2_gnu               conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aiobotocore                    2.5.0  pyhd8ed1ab_0        conda-forge      63kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aiohttp                        3.8.4  py39hd1e30aa_1      conda-forge     442kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aioitertools                  0.11.0  pyhd8ed1ab_0        conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aiosignal                      1.3.1  pyhd8ed1ab_0        conda-forge      13kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + async-timeout                  4.0.2  pyhd8ed1ab_0        conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + attrs                         23.1.0  pyh71513ae_1        conda-forge      55kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aws-sam-translator            1.55.0  pyhd8ed1ab_0        conda-forge     171kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + aws-xray-sdk                  2.12.0  pyhd8ed1ab_0        conda-forge      74kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + bcrypt                         3.2.2  py39hb9d737c_1      conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + black                         23.3.0  py39hf3d152e_1      conda-forge     269kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + blinker                        1.6.2  pyhd8ed1ab_0        conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + boto3                        1.26.76  pyhd8ed1ab_0        conda-forge      77kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + botocore                     1.29.76  pyhd8ed1ab_0        conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + brotlipy                       0.7.0  py39hb9d737c_1005   conda-forge     351kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + bzip2                          1.0.8  h7f98852_4          conda-forge     496kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + c-ares                        1.19.1  hd590300_0          conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + ca-certificates             2023.5.7  hbcca054_0          conda-forge     148kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + cachetools                     5.3.0  pyhd8ed1ab_0        conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + certifi                     2023.5.7  pyhd8ed1ab_0        conda-forge     152kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + cffi                          1.15.1  py39he91dace_3      conda-forge     235kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + cfn-lint                      0.75.1  pyhd8ed1ab_0        conda-forge     918kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + charset-normalizer             3.1.0  pyhd8ed1ab_0        conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + click                          8.1.3  unix_pyhd8ed1ab_2   conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + colorama                       0.4.6  pyhd8ed1ab_0        conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + coverage                       7.2.7  py39hd1e30aa_0      conda-forge     279kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + cryptography                  41.0.1  py39hd4f0224_0      conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + decorator                      5.1.1  pyhd8ed1ab_0        conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + docker-py                      6.1.0  pyhd8ed1ab_0        conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + ecdsa                         0.18.0  pyhd8ed1ab_1        conda-forge     122kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + exceptiongroup                 1.1.1  pyhd8ed1ab_0        conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + flake8                         6.0.0  pyhd8ed1ab_0        conda-forge     109kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + flask                          2.3.2  pyhd8ed1ab_0        conda-forge      80kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + flask_cors                    3.0.10  pyhd3deb0d_0        conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + frozenlist                     1.3.3  py39hb9d737c_0      conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + gmp                            6.2.1  h58526e2_0          conda-forge     826kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + gmpy2                          2.1.2  py39h376b7d2_1      conda-forge     222kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-api-core               2.11.1  pyhd8ed1ab_0        conda-forge      78kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-api-python-client      2.90.0  pyhd8ed1ab_0        conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-auth                   2.21.0  pyh1a96a4e_0        conda-forge     102kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-auth-httplib2           0.1.0  pyhd8ed1ab_1        conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-auth-oauthlib           1.0.0  pyhd8ed1ab_0        conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + google-cloud-core              2.3.2  pyhd8ed1ab_0        conda-forge      28kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + googleapis-common-protos      1.59.1  pyhd8ed1ab_0        conda-forge     120kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + graphql-core                   3.2.3  pyhd8ed1ab_0        conda-forge     367kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + grpcio                        1.55.1  py39h174d805_1      conda-forge     772kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + httplib2                      0.22.0  pyhd8ed1ab_0        conda-forge      95kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + httpretty                      1.1.4  pyhd8ed1ab_0        conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + idna                             3.4  pyhd8ed1ab_0        conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + importlib-metadata             6.7.0  pyha770c72_0        conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + importlib_metadata             6.7.0  hd8ed1ab_0          conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + iniconfig                      2.0.0  pyhd8ed1ab_0        conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + itsdangerous                   2.1.2  pyhd8ed1ab_0        conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jinja2                         3.1.2  pyhd8ed1ab_1        conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jmespath                       1.0.1  pyhd8ed1ab_0        conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jschema-to-python              1.2.3  pyhd8ed1ab_0        conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jsondiff                       2.0.0  pyhd8ed1ab_0        conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jsonpatch                       1.32  pyhd8ed1ab_0        conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jsonpickle                     2.2.0  pyhd8ed1ab_0        conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jsonpointer                      2.0  py_0                conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + jsonschema                     3.2.0  pyhd8ed1ab_3        conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + junit-xml                        1.9  pyh9f0ad1d_0        conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + ld_impl_linux-64                2.40  h41732ed_0          conda-forge     705kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libabseil                 20230125.2  cxx17_h59595ed_2    conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libffi                         3.4.2  h7f98852_5          conda-forge      58kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libgcc-ng                     13.1.0  he5830b7_0          conda-forge     776kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libgomp                       13.1.0  he5830b7_0          conda-forge     419kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libgrpc                       1.55.1  h59456c1_1          conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libnsl                         2.0.0  h7f98852_0          conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libprotobuf                   4.23.2  hd1fb520_5          conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libsodium                     1.0.18  h36c2ea0_1          conda-forge     375kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libsqlite                     3.42.0  h2797004_0          conda-forge     829kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libstdcxx-ng                  13.1.0  hfd8a6a1_0          conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libuuid                       2.38.1  h0b41bf4_0          conda-forge      34kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + libzlib                       1.2.13  hd590300_5          conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + markupsafe                     2.1.3  py39hd1e30aa_0      conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + mccabe                         0.7.0  pyhd8ed1ab_0        conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + moto                          4.1.12  pyhd8ed1ab_0        conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + mpc                            1.3.1  hfe3b2da_0          conda-forge     116kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + mpfr                           4.2.0  hb012696_0          conda-forge     631kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + multidict                      6.0.4  py39h72bdee0_0      conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + mypy_extensions                1.0.0  pyha770c72_0        conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + ncurses                          6.4  hcb278e6_0          conda-forge     881kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + networkx                       2.8.8  pyhd8ed1ab_0        conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + oauthlib                       3.2.2  pyhd8ed1ab_0        conda-forge      92kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + openapi-schema-validator       0.2.3  pyhd8ed1ab_0        conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + openapi-spec-validator         0.4.0  pyhd8ed1ab_1        conda-forge      29kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + openssl                        3.1.1  hd590300_1          conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + packaging                       23.1  pyhd8ed1ab_0        conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + paramiko                       3.2.0  pyhd8ed1ab_0        conda-forge     158kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pathspec                      0.11.1  pyhd8ed1ab_0        conda-forge      38kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pbr                           5.11.1  pyhd8ed1ab_0        conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pip                           23.1.2  pyhd8ed1ab_0        conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + platformdirs                   3.8.0  pyhd8ed1ab_0        conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pluggy                         1.2.0  pyhd8ed1ab_0        conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + protobuf                      4.23.2  py39h45438f2_1      conda-forge     323kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + py-cpuinfo                     9.0.0  pyhd8ed1ab_0        conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyasn1                         0.4.8  py_0                conda-forge      54kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyasn1-modules                 0.2.7  py_0                conda-forge      61kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pycodestyle                   2.10.0  pyhd8ed1ab_0        conda-forge      43kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pycparser                       2.21  pyhd8ed1ab_0        conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyflakes                       3.0.1  pyhd8ed1ab_0        conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyjwt                          2.7.0  pyhd8ed1ab_0        conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pynacl                         1.5.0  py39hb9d737c_2      conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyopenssl                     23.2.0  pyhd8ed1ab_1        conda-forge     129kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyparsing                      3.1.0  pyhd8ed1ab_0        conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyrsistent                    0.19.3  py39h72bdee0_0      conda-forge      99kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pysocks                        1.7.1  pyha2e5f31_6        conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest                         7.4.0  pyhd8ed1ab_0        conda-forge     244kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-asyncio                0.21.0  pyhd8ed1ab_0        conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-benchmark               4.0.0  pyhd8ed1ab_0        conda-forge      40kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-cov                     4.1.0  pyhd8ed1ab_0        conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-mock                   3.11.1  pyhd8ed1ab_0        conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-timeout                 2.1.0  pyhd8ed1ab_0        conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytest-vcr                     1.0.2  pyh9f0ad1d_0        conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + python                        3.9.16  h2782a2a_0_cpython  conda-forge      24MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + python-dateutil                2.8.2  pyhd8ed1ab_0        conda-forge     246kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + python-jose                    3.3.0  pyh6c4a22f_1        conda-forge     116kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + python_abi                       3.9  3_cp39              conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pytz                          2023.3  pyhd8ed1ab_0        conda-forge     187kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyu2f                          0.1.5  pyhd8ed1ab_0        conda-forge      32kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pywin32-on-windows             0.1.0  pyh1179c8e_3        conda-forge       5kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + pyyaml                           6.0  py39hb9d737c_5      conda-forge     184kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + re2                       2023.03.02  h8c504da_0          conda-forge     201kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + readline                         8.2  h8228510_1          conda-forge     281kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + requests                      2.31.0  pyhd8ed1ab_0        conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + requests-oauthlib              1.3.1  pyhd8ed1ab_0        conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + responses                     0.23.1  pyhd8ed1ab_0        conda-forge      48kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + rsa                              4.9  pyhd8ed1ab_0        conda-forge      30kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + s3transfer                     0.6.1  pyhd8ed1ab_0        conda-forge      61kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + sarif-om                       1.0.4  pyhd8ed1ab_0        conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + setuptools                    68.0.0  pyhd8ed1ab_0        conda-forge     464kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + six                           1.16.0  pyh6c4a22f_0        conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + sshpubkeys                     3.3.1  pyhd8ed1ab_0        conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + tk                            8.6.12  h27826a3_0          conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + toml                          0.10.2  pyhd8ed1ab_0        conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + tomli                          2.0.1  pyhd8ed1ab_0        conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + types-pyyaml               6.0.12.10  pyhd8ed1ab_0        conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + typing-extensions              4.6.3  hd8ed1ab_0          conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + typing_extensions              4.6.3  pyha770c72_0        conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + tzdata                         2023c  h71feb2d_0          conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + ujson                          5.7.0  py39h227be39_0      conda-forge      51kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + uritemplate                    4.1.1  pyhd8ed1ab_0        conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + urllib3                      1.26.15  pyhd8ed1ab_0        conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + vcrpy                          4.4.0  pyhd8ed1ab_0        conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + websocket-client               1.6.1  pyhd8ed1ab_0        conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + werkzeug                       2.3.6  pyhd8ed1ab_0        conda-forge     254kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + wheel                         0.40.0  pyhd8ed1ab_0        conda-forge      56kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + wrapt                         1.15.0  py39h72bdee0_0      conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + xmltodict                     0.13.0  pyhd8ed1ab_0        conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + xz                             5.2.6  h166bdaf_0          conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + yaml                           0.2.5  h7f98852_2          conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + yarl                           1.9.2  py39hd1e30aa_0      conda-forge      96kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   + zipp                          3.15.0  pyhd8ed1ab_0        conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Summary:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Install: 155 packages\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Total download: 82MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Transaction starting\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking _libgcc_mutex-0.1-conda_forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking python_abi-3.8-3_cp38\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgfortran5-13.1.0-h15d22d2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgomp-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgfortran-ng-13.1.0-h69a702a_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking _openmp_mutex-4.5-2_gnu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking rdma-core-28.9-h59595ed_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libnuma-2.0.16-h0b41bf4_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking gflags-2.2.2-he1b5a44_1004\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-common-0.8.20-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libbrotlicommon-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libopenblas-0.3.23-pthreads_h80387f5_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libabseil-20230125.2-cxx17_h59595ed_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libev-4.33-h516909a_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking c-ares-1.19.1-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking lz4-c-1.9.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking keyutils-1.6.1-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking openssl-3.1.1-hd590300_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libzlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libffi-3.4.2-h7f98852_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking bzip2-1.0.8-h7f98852_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking ncurses-6.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking nomkl-1.0-h5ca1d4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking tzdata-2023c-h71feb2d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking _libgcc_mutex-0.1-conda_forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python_abi-3.9-3_cp39\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libgfortran5-13.1.0-h15d22d2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libgomp-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libgfortran-ng-13.1.0-h69a702a_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking _openmp_mutex-4.5-2_gnu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking lzo-2.10-h516909a_1000\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking yaml-0.2.5-h7f98852_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking icu-72.1-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libiconv-1.17-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking lz4-c-1.9.3-h9c3ff4c_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking snappy-1.1.10-h9fff704_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libopenblas-0.3.23-pthreads_h80387f5_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking openssl-3.1.1-hd590300_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking ncurses-6.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking _libgcc_mutex-0.1-conda_forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking python_abi-3.9-3_cp39\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libgomp-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking _openmp_mutex-4.5-2_gnu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libsodium-1.0.18-h36c2ea0_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking gmp-6.2.1-h58526e2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking yaml-0.2.5-h7f98852_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libabseil-20230125.2-cxx17_h59595ed_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking openssl-3.1.1-hd590300_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking ncurses-6.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libuuid-2.38.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking xz-5.2.6-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libnsl-2.0.0-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libcrc32c-1.1.2-h9c3ff4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking snappy-1.1.10-h9fff704_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking re2-2023.03.02-h8c504da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libutf8proc-2.8.0-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking ucx-1.14.1-hf587318_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking glog-0.6.0-h6f12383_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-checksums-0.1.16-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-compression-0.2.17-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-sdkutils-0.1.10-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libbrotlienc-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libbrotlidec-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libevent-2.1.12-hf998b51_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking s2n-1.3.45-h06160fa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-cal-0.5.27-hf85dbcb_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libssh2-1.11.0-h0841786_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking zlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking zstd-1.5.2-h3eb15da_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libsqlite-3.42.0-h2797004_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking tk-8.6.12-h27826a3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libnghttp2-1.52.0-h61bc06f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libprotobuf-3.21.12-h3eb15da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libedit-3.1.20191231-he28a2e2_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking readline-8.2-h8228510_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libcblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking liblapack-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libthrift-0.18.1-h8fd135c_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-io-0.13.26-h0d05201_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgrpc-1.54.2-hb20ce57_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking orc-1.8.4-h2f23424_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking krb5-1.20.1-h81ceb04_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking python-3.8.17-he550d4f_0_cpython\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-event-stream-0.3.0-hc5de78f_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-http-0.7.8-h412fb1b_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libcurl-8.1.2-h409715c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-auth-0.6.28-hccec9ca_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-mqtt-0.8.13-ha5d9b87_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libgoogle-cloud-2.12.0-hac9eb74_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting pre-commit\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading pre_commit-3.3.3-py2.py3-none-any.whl (202 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting cfgv>=2.0.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting nodeenv>=0.11.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Requirement already satisfied: pyyaml>=5.1 in /usr/lib/python3/dist-packages (from pre-commit) (5.3.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-c-s3-0.3.4-h95e21fb_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-crt-cpp-0.20.2-h5289e1f_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking aws-sdk-cpp-1.10.57-h8101662_14\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting virtualenv>=20.10.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking libarrow-12.0.1-hc410076_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting identify>=1.0.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Requirement already satisfied: setuptools in /usr/lib/python3/dist-packages (from nodeenv>=0.11.1->pre-commit) (45.2.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libzlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libuuid-2.38.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libffi-3.4.2-h7f98852_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking bzip2-1.0.8-h7f98852_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking xz-5.2.6-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libnsl-2.0.0-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting platformdirs<4,>=3.5.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking readline-8.2-h8228510_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libsqlite-3.42.0-h2797004_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking zstd-1.5.2-h3eb15da_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking tk-8.6.12-h27826a3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting distlib<1,>=0.3.6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libxml2-2.11.4-h0d562d8_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libcblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking liblapack-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Collecting filelock<4,>=3.12\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python-3.9.16-h2782a2a_0_cpython\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Installing collected packages: cfgv, nodeenv, platformdirs, distlib, filelock, virtualenv, identify, pre-commit\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   WARNING: The script nodeenv is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking typing_extensions-4.6.3-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking tomli-2.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking mypy_extensions-1.0.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking psutil-5.9.5-py38h1de0b5d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking numpy-1.24.4-py38h59b608b_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking mypy-1.3.0-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libzlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libuuid-2.38.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libffi-3.4.2-h7f98852_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking bzip2-1.0.8-h7f98852_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking re2-2023.03.02-h8c504da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking c-ares-1.19.1-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking xz-5.2.6-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking libarchive-3.6.2-h039dbb9_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libnsl-2.0.0-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking mpfr-4.2.0-hb012696_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking readline-8.2-h8228510_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libprotobuf-4.23.2-hd1fb520_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libsqlite-3.42.0-h2797004_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking tk-8.6.12-h27826a3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   WARNING: The script virtualenv is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking mpc-1.3.1-hfe3b2da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking libgrpc-1.55.1-h59456c1_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   WARNING: The script identify-cli is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking tzdata-2023c-h71feb2d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking python-3.9.16-h2782a2a_0_cpython\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Linking pyarrow-12.0.1-py38h39356d1_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   WARNING: The script pre-commit is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Successfully installed cfgv-3.3.1 distlib-0.3.6 filelock-3.12.2 identify-2.5.24 nodeenv-1.8.0 platformdirs-3.8.0 pre-commit-3.3.3 virtualenv-20.23.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Transaction\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Prefix: /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Updating specs:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - python=3.8\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pip\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - paramiko\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - requests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - zstandard\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - python-snappy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - aiohttp\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - lz4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - distributed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pyarrow\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - panel\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - notebook\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pygit2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - git\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pyftpdlib\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - cloudpickle\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest-asyncio\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest-benchmark\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest-cov\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest-mock\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - pytest-vcr\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - py\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - fusepy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - fastparquet\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - tomli[version='<',build=2]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - msgpack-python\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - python-libarchive-c\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - numpy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - nomkl\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - jinja2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |    - tqdm\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pysocks-1.7.1-pyha2e5f31_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking attrs-23.1.0-pyh71513ae_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Package                               Version  Build                Channel          Size\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Install:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + _libgcc_mutex                           0.1  conda_forge          conda-forge       3kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + _openmp_mutex                           4.5  2_gnu                conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aiobotocore                           2.5.0  pyhd8ed1ab_0         conda-forge      63kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aiohttp                               3.8.4  py38h01eb140_1       conda-forge     445kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aioitertools                         0.11.0  pyhd8ed1ab_0         conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aiosignal                             1.3.1  pyhd8ed1ab_0         conda-forge      13kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + anyio                                 3.7.0  pyhd8ed1ab_1         conda-forge      97kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + argon2-cffi                          21.3.0  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + argon2-cffi-bindings                 21.2.0  py38h0a891b7_3       conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + asttokens                             2.2.1  pyhd8ed1ab_0         conda-forge      28kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + async-timeout                         4.0.2  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + attrs                                23.1.0  pyh71513ae_1         conda-forge      55kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-auth                           0.6.28  hccec9ca_5           conda-forge     102kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-cal                            0.5.27  hf85dbcb_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-common                         0.8.20  hd590300_0           conda-forge     197kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-compression                    0.2.17  h4b87b72_0           conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-event-stream                    0.3.0  hc5de78f_6           conda-forge      54kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-http                            0.7.8  h412fb1b_4           conda-forge     193kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-io                            0.13.26  h0d05201_0           conda-forge     154kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-mqtt                           0.8.13  ha5d9b87_2           conda-forge     151kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-s3                              0.3.4  h95e21fb_5           conda-forge      81kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-c-sdkutils                       0.1.10  h4b87b72_0           conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-checksums                        0.1.16  h4b87b72_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-crt-cpp                          0.20.2  h5289e1f_9           conda-forge     321kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + aws-sdk-cpp                         1.10.57  h8101662_14          conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + backcall                              0.2.0  pyh9f0ad1d_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + backports                               1.0  pyhd8ed1ab_3         conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + backports.functools_lru_cache         1.6.5  pyhd8ed1ab_0         conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + bcrypt                                3.2.2  py38h0a891b7_1       conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + beautifulsoup4                       4.12.2  pyha770c72_0         conda-forge     115kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + bleach                                6.0.0  pyhd8ed1ab_0         conda-forge     131kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + bokeh                                 3.1.1  pyhd8ed1ab_0         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + botocore                            1.29.76  pyhd8ed1ab_0         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + brotlipy                              0.7.0  py38h0a891b7_1005    conda-forge     351kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + bzip2                                 1.0.8  h7f98852_4           conda-forge     496kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + c-ares                               1.19.1  hd590300_0           conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ca-certificates                    2023.5.7  hbcca054_0           conda-forge     148kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + certifi                            2023.5.7  pyhd8ed1ab_0         conda-forge     152kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + cffi                                 1.15.1  py38h4a40e3a_3       conda-forge     235kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + charset-normalizer                    3.1.0  pyhd8ed1ab_0         conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + click                                 8.1.3  unix_pyhd8ed1ab_2    conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + cloudpickle                           2.2.1  pyhd8ed1ab_0         conda-forge      28kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + colorama                              0.4.6  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + comm                                  0.1.3  pyhd8ed1ab_0         conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + contourpy                             1.1.0  py38h7f3f72f_0       conda-forge     219kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + coverage                              7.2.7  py38h01eb140_0       conda-forge     278kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + cramjam                               2.6.2  py38h0287bc9_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + cryptography                         41.0.1  py38hcdda232_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + curl                                  8.1.2  h409715c_0           conda-forge      91kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + cytoolz                              0.12.0  py38h0a891b7_1       conda-forge     407kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + dask                               2023.5.0  pyhd8ed1ab_0         conda-forge       7kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + dask-core                          2023.5.0  pyhd8ed1ab_0         conda-forge     845kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + debugpy                               1.6.7  py38h8dc9893_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + decorator                             5.1.1  pyhd8ed1ab_0         conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + defusedxml                            0.7.1  pyhd8ed1ab_0         conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + distributed                        2023.5.0  pyhd8ed1ab_0         conda-forge     768kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + entrypoints                             0.4  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + exceptiongroup                        1.1.1  pyhd8ed1ab_0         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + executing                             1.2.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + fastparquet                        2023.4.0  py38h7e4f40d_0       conda-forge     448kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + flit-core                             3.9.0  pyhd8ed1ab_0         conda-forge      49kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + freetype                             2.12.1  hca18f0e_1           conda-forge     626kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + frozenlist                            1.3.3  py38h0a891b7_0       conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + fsspec                             2023.6.0  pyh1a96a4e_0         conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + fusepy                                3.0.1  py_0                 conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + gettext                              0.21.1  h27087fc_0           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + gflags                                2.2.2  he1b5a44_1004        conda-forge     117kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + git                                  2.41.0  pl5321h86e50cf_0     conda-forge      10MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + glog                                  0.6.0  h6f12383_0           conda-forge     114kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + gmp                                   6.2.1  h58526e2_0           conda-forge     826kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + icu                                    72.1  hcb278e6_0           conda-forge      12MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + idna                                    3.4  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + importlib-metadata                    6.7.0  pyha770c72_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + importlib_metadata                    6.7.0  hd8ed1ab_0           conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + importlib_resources                  5.12.0  pyhd8ed1ab_0         conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + iniconfig                             2.0.0  pyhd8ed1ab_0         conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ipykernel                            6.23.3  pyh71e2992_0         conda-forge     114kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ipython                              8.12.2  pyh41d4057_0         conda-forge     582kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ipython_genutils                      0.2.0  py_1                 conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jedi                                 0.18.2  pyhd8ed1ab_0         conda-forge     804kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jinja2                                3.1.2  pyhd8ed1ab_1         conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jmespath                              1.0.1  pyhd8ed1ab_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jsonschema                           4.17.3  pyhd8ed1ab_0         conda-forge      70kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyter_client                        8.3.0  pyhd8ed1ab_0         conda-forge     104kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyter_core                          5.3.0  py38h578d9bd_0       conda-forge      91kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyter_events                        0.6.3  pyhd8ed1ab_0         conda-forge      77kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyter_server                        2.7.0  pyhd8ed1ab_0         conda-forge     315kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyter_server_terminals              0.4.4  pyhd8ed1ab_1         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + jupyterlab_pygments                   0.2.2  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + keyutils                              1.6.1  h166bdaf_0           conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + krb5                                 1.20.1  h81ceb04_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + lcms2                                  2.15  haa2dc70_1           conda-forge     242kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ld_impl_linux-64                       2.40  h41732ed_0           conda-forge     705kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + lerc                                  4.0.0  h27087fc_0           conda-forge     282kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libabseil                        20230125.2  cxx17_h59595ed_2     conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libarchive                            3.6.2  h039dbb9_1           conda-forge     844kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libarrow                             12.0.1  hc410076_0_cpu       conda-forge      28MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libblas                               3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libbrotlicommon                       1.0.9  h166bdaf_9           conda-forge      71kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libbrotlidec                          1.0.9  h166bdaf_9           conda-forge      33kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libbrotlienc                          1.0.9  h166bdaf_9           conda-forge     265kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libcblas                              3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libcrc32c                             1.1.2  h9c3ff4c_0           conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libcurl                               8.1.2  h409715c_0           conda-forge     373kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libdeflate                             1.18  h0b41bf4_0           conda-forge      65kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libedit                        3.1.20191231  he28a2e2_2           conda-forge     124kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libev                                  4.33  h516909a_1           conda-forge     106kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libevent                             2.1.12  hf998b51_1           conda-forge     427kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libexpat                              2.5.0  hcb278e6_1           conda-forge      78kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libffi                                3.4.2  h7f98852_5           conda-forge      58kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgcc-ng                            13.1.0  he5830b7_0           conda-forge     776kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgfortran-ng                       13.1.0  h69a702a_0           conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgfortran5                         13.1.0  h15d22d2_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgit2                               1.6.4  h747ad27_0           conda-forge     845kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgomp                              13.1.0  he5830b7_0           conda-forge     419kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgoogle-cloud                      2.12.0  hac9eb74_0           conda-forge      45MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libgrpc                              1.54.2  hb20ce57_2           conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libiconv                               1.17  h166bdaf_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libjpeg-turbo                       2.1.5.1  h0b41bf4_0           conda-forge     491kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + liblapack                             3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libnghttp2                           1.52.0  h61bc06f_0           conda-forge     622kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libnsl                                2.0.0  h7f98852_0           conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libnuma                              2.0.16  h0b41bf4_1           conda-forge      41kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libopenblas                          0.3.23  pthreads_h80387f5_0  conda-forge       5MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libpng                               1.6.39  h753d276_0           conda-forge     283kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libprotobuf                         3.21.12  h3eb15da_0           conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libsodium                            1.0.18  h36c2ea0_1           conda-forge     375kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libsqlite                            3.42.0  h2797004_0           conda-forge     829kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libssh2                              1.11.0  h0841786_0           conda-forge     271kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libstdcxx-ng                         13.1.0  hfd8a6a1_0           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libthrift                            0.18.1  h8fd135c_2           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libtiff                               4.5.1  h8b53f26_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libutf8proc                           2.8.0  h166bdaf_0           conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libuuid                              2.38.1  h0b41bf4_0           conda-forge      34kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libwebp-base                          1.3.0  h0b41bf4_0           conda-forge     357kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libxcb                                 1.15  h0b41bf4_0           conda-forge     384kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libxml2                              2.11.4  h0d562d8_0           conda-forge     704kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + libzlib                              1.2.13  hd590300_5           conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + linkify-it-py                         2.0.0  pyhd8ed1ab_0         conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + locket                                1.0.0  pyhd8ed1ab_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + lz4                                   4.3.2  py38hd012fdc_0       conda-forge      37kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + lz4-c                                 1.9.4  hcb278e6_0           conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + lzo                                    2.10  h516909a_1000        conda-forge     321kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + markdown                              3.4.3  pyhd8ed1ab_0         conda-forge      71kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + markdown-it-py                        2.2.0  pyhd8ed1ab_0         conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + markupsafe                            2.1.3  py38h01eb140_0       conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + matplotlib-inline                     0.1.6  pyhd8ed1ab_0         conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + mdit-py-plugins                       0.4.0  pyhd8ed1ab_0         conda-forge      41kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + mdurl                                 0.1.0  pyhd8ed1ab_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + mistune                               3.0.0  pyhd8ed1ab_0         conda-forge      66kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + msgpack-python                        1.0.5  py38hfbd4bf9_0       conda-forge      87kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + multidict                             6.0.4  py38h1de0b5d_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbclassic                             1.0.0  pyhb4ecaf3_1         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbclient                              0.8.0  pyhd8ed1ab_0         conda-forge      65kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbconvert                             7.6.0  pyhd8ed1ab_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbconvert-core                        7.6.0  pyhd8ed1ab_0         conda-forge     212kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbconvert-pandoc                      7.6.0  pyhd8ed1ab_0         conda-forge       7kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nbformat                              5.9.0  pyhd8ed1ab_0         conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ncurses                                 6.4  hcb278e6_0           conda-forge     881kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nest-asyncio                          1.5.6  pyhd8ed1ab_0         conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + nomkl                                   1.0  h5ca1d4c_0           conda-forge       4kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + notebook                              6.5.4  pyha770c72_0         conda-forge     306kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + notebook-shim                         0.2.3  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + numpy                                1.24.4  py38h59b608b_0       conda-forge       7MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + openjpeg                              2.5.0  hfec8fc6_2           conda-forge     352kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + openssl                               3.1.1  hd590300_1           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + orc                                   1.8.4  h2f23424_0           conda-forge     919kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + overrides                             7.3.1  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + packaging                              23.1  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pandas                                2.0.2  py38h01efb38_0       conda-forge      12MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pandoc                                3.1.3  h32600fe_0           conda-forge      29MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pandocfilters                         1.5.0  pyhd8ed1ab_0         conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + panel                                 1.1.1  pyhd8ed1ab_0         conda-forge      15MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + param                                1.13.0  pyh1a96a4e_0         conda-forge      80kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + paramiko                              3.2.0  pyhd8ed1ab_0         conda-forge     158kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + parso                                 0.8.3  pyhd8ed1ab_0         conda-forge      71kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + partd                                 1.4.0  pyhd8ed1ab_0         conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pcre2                                 10.40  hc3806b6_0           conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + perl                                 5.32.1  2_h7f98852_perl5     conda-forge      15MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pexpect                               4.8.0  pyh1a96a4e_2         conda-forge      49kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pickleshare                           0.7.5  py_1003              conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pillow                                9.5.0  py38h885162f_1       conda-forge      47MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pip                                  23.1.2  pyhd8ed1ab_0         conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pkgutil-resolve-name                 1.3.10  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + platformdirs                          3.8.0  pyhd8ed1ab_0         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pluggy                                1.2.0  pyhd8ed1ab_0         conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + prometheus_client                    0.17.0  pyhd8ed1ab_0         conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + prompt-toolkit                       3.0.38  pyha770c72_0         conda-forge     269kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + prompt_toolkit                       3.0.38  hd8ed1ab_0           conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + psutil                                5.9.5  py38h1de0b5d_0       conda-forge     357kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pthread-stubs                           0.4  h36c2ea0_1001        conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ptyprocess                            0.7.0  pyhd3deb0d_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pure_eval                             0.2.2  pyhd8ed1ab_0         conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + py                                   1.11.0  pyh6c4a22f_0         conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + py-cpuinfo                            9.0.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyarrow                              12.0.1  py38h39356d1_0_cpu   conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pycparser                              2.21  pyhd8ed1ab_0         conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyftpdlib                             1.5.7  pyhd8ed1ab_0         conda-forge      99kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pygit2                               1.12.2  py38h01eb140_0       conda-forge     218kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pygments                             2.15.1  pyhd8ed1ab_0         conda-forge     841kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pynacl                                1.5.0  py38h0a891b7_2       conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyopenssl                            23.2.0  pyhd8ed1ab_1         conda-forge     129kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyrsistent                           0.19.3  py38h1de0b5d_0       conda-forge      99kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pysocks                               1.7.1  pyha2e5f31_6         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest                                7.4.0  pyhd8ed1ab_0         conda-forge     244kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest-asyncio                       0.21.0  pyhd8ed1ab_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest-benchmark                      4.0.0  pyhd8ed1ab_0         conda-forge      40kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest-cov                            4.1.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest-mock                          3.11.1  pyhd8ed1ab_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytest-vcr                            1.0.2  pyh9f0ad1d_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python                               3.8.17  he550d4f_0_cpython   conda-forge      25MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-dateutil                       2.8.2  pyhd8ed1ab_0         conda-forge     246kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-fastjsonschema                2.17.1  pyhd8ed1ab_0         conda-forge     226kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-json-logger                    2.0.7  pyhd8ed1ab_0         conda-forge      13kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-libarchive-c                     4.0  py38h578d9bd_2       conda-forge      64kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-snappy                         0.6.1  py38h1ddbb56_0       conda-forge      32kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python-tzdata                        2023.3  pyhd8ed1ab_0         conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + python_abi                              3.8  3_cp38               conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pytz                                 2023.3  pyhd8ed1ab_0         conda-forge     187kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyviz_comms                           2.3.2  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyyaml                                  6.0  py38h0a891b7_5       conda-forge     187kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + pyzmq                                25.1.0  py38h509eb50_0       conda-forge     452kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + rdma-core                              28.9  h59595ed_1           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + re2                              2023.03.02  h8c504da_0           conda-forge     201kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + readline                                8.2  h8228510_1           conda-forge     281kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + requests                             2.31.0  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + rfc3339-validator                     0.1.4  pyhd8ed1ab_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + rfc3986-validator                     0.1.1  pyh9f0ad1d_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + s2n                                  1.3.45  h06160fa_0           conda-forge     368kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + s3fs                               2023.6.0  pyhd8ed1ab_0         conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + send2trash                            1.8.2  pyh41d4057_0         conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + setuptools                           68.0.0  pyhd8ed1ab_0         conda-forge     464kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + six                                  1.16.0  pyh6c4a22f_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + snappy                               1.1.10  h9fff704_0           conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + sniffio                               1.3.0  pyhd8ed1ab_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + sortedcontainers                      2.4.0  pyhd8ed1ab_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + soupsieve                       2.3.2.post1  pyhd8ed1ab_0         conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + stack_data                            0.6.2  pyhd8ed1ab_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tblib                                 1.7.0  pyhd8ed1ab_0         conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + terminado                            0.17.1  pyh41d4057_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tinycss2                              1.2.1  pyhd8ed1ab_0         conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tk                                   8.6.12  h27826a3_0           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + toml                                 0.10.2  pyhd8ed1ab_0         conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tomli                                 1.2.2  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + toolz                                0.12.0  pyhd8ed1ab_0         conda-forge      49kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tornado                               6.3.2  py38h01eb140_0       conda-forge     627kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + tqdm                                 4.65.0  pyhd8ed1ab_1         conda-forge      88kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + traitlets                             5.9.0  pyhd8ed1ab_0         conda-forge      98kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + typing-extensions                     4.6.3  hd8ed1ab_0           conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + typing_extensions                     4.6.3  pyha770c72_0         conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + typing_utils                          0.1.0  pyhd8ed1ab_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + uc-micro-py                           1.0.1  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + ucx                                  1.14.1  hf587318_2           conda-forge      17MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + urllib3                             1.26.15  pyhd8ed1ab_0         conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + vcrpy                                 4.4.0  pyhd8ed1ab_0         conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + wcwidth                               0.2.6  pyhd8ed1ab_0         conda-forge      29kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + webencodings                          0.5.1  py_1                 conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + websocket-client                      1.6.1  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + wheel                                0.40.0  pyhd8ed1ab_0         conda-forge      56kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + wrapt                                1.15.0  py38h1de0b5d_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + xorg-libxau                          1.0.11  hd590300_0           conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + xorg-libxdmcp                         1.1.3  h7f98852_0           conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + xyzservices                        2023.5.0  pyhd8ed1ab_1         conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + xz                                    5.2.6  h166bdaf_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + yaml                                  0.2.5  h7f98852_2           conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + yarl                                  1.9.2  py38h01eb140_0       conda-forge      97kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zeromq                                4.3.4  h9c3ff4c_1           conda-forge     360kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zict                                  3.0.0  pyhd8ed1ab_0         conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zipp                                 3.15.0  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zlib                                 1.2.13  hd590300_5           conda-forge      93kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zstandard                            0.19.0  py38ha98ab4e_2       conda-forge     394kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   + zstd                                  1.5.2  h3eb15da_6           conda-forge     420kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Summary:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Install: 272 packages\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Total download: 374MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Transaction starting\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytz-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Main python -m pip install pre-commit\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python-tzdata-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Transaction finished\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | To activate this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     micromamba activate test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Or to execute a single command in this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     micromamba run -n test_env mycommand\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Installing pip packages: types-paramiko, types-requests, types-tqdm, types-ujson\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking py-cpuinfo-9.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking six-1.16.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking jmespath-1.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking tomli-2.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking iniconfig-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking exceptiongroup-1.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pluggy-1.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking packaging-23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking typing_extensions-4.6.3-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking toml-0.10.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking charset-normalizer-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking idna-3.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking certifi-2023.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking colorama-0.4.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking fsspec-2023.6.0-pyh1a96a4e_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking py-1.11.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking cloudpickle-2.2.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python-dateutil-2.8.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking typing-extensions-4.6.3-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking aioitertools-0.11.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking tqdm-4.65.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-7.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking async-timeout-4.0.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main python -m pip freeze --local\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-mock-3.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-benchmark-4.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-asyncio-0.21.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pyyaml-6.0-py39hb9d737c_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking multidict-6.0.4-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking frozenlist-1.3.3-py39hb9d737c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking cramjam-2.6.2-py39h4ef89ea_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking wrapt-1.15.0-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking numpy-1.25.0-py39h6183b62_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-1.sh] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking types-pyyaml-6.0.12.10-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python-libarchive-c-4.0-py39hf3d152e_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jsonpointer-2.0-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking lz4-3.1.2-py39h03635ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyjwt-2.7.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking python-snappy-0.6.1-py39he8e2bb5_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyasn1-0.4.8-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking cffi-1.15.1-py39he91dace_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pywin32-on-windows-0.1.0-pyh1179c8e_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking websocket-client-1.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking coverage-7.2.7-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyflakes-3.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking uritemplate-4.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking cachetools-5.3.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking zipp-3.15.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyparsing-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking yarl-1.9.2-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jsondiff-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pandas-2.0.2-py39h40cae4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking xmltodict-0.13.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytz-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pysocks-1.7.1-pyha2e5f31_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pathspec-0.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking mypy_extensions-1.0.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking click-8.1.3-unix_pyhd8ed1ab_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking py-cpuinfo-9.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pbr-5.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking attrs-23.1.0-pyh71513ae_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking six-1.16.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jmespath-1.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking networkx-2.8.8-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking tomli-2.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking iniconfig-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking exceptiongroup-1.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pluggy-1.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking packaging-23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking colorama-0.4.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking typing_extensions-4.6.3-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking toml-0.10.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking charset-normalizer-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking idna-3.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking certifi-2023.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking blinker-1.6.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking itsdangerous-2.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pycodestyle-2.10.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking mccabe-0.7.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking decorator-5.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jsonpatch-1.32-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyasn1-modules-0.2.7-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking rsa-4.9-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking importlib-metadata-6.7.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking httplib2-0.22.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking sarif-om-1.0.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking python-dateutil-2.8.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking junit-xml-1.9-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking httpretty-1.1.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyu2f-0.1.5-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-7.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking graphql-core-3.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking typing-extensions-4.6.3-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aioitertools-0.11.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking flake8-6.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking importlib_metadata-6.7.0-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-timeout-2.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-mock-3.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-benchmark-4.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-asyncio-0.21.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking async-timeout-4.0.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking platformdirs-3.8.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jsonpickle-2.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jschema-to-python-1.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking gmpy2-2.1.2-py39h376b7d2_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking markupsafe-2.1.3-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking protobuf-4.23.2-py39h45438f2_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking multidict-6.0.4-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking frozenlist-1.3.3-py39hb9d737c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking grpcio-1.55.1-py39h174d805_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyrsistent-0.19.3-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking wrapt-1.15.0-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyyaml-6.0-py39hb9d737c_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking ujson-5.7.0-py39h227be39_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking cffi-1.15.1-py39he91dace_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking coverage-7.2.7-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking black-23.3.0-py39hf3d152e_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking yarl-1.9.2-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pynacl-1.5.0-py39hb9d737c_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking bcrypt-3.2.2-py39hb9d737c_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking cryptography-41.0.1-py39hd4f0224_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking cryptography-41.0.1-py39hd4f0224_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking brotlipy-0.7.0-py39hb9d737c_1005\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking ecdsa-0.18.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jinja2-3.1.2-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking werkzeug-2.3.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking brotlipy-0.7.0-py39hb9d737c_1005\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking googleapis-common-protos-1.59.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking zstandard-0.19.0-py39h6e5214e_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking fastparquet-2023.4.0-py39h389d5f1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking aiosignal-1.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-cov-4.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aiosignal-1.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking vcrpy-4.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking jsonschema-3.2.0-pyhd8ed1ab_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pyopenssl-23.2.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-cov-4.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pytest-vcr-1.0.2-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking vcrpy-4.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking oauthlib-3.2.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking pyftpdlib-1.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking botocore-1.29.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting types-paramiko (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 1))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking paramiko-3.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pyopenssl-23.2.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking sshpubkeys-3.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking python-jose-3.3.0-pyh6c4a22f_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking flask-2.3.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking openapi-schema-validator-0.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking pytest-vcr-1.0.2-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading types_paramiko-3.2.0.0-py3-none-any.whl (33 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking flask_cors-3.0.10-pyhd3deb0d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking openapi-spec-validator-0.4.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking botocore-1.29.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting types-requests (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 2))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading types_requests-2.31.0.1-py3-none-any.whl (14 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting types-tqdm (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 3))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading types_tqdm-4.65.0.1-py3-none-any.whl (18 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking requests-2.31.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking aiohttp-3.8.4-py39hd1e30aa_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking aiobotocore-2.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Linking s3fs-2023.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting types-ujson (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 4))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading types_ujson-5.8.0.0-py3-none-any.whl (2.3 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Transaction finished\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | To activate this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     micromamba activate test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Or to execute a single command in this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     micromamba run -n test_env mycommand\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking requests-2.31.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking s3transfer-0.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aws-xray-sdk-2.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking requests-oauthlib-1.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking responses-0.23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking docker-py-6.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking boto3-1.26.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | --- Contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | set -eo pipefail; micromamba activate test_env;\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | --- End contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aws-sam-translator-1.55.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking cfn-lint-0.75.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking moto-4.1.12-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aiohttp-3.8.4-py39hd1e30aa_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking aiobotocore-2.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-auth-2.21.0-pyh1a96a4e_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-auth-httplib2-0.1.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-api-core-2.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-auth-oauthlib-1.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-api-python-client-2.90.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Linking google-cloud-core-2.3.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting cryptography>=37.0.0 (from types-paramiko->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 1))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | {\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"channels\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/test_env\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"environment\": \"test_env (active)\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"libmamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"micromamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"platform\": \"linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"populated config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"/home/runneradmin/.condarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"user config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"/home/runneradmin/.mambarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     \"virtual packages\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"__unix=0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"__linux=5.4.0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"__glibc=2.31=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         \"__archspec=1=x86_64\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     ]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | }\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::group::Environment info\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.3/4.3 MB 18.2 MB/s eta 0:00:00\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting types-urllib3 (from types-requests->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 2))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading types_urllib3-1.26.25.13-py3-none-any.whl (15 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |             environment : test_env (active)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |            env location : /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       user config files : /home/runneradmin/.mambarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |  populated config files : /home/runneradmin/.condarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |        libmamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |      micromamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |        virtual packages : __unix=0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                           __linux=5.4.0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                           __glibc=2.31=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                           __archspec=1=x86_64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                           https://conda.anaconda.org/conda-forge/noarch\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |        base environment : /home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |                platform : linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting cffi>=1.12 (from cryptography>=37.0.0->types-paramiko->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 1))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 442.7/442.7 kB 12.2 MB/s eta 0:00:00\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/test_env\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Name                 Version   Build                Channel    \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   _libgcc_mutex        0.1       conda_forge          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   _openmp_mutex        4.5       2_gnu                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   aiobotocore          2.5.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   aiohttp              3.8.4     py39hd1e30aa_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   aioitertools         0.11.0    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   aiosignal            1.3.1     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   async-timeout        4.0.2     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   attrs                23.1.0    pyh71513ae_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   botocore             1.29.76   pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   brotlipy             0.7.0     py39hb9d737c_1005    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   bzip2                1.0.8     h7f98852_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   ca-certificates      2023.5.7  hbcca054_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   certifi              2023.5.7  pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   cffi                 1.15.1    py39he91dace_3       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   charset-normalizer   3.1.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   cloudpickle          2.2.1     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   colorama             0.4.6     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   coverage             7.2.7     py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   cramjam              2.6.2     py39h4ef89ea_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   cryptography         41.0.1    py39hd4f0224_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   exceptiongroup       1.1.1     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   fastparquet          2023.4.0  py39h389d5f1_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   frozenlist           1.3.3     py39hb9d737c_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   fsspec               2023.6.0  pyh1a96a4e_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   icu                  72.1      hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   idna                 3.4       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   iniconfig            2.0.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   jmespath             1.0.1     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   ld_impl_linux-64     2.40      h41732ed_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libarchive           3.6.2     h039dbb9_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libblas              3.9.0     17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libcblas             3.9.0     17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libffi               3.4.2     h7f98852_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libgcc-ng            13.1.0    he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libgfortran-ng       13.1.0    h69a702a_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libgfortran5         13.1.0    h15d22d2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libgomp              13.1.0    he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libiconv             1.17      h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   liblapack            3.9.0     17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libnsl               2.0.0     h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libopenblas          0.3.23    pthreads_h80387f5_0  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libsqlite            3.42.0    h2797004_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libstdcxx-ng         13.1.0    hfd8a6a1_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libuuid              2.38.1    h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libxml2              2.11.4    h0d562d8_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   libzlib              1.2.13    hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   lz4                  3.1.2     py39h03635ed_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   lz4-c                1.9.3     h9c3ff4c_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   lzo                  2.10      h516909a_1000        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   multidict            6.0.4     py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   ncurses              6.4       hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   nomkl                1.0       h5ca1d4c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   numpy                1.25.0    py39h6183b62_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   openssl              3.1.1     hd590300_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   packaging            23.1      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pandas               2.0.2     py39h40cae4c_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pip                  23.1.2    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pluggy               1.2.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   py                   1.11.0    pyh6c4a22f_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   py-cpuinfo           9.0.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pycparser            2.21      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pyftpdlib            1.5.7     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pyopenssl            23.2.0    pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pysocks              1.7.1     pyha2e5f31_6         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest               7.4.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest-asyncio       0.21.0    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest-benchmark     4.0.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest-cov           4.1.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest-mock          3.11.1    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytest-vcr           1.0.2     pyh9f0ad1d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python               3.9.16    h2782a2a_0_cpython   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python-dateutil      2.8.2     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python-libarchive-c  4.0       py39hf3d152e_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python-snappy        0.6.1     py39he8e2bb5_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python-tzdata        2023.3    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   python_abi           3.9       3_cp39               conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pytz                 2023.3    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   pyyaml               6.0       py39hb9d737c_5       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   readline             8.2       h8228510_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   requests             2.31.0    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   s3fs                 2023.6.0  pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   setuptools           68.0.0    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   six                  1.16.0    pyh6c4a22f_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   snappy               1.1.10    h9fff704_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   tk                   8.6.12    h27826a3_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   toml                 0.10.2    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   tomli                2.0.1     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   tqdm                 4.65.0    pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   typing-extensions    4.6.3     hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   typing_extensions    4.6.3     pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   tzdata               2023c     h71feb2d_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   urllib3              1.26.15   pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   vcrpy                4.4.0     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   wheel                0.40.0    pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   wrapt                1.15.0    py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   xz                   5.2.6     h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   yaml                 0.2.5     h7f98852_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   yarl                 1.9.2     py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   zstandard            0.19.0    py39h6e5214e_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   zstd                 1.5.2     h3eb15da_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Collecting pycparser (from cffi>=1.12->cryptography>=37.0.0->types-paramiko->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafaa990Vt1Gn (line 1))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2705  Success - Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 2.0 MB/s eta 0:00:00\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Transaction finished\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | To activate this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     micromamba activate test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Or to execute a single command in this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     micromamba run -n test_env mycommand\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | --- Contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | set -eo pipefail; micromamba activate test_env;\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | --- End contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Installing collected packages: types-urllib3, types-ujson, types-tqdm, types-requests, pycparser, cffi, cryptography, types-paramiko\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \u2b50 Run Main Run Tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | {\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"channels\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/test_env\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"environment\": \"test_env (active)\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"libmamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"micromamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"platform\": \"linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"populated config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"/home/runneradmin/.condarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"user config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"/home/runneradmin/.mambarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \"virtual packages\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"__unix=0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"__linux=5.4.0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"__glibc=2.31=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"__archspec=1=x86_64\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     ]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | }\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::group::Environment info\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             environment : test_env (active)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |            env location : /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |       user config files : /home/runneradmin/.mambarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |  populated config files : /home/runneradmin/.condarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |        libmamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |      micromamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |        virtual packages : __unix=0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                           __linux=5.4.0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                           __glibc=2.31=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                           __archspec=1=x86_64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                           https://conda.anaconda.org/conda-forge/noarch\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |        base environment : /home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                platform : linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Successfully installed cffi-1.15.1 cryptography-41.0.1 pycparser-2.21 types-paramiko-3.2.0.0 types-requests-2.31.0.1 types-tqdm-4.65.0.1 types-ujson-5.8.0.0 types-urllib3-1.26.25.13\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/test_env\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Name                      Version     Build               Channel    \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   _libgcc_mutex             0.1         conda_forge         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   _openmp_mutex             4.5         2_gnu               conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aiobotocore               2.5.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aiohttp                   3.8.4       py39hd1e30aa_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aioitertools              0.11.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aiosignal                 1.3.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   async-timeout             4.0.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   attrs                     23.1.0      pyh71513ae_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aws-sam-translator        1.55.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   aws-xray-sdk              2.12.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   bcrypt                    3.2.2       py39hb9d737c_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   black                     23.3.0      py39hf3d152e_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   blinker                   1.6.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   boto3                     1.26.76     pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   botocore                  1.29.76     pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   brotlipy                  0.7.0       py39hb9d737c_1005   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   bzip2                     1.0.8       h7f98852_4          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   c-ares                    1.19.1      hd590300_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   ca-certificates           2023.5.7    hbcca054_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   cachetools                5.3.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   certifi                   2023.5.7    pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   cffi                      1.15.1      py39he91dace_3      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   cfn-lint                  0.75.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   charset-normalizer        3.1.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   click                     8.1.3       unix_pyhd8ed1ab_2   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   colorama                  0.4.6       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   coverage                  7.2.7       py39hd1e30aa_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   cryptography              41.0.1      py39hd4f0224_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   decorator                 5.1.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   docker-py                 6.1.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   ecdsa                     0.18.0      pyhd8ed1ab_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   exceptiongroup            1.1.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   flake8                    6.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   flask                     2.3.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   flask_cors                3.0.10      pyhd3deb0d_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   frozenlist                1.3.3       py39hb9d737c_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   gmp                       6.2.1       h58526e2_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   gmpy2                     2.1.2       py39h376b7d2_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-api-core           2.11.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-api-python-client  2.90.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-auth               2.21.0      pyh1a96a4e_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-auth-httplib2      0.1.0       pyhd8ed1ab_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-auth-oauthlib      1.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   google-cloud-core         2.3.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   googleapis-common-protos  1.59.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   graphql-core              3.2.3       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   grpcio                    1.55.1      py39h174d805_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   httplib2                  0.22.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   httpretty                 1.1.4       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   idna                      3.4         pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   importlib-metadata        6.7.0       pyha770c72_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   importlib_metadata        6.7.0       hd8ed1ab_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   iniconfig                 2.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   itsdangerous              2.1.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jinja2                    3.1.2       pyhd8ed1ab_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jmespath                  1.0.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jschema-to-python         1.2.3       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jsondiff                  2.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jsonpatch                 1.32        pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jsonpickle                2.2.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jsonpointer               2.0         py_0                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   jsonschema                3.2.0       pyhd8ed1ab_3        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   junit-xml                 1.9         pyh9f0ad1d_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   ld_impl_linux-64          2.40        h41732ed_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libabseil                 20230125.2  cxx17_h59595ed_2    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libffi                    3.4.2       h7f98852_5          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libgcc-ng                 13.1.0      he5830b7_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libgomp                   13.1.0      he5830b7_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libgrpc                   1.55.1      h59456c1_1          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libnsl                    2.0.0       h7f98852_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libprotobuf               4.23.2      hd1fb520_5          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libsodium                 1.0.18      h36c2ea0_1          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libsqlite                 3.42.0      h2797004_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libstdcxx-ng              13.1.0      hfd8a6a1_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libuuid                   2.38.1      h0b41bf4_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   libzlib                   1.2.13      hd590300_5          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   markupsafe                2.1.3       py39hd1e30aa_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   mccabe                    0.7.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   moto                      4.1.12      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   mpc                       1.3.1       hfe3b2da_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   mpfr                      4.2.0       hb012696_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   multidict                 6.0.4       py39h72bdee0_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   mypy_extensions           1.0.0       pyha770c72_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   ncurses                   6.4         hcb278e6_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   networkx                  2.8.8       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   oauthlib                  3.2.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   openapi-schema-validator  0.2.3       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   openapi-spec-validator    0.4.0       pyhd8ed1ab_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   openssl                   3.1.1       hd590300_1          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   packaging                 23.1        pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   paramiko                  3.2.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pathspec                  0.11.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pbr                       5.11.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pip                       23.1.2      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   platformdirs              3.8.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pluggy                    1.2.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   protobuf                  4.23.2      py39h45438f2_1      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   py-cpuinfo                9.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyasn1                    0.4.8       py_0                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyasn1-modules            0.2.7       py_0                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pycodestyle               2.10.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pycparser                 2.21        pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyflakes                  3.0.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyjwt                     2.7.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pynacl                    1.5.0       py39hb9d737c_2      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyopenssl                 23.2.0      pyhd8ed1ab_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyparsing                 3.1.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyrsistent                0.19.3      py39h72bdee0_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pysocks                   1.7.1       pyha2e5f31_6        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest                    7.4.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-asyncio            0.21.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-benchmark          4.0.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-cov                4.1.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-mock               3.11.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-timeout            2.1.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytest-vcr                1.0.2       pyh9f0ad1d_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   python                    3.9.16      h2782a2a_0_cpython  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   python-dateutil           2.8.2       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   python-jose               3.3.0       pyh6c4a22f_1        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   python_abi                3.9         3_cp39              conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pytz                      2023.3      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyu2f                     0.1.5       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pywin32-on-windows        0.1.0       pyh1179c8e_3        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   pyyaml                    6.0         py39hb9d737c_5      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   re2                       2023.03.02  h8c504da_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   readline                  8.2         h8228510_1          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   requests                  2.31.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   requests-oauthlib         1.3.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   responses                 0.23.1      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   rsa                       4.9         pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   s3transfer                0.6.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   sarif-om                  1.0.4       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   setuptools                68.0.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   six                       1.16.0      pyh6c4a22f_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   sshpubkeys                3.3.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   tk                        8.6.12      h27826a3_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   toml                      0.10.2      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   tomli                     2.0.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   types-pyyaml              6.0.12.10   pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   typing-extensions         4.6.3       hd8ed1ab_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   typing_extensions         4.6.3       pyha770c72_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   tzdata                    2023c       h71feb2d_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   ujson                     5.7.0       py39h227be39_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   uritemplate               4.1.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   urllib3                   1.26.15     pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   vcrpy                     4.4.0       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   websocket-client          1.6.1       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   werkzeug                  2.3.6       pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   wheel                     0.40.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   wrapt                     1.15.0      py39h72bdee0_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   xmltodict                 0.13.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   xz                        5.2.6       h166bdaf_0          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   yaml                      0.2.5       h7f98852_2          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   yarl                      1.9.2       py39hd1e30aa_0      conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   zipp                      3.15.0      pyhd8ed1ab_0        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2705  Success - Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | --- Contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | set -eo pipefail; micromamba activate test_env;\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | --- End contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Main Clone\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | {\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"channels\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/test_env\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"environment\": \"test_env (active)\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"libmamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"micromamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"platform\": \"linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"populated config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"/home/runneradmin/.condarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"user config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"/home/runneradmin/.mambarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     \"virtual packages\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"__unix=0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"__linux=5.4.0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"__glibc=2.31=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         \"__archspec=1=x86_64\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |     ]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | }\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::group::Environment info\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |             environment : test_env (active)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |            env location : /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |       user config files : /home/runneradmin/.mambarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |  populated config files : /home/runneradmin/.condarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |        libmamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |      micromamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |        virtual packages : __unix=0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                           __linux=5.4.0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                           __glibc=2.31=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                           __archspec=1=x86_64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                           https://conda.anaconda.org/conda-forge/noarch\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |        base environment : /home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |                platform : linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/test_env\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   Name                Version       Build                Channel    \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   _libgcc_mutex       0.1           conda_forge          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   _openmp_mutex       4.5           2_gnu                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-auth          0.6.28        hccec9ca_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-cal           0.5.27        hf85dbcb_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-common        0.8.20        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-compression   0.2.17        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-event-stream  0.3.0         hc5de78f_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-http          0.7.8         h412fb1b_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-io            0.13.26       h0d05201_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-mqtt          0.8.13        ha5d9b87_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-s3            0.3.4         h95e21fb_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-c-sdkutils      0.1.10        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-checksums       0.1.16        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-crt-cpp         0.20.2        h5289e1f_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   aws-sdk-cpp         1.10.57       h8101662_14          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   bzip2               1.0.8         h7f98852_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   c-ares              1.19.1        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   ca-certificates     2023.5.7      hbcca054_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   gflags              2.2.2         he1b5a44_1004        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   glog                0.6.0         h6f12383_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   keyutils            1.6.1         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   krb5                1.20.1        h81ceb04_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   ld_impl_linux-64    2.40          h41732ed_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libabseil           20230125.2    cxx17_h59595ed_2     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libarrow            12.0.1        hc410076_0_cpu       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libblas             3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libbrotlicommon     1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libbrotlidec        1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libbrotlienc        1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libcblas            3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libcrc32c           1.1.2         h9c3ff4c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libcurl             8.1.2         h409715c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libedit             3.1.20191231  he28a2e2_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libev               4.33          h516909a_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libevent            2.1.12        hf998b51_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libffi              3.4.2         h7f98852_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgcc-ng           13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgfortran-ng      13.1.0        h69a702a_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgfortran5        13.1.0        h15d22d2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgomp             13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgoogle-cloud     2.12.0        hac9eb74_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libgrpc             1.54.2        hb20ce57_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   liblapack           3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libnghttp2          1.52.0        h61bc06f_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libnsl              2.0.0         h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libnuma             2.0.16        h0b41bf4_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libopenblas         0.3.23        pthreads_h80387f5_0  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libprotobuf         3.21.12       h3eb15da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libsqlite           3.42.0        h2797004_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libssh2             1.11.0        h0841786_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libstdcxx-ng        13.1.0        hfd8a6a1_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libthrift           0.18.1        h8fd135c_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libutf8proc         2.8.0         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libuuid             2.38.1        h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   libzlib             1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   lz4-c               1.9.4         hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   mypy                1.3.0         py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   mypy_extensions     1.0.0         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   ncurses             6.4           hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   numpy               1.24.4        py38h59b608b_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   openssl             3.1.1         hd590300_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   orc                 1.8.4         h2f23424_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   pip                 23.1.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   psutil              5.9.5         py38h1de0b5d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   pyarrow             12.0.1        py38h39356d1_0_cpu   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   python              3.8.17        he550d4f_0_cpython   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   python_abi          3.8           3_cp38               conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   rdma-core           28.9          h59595ed_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   re2                 2023.03.02    h8c504da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   readline            8.2           h8228510_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   s2n                 1.3.45        h06160fa_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   setuptools          68.0.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   snappy              1.1.10        h9fff704_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   tk                  8.6.12        h27826a3_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   tomli               2.0.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   typing_extensions   4.6.3         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   ucx                 1.14.1        hf587318_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   wheel               0.40.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   xz                  5.2.6         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   zlib                1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   |   zstd                1.5.2         h3eb15da_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2705  Success - Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \u2b50 Run Main mypy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Transaction\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Prefix: /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Updating specs:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - python=3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pandas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - xarray\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - zarr\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pytest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pytest-cov\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pytest-rerunfailures\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pytest-timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - pytest-xdist\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - requests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - moto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - sqlalchemy[version='<2']\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |    - flask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Package                          Version  Build                Channel          Size\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Install:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + _libgcc_mutex                      0.1  conda_forge          conda-forge       3kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + _openmp_mutex                      4.5  2_gnu                conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aiobotocore                      2.5.0  pyhd8ed1ab_0         conda-forge      63kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aiohttp                          3.8.4  py39hd1e30aa_1       conda-forge     442kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aioitertools                    0.11.0  pyhd8ed1ab_0         conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aiosignal                        1.3.1  pyhd8ed1ab_0         conda-forge      13kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + asciitree                        0.3.3  py_2                 conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + async-timeout                    4.0.2  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + attrs                           23.1.0  pyh71513ae_1         conda-forge      55kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-auth                      0.6.28  hccec9ca_5           conda-forge     102kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-cal                       0.5.27  hf85dbcb_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-common                    0.8.20  hd590300_0           conda-forge     197kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-compression               0.2.17  h4b87b72_0           conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-event-stream               0.3.0  hc5de78f_6           conda-forge      54kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-http                       0.7.8  h412fb1b_4           conda-forge     193kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-io                       0.13.26  h0d05201_0           conda-forge     154kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-mqtt                      0.8.13  ha5d9b87_2           conda-forge     151kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-s3                         0.3.4  h95e21fb_5           conda-forge      81kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-c-sdkutils                  0.1.10  h4b87b72_0           conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-checksums                   0.1.16  h4b87b72_0           conda-forge      50kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-crt-cpp                     0.20.2  h5289e1f_9           conda-forge     321kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-sam-translator              1.70.0  pyhd8ed1ab_0         conda-forge     247kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-sdk-cpp                    1.10.57  h8101662_14          conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + aws-xray-sdk                    2.12.0  pyhd8ed1ab_0         conda-forge      74kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + bcrypt                           3.2.2  py39hb9d737c_1       conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + blinker                          1.6.2  pyhd8ed1ab_0         conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + bokeh                            3.2.0  pyhd8ed1ab_0         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + boto3                          1.26.76  pyhd8ed1ab_0         conda-forge      77kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + botocore                       1.29.76  pyhd8ed1ab_0         conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + brotlipy                         0.7.0  py39hb9d737c_1005    conda-forge     351kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + bzip2                            1.0.8  h7f98852_4           conda-forge     496kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + c-ares                          1.19.1  hd590300_0           conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + ca-certificates               2023.5.7  hbcca054_0           conda-forge     148kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + certifi                       2023.5.7  pyhd8ed1ab_0         conda-forge     152kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + cffi                            1.15.1  py39he91dace_3       conda-forge     235kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + cfn-lint                       0.77.10  pyhd8ed1ab_0         conda-forge     979kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + charset-normalizer               3.1.0  pyhd8ed1ab_0         conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + click                            8.1.3  unix_pyhd8ed1ab_2    conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + cloudpickle                      2.2.1  pyhd8ed1ab_0         conda-forge      28kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + colorama                         0.4.6  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + contourpy                        1.1.0  py39h7633fee_0       conda-forge     221kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + coverage                         7.2.7  py39hd1e30aa_0       conda-forge     279kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + cryptography                    41.0.1  py39hd4f0224_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + cytoolz                         0.12.0  py39hb9d737c_1       conda-forge     390kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + dask                          2023.6.1  pyhd8ed1ab_0         conda-forge       7kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + dask-core                     2023.6.1  pyhd8ed1ab_0         conda-forge     849kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + distributed                   2023.6.1  pyhd8ed1ab_0         conda-forge     777kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + docker-py                        6.1.0  pyhd8ed1ab_0         conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + ecdsa                           0.18.0  pyhd8ed1ab_1         conda-forge     122kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + entrypoints                        0.4  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + exceptiongroup                   1.1.1  pyhd8ed1ab_0         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + execnet                          1.9.0  pyhd8ed1ab_0         conda-forge      33kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + fasteners                       0.17.3  pyhd8ed1ab_0         conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + flask                            2.3.2  pyhd8ed1ab_0         conda-forge      80kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + flask_cors                      3.0.10  pyhd3deb0d_0         conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + freetype                        2.12.1  hca18f0e_1           conda-forge     626kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + frozenlist                       1.3.3  py39hb9d737c_0       conda-forge      45kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + fsspec                        2023.6.0  pyh1a96a4e_0         conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + gflags                           2.2.2  he1b5a44_1004        conda-forge     117kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + glog                             0.6.0  h6f12383_0           conda-forge     114kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + gmp                              6.2.1  h58526e2_0           conda-forge     826kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + gmpy2                            2.1.2  py39h376b7d2_1       conda-forge     222kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + graphql-core                     3.2.3  pyhd8ed1ab_0         conda-forge     367kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + greenlet                         2.0.2  py39h3d6467e_1       conda-forge     190kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + idna                               3.4  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + importlib-metadata               6.7.0  pyha770c72_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + importlib_metadata               6.7.0  hd8ed1ab_0           conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + importlib_resources             5.12.0  pyhd8ed1ab_0         conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + iniconfig                        2.0.0  pyhd8ed1ab_0         conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + itsdangerous                     2.1.2  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jinja2                           3.1.2  pyhd8ed1ab_1         conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jmespath                         1.0.1  pyhd8ed1ab_0         conda-forge      21kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jschema-to-python                1.2.3  pyhd8ed1ab_0         conda-forge      12kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsondiff                         2.0.0  pyhd8ed1ab_0         conda-forge      10kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsonpatch                         1.32  pyhd8ed1ab_0         conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsonpickle                       2.2.0  pyhd8ed1ab_0         conda-forge      35kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsonpointer                        2.0  py_0                 conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsonschema                      4.17.3  pyhd8ed1ab_0         conda-forge      70kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + jsonschema-spec                  0.1.6  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + junit-xml                          1.9  pyh9f0ad1d_0         conda-forge      11kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + keyutils                         1.6.1  h166bdaf_0           conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + krb5                            1.20.1  h81ceb04_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + lazy-object-proxy                1.9.0  py39h72bdee0_0       conda-forge      33kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + lcms2                             2.15  haa2dc70_1           conda-forge     242kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + ld_impl_linux-64                  2.40  h41732ed_0           conda-forge     705kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + lerc                             4.0.0  h27087fc_0           conda-forge     282kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libabseil                   20230125.2  cxx17_h59595ed_2     conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libarrow                        12.0.1  hc410076_0_cpu       conda-forge      28MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libblas                          3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libbrotlicommon                  1.0.9  h166bdaf_9           conda-forge      71kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libbrotlidec                     1.0.9  h166bdaf_9           conda-forge      33kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libbrotlienc                     1.0.9  h166bdaf_9           conda-forge     265kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libcblas                         3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libcrc32c                        1.1.2  h9c3ff4c_0           conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libcurl                          8.1.2  h409715c_0           conda-forge     373kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libdeflate                        1.18  h0b41bf4_0           conda-forge      65kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libedit                   3.1.20191231  he28a2e2_2           conda-forge     124kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libev                             4.33  h516909a_1           conda-forge     106kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libevent                        2.1.12  hf998b51_1           conda-forge     427kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libffi                           3.4.2  h7f98852_5           conda-forge      58kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgcc-ng                       13.1.0  he5830b7_0           conda-forge     776kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgfortran-ng                  13.1.0  h69a702a_0           conda-forge      23kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgfortran5                    13.1.0  h15d22d2_0           conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgomp                         13.1.0  he5830b7_0           conda-forge     419kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgoogle-cloud                 2.12.0  hac9eb74_0           conda-forge      45MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libgrpc                         1.54.2  hb20ce57_2           conda-forge       6MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libjpeg-turbo                  2.1.5.1  h0b41bf4_0           conda-forge     491kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + liblapack                        3.9.0  17_linux64_openblas  conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libnghttp2                      1.52.0  h61bc06f_0           conda-forge     622kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libnsl                           2.0.0  h7f98852_0           conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libnuma                         2.0.16  h0b41bf4_1           conda-forge      41kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libopenblas                     0.3.23  pthreads_h80387f5_0  conda-forge       5MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libpng                          1.6.39  h753d276_0           conda-forge     283kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libprotobuf                    3.21.12  h3eb15da_0           conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libsodium                       1.0.18  h36c2ea0_1           conda-forge     375kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libsqlite                       3.42.0  h2797004_0           conda-forge     829kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libssh2                         1.11.0  h0841786_0           conda-forge     271kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libstdcxx-ng                    13.1.0  hfd8a6a1_0           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libthrift                       0.18.1  h8fd135c_2           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libtiff                          4.5.1  h8b53f26_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libutf8proc                      2.8.0  h166bdaf_0           conda-forge     101kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libuuid                         2.38.1  h0b41bf4_0           conda-forge      34kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libwebp-base                     1.3.0  h0b41bf4_0           conda-forge     357kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libxcb                            1.15  h0b41bf4_0           conda-forge     384kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + libzlib                         1.2.13  hd590300_5           conda-forge      62kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + locket                           1.0.0  pyhd8ed1ab_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + lz4                              4.3.2  py39h724f13c_0       conda-forge      37kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + lz4-c                            1.9.4  hcb278e6_0           conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + markupsafe                       2.1.3  py39hd1e30aa_0       conda-forge      24kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + moto                            4.1.12  pyhd8ed1ab_0         conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + mpc                              1.3.1  hfe3b2da_0           conda-forge     116kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + mpfr                             4.2.0  hb012696_0           conda-forge     631kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + mpmath                           1.3.0  pyhd8ed1ab_0         conda-forge     438kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + msgpack-python                   1.0.5  py39h4b4f3f3_0       conda-forge      85kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + multidict                        6.0.4  py39h72bdee0_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + ncurses                            6.4  hcb278e6_0           conda-forge     881kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + networkx                         2.8.8  pyhd8ed1ab_0         conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + numcodecs                       0.11.0  py39h227be39_1       conda-forge     672kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + numpy                           1.25.0  py39h6183b62_0       conda-forge       7MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + openapi-schema-validator         0.4.4  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + openapi-spec-validator           0.5.7  pyhd8ed1ab_0         conda-forge      37kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + openjpeg                         2.5.0  hfec8fc6_2           conda-forge     352kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + openssl                          3.1.1  hd590300_1           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + orc                              1.8.4  h2f23424_0           conda-forge     919kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + packaging                         23.1  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pandas                           2.0.2  py39h40cae4c_0       conda-forge      12MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + paramiko                         3.2.0  pyhd8ed1ab_0         conda-forge     158kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + partd                            1.4.0  pyhd8ed1ab_0         conda-forge      20kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pathable                         0.4.3  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pbr                             5.11.1  pyhd8ed1ab_0         conda-forge      76kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pillow                           9.5.0  py39haaeba84_1       conda-forge      46MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pip                             23.1.2  pyhd8ed1ab_0         conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pkgutil-resolve-name            1.3.10  pyhd8ed1ab_0         conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pluggy                           1.2.0  pyhd8ed1ab_0         conda-forge      22kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + psutil                           5.9.5  py39h72bdee0_0       conda-forge     359kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pthread-stubs                      0.4  h36c2ea0_1001        conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyarrow                         12.0.1  py39hfbd5978_0_cpu   conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyasn1                           0.4.8  py_0                 conda-forge      54kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pycparser                         2.21  pyhd8ed1ab_0         conda-forge     103kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pydantic                        1.10.9  py39hd1e30aa_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pynacl                           1.5.0  py39hb9d737c_2       conda-forge       1MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyopenssl                       23.2.0  pyhd8ed1ab_1         conda-forge     129kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyparsing                        3.1.0  pyhd8ed1ab_0         conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyrsistent                      0.19.3  py39h72bdee0_0       conda-forge      99kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pysocks                          1.7.1  pyha2e5f31_6         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytest                           7.4.0  pyhd8ed1ab_0         conda-forge     244kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytest-cov                       4.1.0  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytest-rerunfailures            11.1.2  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytest-timeout                   2.1.0  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytest-xdist                     3.3.1  pyhd8ed1ab_0         conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + python                          3.9.16  h2782a2a_0_cpython   conda-forge      24MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + python-dateutil                  2.8.2  pyhd8ed1ab_0         conda-forge     246kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + python-jose                      3.3.0  pyh6c4a22f_1         conda-forge     116kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + python-tzdata                   2023.3  pyhd8ed1ab_0         conda-forge     143kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + python_abi                         3.9  3_cp39               conda-forge       6kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pytz                            2023.3  pyhd8ed1ab_0         conda-forge     187kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pywin32-on-windows               0.1.0  pyh1179c8e_3         conda-forge       5kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + pyyaml                             6.0  py39hb9d737c_5       conda-forge     184kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + rdma-core                         28.9  h59595ed_1           conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + re2                         2023.03.02  h8c504da_0           conda-forge     201kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + readline                           8.2  h8228510_1           conda-forge     281kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + regex                         2023.6.3  py39hd1e30aa_0       conda-forge     343kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + requests                        2.31.0  pyhd8ed1ab_0         conda-forge      57kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + responses                       0.23.1  pyhd8ed1ab_0         conda-forge      48kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + rfc3339-validator                0.1.4  pyhd8ed1ab_0         conda-forge       8kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + rsa                                4.9  pyhd8ed1ab_0         conda-forge      30kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + s2n                             1.3.45  h06160fa_0           conda-forge     368kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + s3fs                          2023.6.0  pyhd8ed1ab_0         conda-forge      31kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + s3transfer                       0.6.1  pyhd8ed1ab_0         conda-forge      61kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + sarif-om                         1.0.4  pyhd8ed1ab_0         conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + setuptools                      68.0.0  pyhd8ed1ab_0         conda-forge     464kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + six                             1.16.0  pyh6c4a22f_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + snappy                          1.1.10  h9fff704_0           conda-forge      39kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + sortedcontainers                 2.4.0  pyhd8ed1ab_0         conda-forge      26kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + sqlalchemy                      1.4.48  py39hd1e30aa_0       conda-forge       2MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + sshpubkeys                       3.3.1  pyhd8ed1ab_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + sympy                             1.12  pypyh9d50eac_103     conda-forge       4MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + tblib                            1.7.0  pyhd8ed1ab_0         conda-forge      15kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + tk                              8.6.12  h27826a3_0           conda-forge       3MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + toml                            0.10.2  pyhd8ed1ab_0         conda-forge      18kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + tomli                            2.0.1  pyhd8ed1ab_0         conda-forge      16kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + toolz                           0.12.0  pyhd8ed1ab_0         conda-forge      49kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + tornado                          6.3.2  py39hd1e30aa_0       conda-forge     629kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + types-pyyaml                 6.0.12.10  pyhd8ed1ab_0         conda-forge      25kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + typing-extensions                4.4.0  hd8ed1ab_0           conda-forge       9kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + typing_extensions                4.4.0  pyha770c72_0         conda-forge      30kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + tzdata                           2023c  h71feb2d_0           conda-forge     118kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + ucx                             1.14.1  hf587318_2           conda-forge      17MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + urllib3                        1.26.15  pyhd8ed1ab_0         conda-forge     113kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + websocket-client                 1.6.1  pyhd8ed1ab_0         conda-forge      46kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + werkzeug                         2.3.6  pyhd8ed1ab_0         conda-forge     254kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + wheel                           0.40.0  pyhd8ed1ab_0         conda-forge      56kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + wrapt                           1.15.0  py39h72bdee0_0       conda-forge      53kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xarray                        2023.6.0  pyhd8ed1ab_0         conda-forge     677kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xmltodict                       0.13.0  pyhd8ed1ab_0         conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xorg-libxau                     1.0.11  hd590300_0           conda-forge      14kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xorg-libxdmcp                    1.1.3  h7f98852_0           conda-forge      19kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xyzservices                   2023.5.0  pyhd8ed1ab_1         conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + xz                               5.2.6  h166bdaf_0           conda-forge     418kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + yaml                             0.2.5  h7f98852_2           conda-forge      89kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + yarl                             1.9.2  py39hd1e30aa_0       conda-forge      96kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + zarr                            2.15.0  pyhd8ed1ab_0         conda-forge     157kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + zict                             3.0.0  pyhd8ed1ab_0         conda-forge      36kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + zipp                            3.15.0  pyhd8ed1ab_0         conda-forge      17kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + zlib                            1.2.13  hd590300_5           conda-forge      93kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   + zstd                             1.5.2  h3eb15da_6           conda-forge     420kB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Summary:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Install: 226 packages\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Total download: 281MB\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Transaction starting\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nomkl-1.0-h5ca1d4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking _libgcc_mutex-0.1-conda_forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python_abi-3.8-3_cp38\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgfortran5-13.1.0-h15d22d2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgomp-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgfortran-ng-13.1.0-h69a702a_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking _openmp_mutex-4.5-2_gnu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking rdma-core-28.9-h59595ed_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libnuma-2.0.16-h0b41bf4_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking lzo-2.10-h516909a_1000\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking xorg-libxdmcp-1.1.3-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pthread-stubs-0.4-h36c2ea0_1001\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libsodium-1.0.18-h36c2ea0_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking icu-72.1-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking gflags-2.2.2-he1b5a44_1004\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking yaml-0.2.5-h7f98852_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking gettext-0.21.1-h27087fc_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-common-0.8.20-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libbrotlicommon-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libopenblas-0.3.23-pthreads_h80387f5_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libabseil-20230125.2-cxx17_h59595ed_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libev-4.33-h516909a_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking c-ares-1.19.1-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking xorg-libxau-1.0.11-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking lz4-c-1.9.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking gmp-6.2.1-h58526e2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libdeflate-1.18-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking lerc-4.0.0-h27087fc_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking keyutils-1.6.1-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking openssl-3.1.1-hd590300_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libzlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libffi-3.4.2-h7f98852_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking bzip2-1.0.8-h7f98852_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libwebp-base-1.3.0-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libjpeg-turbo-2.1.5.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libexpat-2.5.0-hcb278e6_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libiconv-1.17-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libcrc32c-1.1.2-h9c3ff4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking snappy-1.1.10-h9fff704_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking re2-2023.03.02-h8c504da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libutf8proc-2.8.0-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ncurses-6.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Cloning into 'gcsfs'...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | ============================= test session starts ==============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | platform linux -- Python 3.9.16, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/test_env/bin/python3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | cachedir: .pytest_cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | configfile: pyproject.toml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | plugins: mock-3.11.1, vcr-1.0.2, cov-4.1.0, benchmark-4.0.0, asyncio-0.21.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | asyncio: mode=strict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | argcomplete==1.12.3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | cfgv==3.3.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | click==8.0.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | distlib==0.3.6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | filelock==3.12.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | identify==2.5.24\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | nodeenv==1.8.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | packaging==21.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | pipx==0.16.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | platformdirs==3.8.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | pre-commit==3.3.3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | pyparsing==2.4.7\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | userpath==1.7.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | virtualenv==20.23.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Main python -m pip freeze --local\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main actions/cache@v3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | collecting ... collected 1144 items / 9 skipped\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[zip-True-True] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[zip] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[zip-128] PASSED [  0%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[zip] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[zip-True-False] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[tar] PASSED [  1%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[zip-512] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[tar] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libuuid-2.38.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking xz-5.2.6-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[zip-False-True] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[tar-gz] PASSED [  2%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libnsl-2.0.0-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ucx-1.14.1-hf587318_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zeromq-4.3.4-h9c3ff4c_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking glog-0.6.0-h6f12383_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-checksums-0.1.16-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-compression-0.2.17-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-sdkutils-0.1.10-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libbrotlienc-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libbrotlidec-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libxcb-1.15-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libevent-2.1.12-hf998b51_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking s2n-1.3.45-h06160fa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-cal-0.5.27-hf85dbcb_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libssh2-1.11.0-h0841786_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zstd-1.5.2-h3eb15da_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libpng-1.6.39-h753d276_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libnghttp2-1.52.0-h61bc06f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libprotobuf-3.21.12-h3eb15da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libsqlite-3.42.0-h2797004_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tk-8.6.12-h27826a3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pcre2-10.40-hc3806b6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libedit-3.1.20191231-he28a2e2_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking readline-8.2-h8228510_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libxml2-2.11.4-h0d562d8_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking perl-5.32.1-2_h7f98852_perl5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[zip-4096] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[tar-gz] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libcblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::Resolved Keys:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::[\"pre-commit-3||c433f6d637346779ab44fe1a301e37a5b13638462aa5c9b335d3830aabe49528\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[tar-bz2] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[zip-False-False] PASSED [  3%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[tar-bz2] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::1.5.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/cache?keys=pre-commit-3%257C%257Cc433f6d637346779ab44fe1a301e37a5b13638462aa5c9b335d3830aabe49528&version=356db49e6bae2290b5c998bce2b5407d52ba33e30aa3d911773d957b563a16ad\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | Cache not found for input keys: pre-commit-3||c433f6d637346779ab44fe1a301e37a5b13638462aa5c9b335d3830aabe49528\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking liblapack-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Main actions/cache@v3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-128] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[tar-bz2] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libthrift-0.18.1-h8fd135c_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-io-0.13.26-h0d05201_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pandoc-3.1.3-h32600fe_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libtiff-4.5.1-h8b53f26_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking freetype-2.12.1-hca18f0e_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgrpc-1.54.2-hb20ce57_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[tar-xz] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-True-True] PASSED [  4%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[tar-xz] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking orc-1.8.4-h2f23424_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgit2-1.6.4-h747ad27_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking krb5-1.20.1-h81ceb04_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-3.8.17-he550d4f_0_cpython\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-512] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libarchive-3.6.2-h039dbb9_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[tar-xz] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-event-stream-0.3.0-hc5de78f_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-http-0.7.8-h412fb1b_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking openjpeg-2.5.0-hfec8fc6_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking lcms2-2.15-haa2dc70_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libcurl-8.1.2-h409715c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-auth-0.6.28-hccec9ca_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Main pre-commit run --show-diff-on-failure --color=always --all-files\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-mqtt-0.8.13-ha5d9b87_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking curl-8.1.2-h409715c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libgoogle-cloud-2.12.0-hac9eb74_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_repr[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_empty[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_glob[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_mapping[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_pickle[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_all_dirnames[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_ls[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_find[libarchive] PASSED [  5%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-True-False] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_info[libarchive] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-3.sh] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-c-s3-0.3.4-h95e21fb_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking git-2.41.0-pl5321h86e50cf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-crt-cpp-0.20.2-h5289e1f_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aws-sdk-cpp-1.10.57-h8101662_14\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking libarrow-12.0.1-hc410076_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking backports-1.0-pyhd8ed1ab_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking parso-0.8.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pure_eval-0.2.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking executing-1.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking backcall-0.2.0-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pickleshare-0.7.5-py_1003\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking decorator-5.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ptyprocess-0.7.0-pyhd3deb0d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pysocks-1.7.1-pyha2e5f31_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytz-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-tzdata-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking flit-core-3.9.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking py-cpuinfo-9.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking sniffio-1.3.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking soupsieve-2.3.2.post1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking six-1.16.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking xyzservices-2023.5.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jmespath-1.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zict-3.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking toolz-0.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tblib-1.7.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking sortedcontainers-2.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking click-8.1.3-unix_pyhd8ed1ab_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zipp-3.15.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking attrs-23.1.0-pyh71513ae_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-json-logger-2.0.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking typing_utils-0.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking rfc3986-validator-0.1.1-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking websocket-client-1.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pygments-2.15.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking mistune-3.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pandocfilters-1.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking entrypoints-0.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking defusedxml-0.7.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-fastjsonschema-2.17.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pkgutil-resolve-name-1.3.10-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking send2trash-1.8.2-pyh41d4057_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nest-asyncio-1.5.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking traitlets-5.9.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking prometheus_client-0.17.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking param-1.13.0-pyh1a96a4e_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking mdurl-0.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking uc-micro-py-1.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking webencodings-0.5.1-py_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking iniconfig-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking exceptiongroup-1.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pluggy-1.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking packaging-23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking typing_extensions-4.6.3-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking toml-0.10.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking charset-normalizer-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking idna-3.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking certifi-2023.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking colorama-0.4.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tomli-1.2.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking fusepy-3.0.1-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-4096] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking py-1.11.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_read_empty_file[libarchive] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking cloudpickle-2.2.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking fsspec-2023.6.0-pyh1a96a4e_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-False-True] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ipython_genutils-0.2.0-py_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking locket-1.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking backports.functools_lru_cache-1.6.5-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jedi-0.18.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-gz-128] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-False-False] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pexpect-4.8.0-pyh1a96a4e_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking beautifulsoup4-4.12.2-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking asttokens-2.2.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking rfc3339-validator-0.1.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-dateutil-2.8.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking importlib_resources-5.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking importlib-metadata-6.7.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking overrides-7.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyterlab_pygments-0.2.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking comm-0.1.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking matplotlib-inline-0.1.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyviz_comms-2.3.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking linkify-it-py-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tinycss2-1.2.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking bleach-6.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking typing-extensions-4.6.3-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aioitertools-0.11.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking markdown-it-py-2.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking anyio-3.7.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tqdm-4.65.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-7.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking partd-1.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking wcwidth-0.2.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking stack_data-0.6.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking importlib_metadata-6.7.0-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking markdown-3.4.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking async-timeout-4.0.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking platformdirs-3.8.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking mdit-py-plugins-0.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-gz-512] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-mock-3.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-gz-True-True] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-benchmark-4.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-asyncio-0.21.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking prompt-toolkit-3.0.38-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking prompt_toolkit-3.0.38-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ipython-8.12.2-pyh41d4057_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking multidict-6.0.4-py38h1de0b5d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking frozenlist-1.3.3-py38h0a891b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking cramjam-2.6.2-py38h0287bc9_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking wrapt-1.15.0-py38h1de0b5d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pillow-9.5.0-py38h885162f_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Success: no issues found in 52 source files\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking debugpy-1.6.7-py38h8dc9893_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2705  Success - Main mypy\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking psutil-5.9.5-py38h1de0b5d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyrsistent-0.19.3-py38h1de0b5d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyyaml-6.0-py38h0a891b7_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking markupsafe-2.1.3-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking tornado-6.3.2-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyzmq-25.1.0-py38h509eb50_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking numpy-1.24.4-py38h59b608b_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \u2b50 Run Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-libarchive-c-4.0-py38h578d9bd_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking msgpack-python-1.0.5-py38hfbd4bf9_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking lz4-4.3.2-py38hd012fdc_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking python-snappy-0.6.1-py38h1ddbb56_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking cffi-1.15.1-py38h4a40e3a_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking cytoolz-0.12.0-py38h0a891b7_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking coverage-7.2.7-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyter_core-5.3.0-py38h578d9bd_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking yarl-1.9.2-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking contourpy-1.1.0-py38h7f3f72f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pandas-2.0.2-py38h01efb38_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyarrow-12.0.1-py38h39356d1_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking _libgcc_mutex-0.1-conda_forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking python_abi-3.9-3_cp39\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgfortran5-13.1.0-h15d22d2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgomp-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgfortran-ng-13.1.0-h69a702a_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking _openmp_mutex-4.5-2_gnu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking rdma-core-28.9-h59595ed_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking brotlipy-0.7.0-py38h0a891b7_1005\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking argon2-cffi-bindings-21.2.0-py38h0a891b7_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pynacl-1.5.0-py38h0a891b7_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking cryptography-41.0.1-py38hcdda232_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking bcrypt-3.2.2-py38h0a891b7_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pygit2-1.12.2-py38h01eb140_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking zstandard-0.19.0-py38ha98ab4e_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking fastparquet-2023.4.0-py38h7e4f40d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aiosignal-1.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jsonschema-4.17.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking dask-core-2023.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jinja2-3.1.2-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking terminado-0.17.1-pyh41d4057_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-cov-4.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyter_client-8.3.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking vcrpy-4.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking argon2-cffi-21.3.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyopenssl-23.2.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking paramiko-3.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyter_events-0.6.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbformat-5.9.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking bokeh-3.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libnuma-2.0.16-h0b41bf4_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libsodium-1.0.18-h36c2ea0_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xorg-libxdmcp-1.1.3-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pthread-stubs-0.4-h36c2ea0_1001\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking gflags-2.2.2-he1b5a44_1004\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking yaml-0.2.5-h7f98852_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-common-0.8.20-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libbrotlicommon-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libopenblas-0.3.23-pthreads_h80387f5_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libabseil-20230125.2-cxx17_h59595ed_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyter_server_terminals-0.4.4-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking ipykernel-6.23.3-pyh71e2992_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pytest-vcr-1.0.2-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking pyftpdlib-1.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbclient-0.8.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking botocore-1.29.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libev-4.33-h516909a_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking c-ares-1.19.1-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xorg-libxau-1.0.11-hd590300_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking lz4-c-1.9.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libdeflate-1.18-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking lerc-4.0.0-h27087fc_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking keyutils-1.6.1-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking openssl-3.1.1-hd590300_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2705  Success - Main Clone\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking ncurses-6.4-hcb278e6_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking distributed-2023.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking requests-2.31.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbconvert-core-7.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking dask-2023.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking panel-1.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Main Install\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking jupyter_server-2.7.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbconvert-pandoc-7.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking notebook-shim-0.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbconvert-7.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking nbclassic-1.0.0-pyhb4ecaf3_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/3] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking notebook-6.5.4-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aiohttp-3.8.4-py38h01eb140_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking aiobotocore-2.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Linking s3fs-2023.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Transaction finished\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | To activate this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     micromamba activate test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Or to execute a single command in this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     micromamba run -n test_env mycommand\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Installing pip packages: hadoop-test-cluster, smbprotocol\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-gz-4096] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-gz-True-False] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-bz2-128] PASSED [  6%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-gz-False-True] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-bz2-512] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-gz-False-False] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Collecting hadoop-test-cluster (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 1))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Downloading hadoop_test_cluster-0.1.0-py2.py3-none-any.whl (8.5 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Collecting smbprotocol (from -r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 2))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Downloading smbprotocol-1.10.1-py3-none-any.whl (125 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 125.6/125.6 kB 5.1 MB/s eta 0:00:00\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Requirement already satisfied: cryptography>=2.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/site-packages (from smbprotocol->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 2)) (41.0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libzlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libuuid-2.38.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libffi-3.4.2-h7f98852_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking bzip2-1.0.8-h7f98852_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking gmp-6.2.1-h58526e2_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libwebp-base-1.3.0-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libjpeg-turbo-2.1.5.1-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libcrc32c-1.1.2-h9c3ff4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking snappy-1.1.10-h9fff704_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking re2-2023.03.02-h8c504da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libutf8proc-2.8.0-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xz-5.2.6-h166bdaf_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libnsl-2.0.0-h7f98852_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking ucx-1.14.1-hf587318_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Collecting pyspnego (from smbprotocol->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 2))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Downloading pyspnego-0.9.1-py3-none-any.whl (132 kB)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking glog-0.6.0-h6f12383_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-checksums-0.1.16-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-compression-0.2.17-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-sdkutils-0.1.10-h4b87b72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libbrotlienc-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libbrotlidec-1.0.9-h166bdaf_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 132.9/132.9 kB 1.3 MB/s eta 0:00:00\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Requirement already satisfied: cffi>=1.12 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/site-packages (from cryptography>=2.0->smbprotocol->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 2)) (1.15.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Requirement already satisfied: pycparser in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/site-packages (from cffi>=1.12->cryptography>=2.0->smbprotocol->-r /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/ci/mambafFr1JmVfr8M (line 2)) (2.21)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libxcb-1.15-h0b41bf4_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libevent-2.1.12-hf998b51_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking s2n-1.3.45-h06160fa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-cal-0.5.27-hf85dbcb_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libedit-3.1.20191231-he28a2e2_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking readline-8.2-h8228510_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libssh2-1.11.0-h0841786_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking zlib-1.2.13-hd590300_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking zstd-1.5.2-h3eb15da_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libsqlite-3.42.0-h2797004_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libpng-1.6.39-h753d276_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libnghttp2-1.52.0-h61bc06f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libprotobuf-3.21.12-h3eb15da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking tk-8.6.12-h27826a3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking mpfr-4.2.0-hb012696_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libcblas-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   | /var/run/act/workflow/2-composite-3.sh: line 2: pre-commit: command not found\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u274c  Failure - Main pre-commit run --show-diff-on-failure --color=always --all-files\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking liblapack-3.9.0-17_linux64_openblas\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libthrift-0.18.1-h8fd135c_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-io-0.13.26-h0d05201_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking krb5-1.20.1-h81ceb04_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libtiff-4.5.1-h8b53f26_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking freetype-2.12.1-hca18f0e_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgrpc-1.54.2-hb20ce57_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u274c  Failure - Main pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking orc-1.8.4-h2f23424_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking mpc-1.3.1-hfe3b2da_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-event-stream-0.3.0-hc5de78f_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-http-0.7.8-h412fb1b_4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libcurl-8.1.2-h409715c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking openjpeg-2.5.0-hfec8fc6_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking lcms2-2.15-haa2dc70_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-auth-0.6.28-hccec9ca_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-mqtt-0.8.13-ha5d9b87_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libgoogle-cloud-2.12.0-hac9eb74_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \u2b50 Run Post pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker cp src=/tmp/act-cache/a8ff7c6c-07b9-438c-8fc2-4b00849429b2/act/pre-commit-action@main/ dst=/var/run/act/actions/pre-commit-action@main/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/pre-commit-action@main/] user=0 workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Installing collected packages: hadoop-test-cluster, pyspnego, smbprotocol\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-c-s3-0.3.4-h95e21fb_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-crt-cpp-0.20.2-h5289e1f_9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-sdk-cpp-1.10.57-h8101662_14\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking libarrow-12.0.1-hc410076_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Successfully installed hadoop-test-cluster-0.1.0 pyspnego-0.9.1 smbprotocol-1.10.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-bz2-4096] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-bz2-True-True] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking tzdata-2023c-h71feb2d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | --- Contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | set -eo pipefail; micromamba activate test_env;\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | --- End contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-xz-128] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-bz2-True-False] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking python-3.9.16-h2782a2a_0_cpython\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-xz-512] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-bz2-False-True] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking wheel-0.40.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | {\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"channels\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/test_env\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"environment\": \"test_env (active)\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"libmamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"micromamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"platform\": \"linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"populated config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"/home/runneradmin/.condarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"user config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"/home/runneradmin/.mambarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     \"virtual packages\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"__unix=0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"__linux=5.4.0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"__glibc=2.31=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         \"__archspec=1=x86_64\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | }\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::group::Environment info\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ]   \u2705  Success - Post pre-commit/action@main\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::group::Deinitializing micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking setuptools-68.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Cache Paths:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Archive Path: /tmp/e83773f4-a5c8-4303-a0d0-83cf93098511/cache.tzst\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pip-23.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec --files-from manifest.txt --use-compress-program zstdmt\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |             environment : test_env (active)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |            env location : /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |       user config files : /home/runneradmin/.mambarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |  populated config files : /home/runneradmin/.condarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |        libmamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |      micromamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |        virtual packages : __unix=0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                           __linux=5.4.0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                           __glibc=2.31=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                           __archspec=1=x86_64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                           https://conda.anaconda.org/conda-forge/noarch\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |        base environment : /home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |                platform : linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::File Size: 5437502\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Reserving Cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Upload cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches/1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Awaiting all uploads\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Uploading chunk of size 5437502 bytes at offset 0 with content range: bytes 0-5437501/*\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pathable-0.4.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking types-pyyaml-6.0.12.10-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking mpmath-1.3.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pysocks-1.7.1-pyha2e5f31_6\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Commiting cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Cache Size: ~5 MB (5437502 B)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches/1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Cache saved successfully\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking entrypoints-0.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking python-tzdata-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2705  Success - Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsonpointer-2.0-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking six-1.16.0-pyh6c4a22f_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyasn1-0.4.8-py_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pbr-5.11.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking attrs-23.1.0-pyh71513ae_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xyzservices-2023.5.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jmespath-1.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking typing_extensions-4.4.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking networkx-2.8.8-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pkgutil-resolve-name-1.3.10-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking zict-3.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking toolz-0.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking tblib-1.7.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking sortedcontainers-2.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking cloudpickle-2.2.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pywin32-on-windows-0.1.0-pyh1179c8e_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking websocket-client-1.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking click-8.1.3-unix_pyhd8ed1ab_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking zipp-3.15.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyparsing-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsondiff-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xmltodict-0.13.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytz-2023.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Installing build dependencies: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking tomli-2.0.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking iniconfig-2.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking exceptiongroup-1.1.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pluggy-1.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking colorama-0.4.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking toml-0.10.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking execnet-1.9.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking charset-normalizer-3.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking idna-3.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking certifi-2023.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking packaging-23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking fasteners-0.17.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking blinker-1.6.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking itsdangerous-2.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking fsspec-2023.6.0-pyh1a96a4e_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking asciitree-0.3.3-py_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking locket-1.0.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsonpatch-1.32-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking rfc3339-validator-0.1.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking python-dateutil-2.8.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking junit-xml-1.9-pyh9f0ad1d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking rsa-4.9-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking sarif-om-1.0.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aioitertools-0.11.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking typing-extensions-4.4.0-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking graphql-core-3.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking importlib_resources-5.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking importlib-metadata-6.7.0-pyha770c72_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytest-7.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking partd-1.4.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking async-timeout-4.0.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking importlib_metadata-6.7.0-hd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytest-xdist-3.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytest-timeout-2.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytest-rerunfailures-11.1.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsonpickle-2.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jschema-to-python-1.2.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyrsistent-0.19.3-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking lazy-object-proxy-1.9.0-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking multidict-6.0.4-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking frozenlist-1.3.3-py39hb9d737c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking greenlet-2.0.2-py39h3d6467e_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/test_env\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   Name                           Version       Build                Channel    \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   _libgcc_mutex                  0.1           conda_forge          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   _openmp_mutex                  4.5           2_gnu                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aiobotocore                    2.5.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aiohttp                        3.8.4         py38h01eb140_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aioitertools                   0.11.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aiosignal                      1.3.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   anyio                          3.7.0         pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   argon2-cffi                    21.3.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   argon2-cffi-bindings           21.2.0        py38h0a891b7_3       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   asttokens                      2.2.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   async-timeout                  4.0.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   attrs                          23.1.0        pyh71513ae_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-auth                     0.6.28        hccec9ca_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-cal                      0.5.27        hf85dbcb_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-common                   0.8.20        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-compression              0.2.17        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-event-stream             0.3.0         hc5de78f_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-http                     0.7.8         h412fb1b_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-io                       0.13.26       h0d05201_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-mqtt                     0.8.13        ha5d9b87_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-s3                       0.3.4         h95e21fb_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-c-sdkutils                 0.1.10        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-checksums                  0.1.16        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-crt-cpp                    0.20.2        h5289e1f_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   aws-sdk-cpp                    1.10.57       h8101662_14          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   backcall                       0.2.0         pyh9f0ad1d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   backports                      1.0           pyhd8ed1ab_3         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   backports.functools_lru_cache  1.6.5         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   bcrypt                         3.2.2         py38h0a891b7_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   beautifulsoup4                 4.12.2        pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   bleach                         6.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   bokeh                          3.1.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   botocore                       1.29.76       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   brotlipy                       0.7.0         py38h0a891b7_1005    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   bzip2                          1.0.8         h7f98852_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   c-ares                         1.19.1        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ca-certificates                2023.5.7      hbcca054_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   certifi                        2023.5.7      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   cffi                           1.15.1        py38h4a40e3a_3       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   charset-normalizer             3.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   click                          8.1.3         unix_pyhd8ed1ab_2    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   cloudpickle                    2.2.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   colorama                       0.4.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   comm                           0.1.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   contourpy                      1.1.0         py38h7f3f72f_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   coverage                       7.2.7         py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   cramjam                        2.6.2         py38h0287bc9_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   cryptography                   41.0.1        py38hcdda232_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   curl                           8.1.2         h409715c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   cytoolz                        0.12.0        py38h0a891b7_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   dask                           2023.5.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   dask-core                      2023.5.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   debugpy                        1.6.7         py38h8dc9893_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   decorator                      5.1.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   defusedxml                     0.7.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   distributed                    2023.5.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   entrypoints                    0.4           pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   exceptiongroup                 1.1.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   executing                      1.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   fastparquet                    2023.4.0      py38h7e4f40d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   flit-core                      3.9.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   freetype                       2.12.1        hca18f0e_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   frozenlist                     1.3.3         py38h0a891b7_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   fsspec                         2023.6.0      pyh1a96a4e_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   fusepy                         3.0.1         py_0                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   gettext                        0.21.1        h27087fc_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   gflags                         2.2.2         he1b5a44_1004        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   git                            2.41.0        pl5321h86e50cf_0     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   glog                           0.6.0         h6f12383_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   gmp                            6.2.1         h58526e2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   icu                            72.1          hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   idna                           3.4           pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   importlib-metadata             6.7.0         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   importlib_metadata             6.7.0         hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   importlib_resources            5.12.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   iniconfig                      2.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ipykernel                      6.23.3        pyh71e2992_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ipython                        8.12.2        pyh41d4057_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ipython_genutils               0.2.0         py_1                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jedi                           0.18.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jinja2                         3.1.2         pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jmespath                       1.0.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jsonschema                     4.17.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyter_client                 8.3.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyter_core                   5.3.0         py38h578d9bd_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyter_events                 0.6.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyter_server                 2.7.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyter_server_terminals       0.4.4         pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   jupyterlab_pygments            0.2.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   keyutils                       1.6.1         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   krb5                           1.20.1        h81ceb04_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   lcms2                          2.15          haa2dc70_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ld_impl_linux-64               2.40          h41732ed_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   lerc                           4.0.0         h27087fc_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libabseil                      20230125.2    cxx17_h59595ed_2     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libarchive                     3.6.2         h039dbb9_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libarrow                       12.0.1        hc410076_0_cpu       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libblas                        3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libbrotlicommon                1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libbrotlidec                   1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libbrotlienc                   1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libcblas                       3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libcrc32c                      1.1.2         h9c3ff4c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libcurl                        8.1.2         h409715c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libdeflate                     1.18          h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libedit                        3.1.20191231  he28a2e2_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libev                          4.33          h516909a_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libevent                       2.1.12        hf998b51_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libexpat                       2.5.0         hcb278e6_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libffi                         3.4.2         h7f98852_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgcc-ng                      13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgfortran-ng                 13.1.0        h69a702a_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgfortran5                   13.1.0        h15d22d2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgit2                        1.6.4         h747ad27_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgomp                        13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgoogle-cloud                2.12.0        hac9eb74_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libgrpc                        1.54.2        hb20ce57_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libiconv                       1.17          h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libjpeg-turbo                  2.1.5.1       h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   liblapack                      3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libnghttp2                     1.52.0        h61bc06f_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libnsl                         2.0.0         h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libnuma                        2.0.16        h0b41bf4_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libopenblas                    0.3.23        pthreads_h80387f5_0  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libpng                         1.6.39        h753d276_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libprotobuf                    3.21.12       h3eb15da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libsodium                      1.0.18        h36c2ea0_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libsqlite                      3.42.0        h2797004_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libssh2                        1.11.0        h0841786_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libstdcxx-ng                   13.1.0        hfd8a6a1_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libthrift                      0.18.1        h8fd135c_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libtiff                        4.5.1         h8b53f26_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libutf8proc                    2.8.0         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libuuid                        2.38.1        h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libwebp-base                   1.3.0         h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libxcb                         1.15          h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libxml2                        2.11.4        h0d562d8_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   libzlib                        1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   linkify-it-py                  2.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   locket                         1.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   lz4                            4.3.2         py38hd012fdc_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   lz4-c                          1.9.4         hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   lzo                            2.10          h516909a_1000        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   markdown                       3.4.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   markdown-it-py                 2.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   markupsafe                     2.1.3         py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   matplotlib-inline              0.1.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   mdit-py-plugins                0.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   mdurl                          0.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   mistune                        3.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   msgpack-python                 1.0.5         py38hfbd4bf9_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   multidict                      6.0.4         py38h1de0b5d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbclassic                      1.0.0         pyhb4ecaf3_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbclient                       0.8.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbconvert                      7.6.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbconvert-core                 7.6.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbconvert-pandoc               7.6.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nbformat                       5.9.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ncurses                        6.4           hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nest-asyncio                   1.5.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   nomkl                          1.0           h5ca1d4c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   notebook                       6.5.4         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   notebook-shim                  0.2.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   numpy                          1.24.4        py38h59b608b_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   openjpeg                       2.5.0         hfec8fc6_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   openssl                        3.1.1         hd590300_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   orc                            1.8.4         h2f23424_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   overrides                      7.3.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   packaging                      23.1          pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pandas                         2.0.2         py38h01efb38_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pandoc                         3.1.3         h32600fe_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pandocfilters                  1.5.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   panel                          1.1.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   param                          1.13.0        pyh1a96a4e_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   paramiko                       3.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   parso                          0.8.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   partd                          1.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pcre2                          10.40         hc3806b6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   perl                           5.32.1        2_h7f98852_perl5     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pexpect                        4.8.0         pyh1a96a4e_2         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pickleshare                    0.7.5         py_1003              conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pillow                         9.5.0         py38h885162f_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pip                            23.1.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pkgutil-resolve-name           1.3.10        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   platformdirs                   3.8.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pluggy                         1.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   prometheus_client              0.17.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   prompt-toolkit                 3.0.38        pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   prompt_toolkit                 3.0.38        hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   psutil                         5.9.5         py38h1de0b5d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pthread-stubs                  0.4           h36c2ea0_1001        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ptyprocess                     0.7.0         pyhd3deb0d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pure_eval                      0.2.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   py                             1.11.0        pyh6c4a22f_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   py-cpuinfo                     9.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyarrow                        12.0.1        py38h39356d1_0_cpu   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pycparser                      2.21          pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyftpdlib                      1.5.7         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pygit2                         1.12.2        py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pygments                       2.15.1        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pynacl                         1.5.0         py38h0a891b7_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyopenssl                      23.2.0        pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyrsistent                     0.19.3        py38h1de0b5d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pysocks                        1.7.1         pyha2e5f31_6         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest                         7.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest-asyncio                 0.21.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest-benchmark               4.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest-cov                     4.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest-mock                    3.11.1        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytest-vcr                     1.0.2         pyh9f0ad1d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python                         3.8.17        he550d4f_0_cpython   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-dateutil                2.8.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-fastjsonschema          2.17.1        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-json-logger             2.0.7         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-libarchive-c            4.0           py38h578d9bd_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-snappy                  0.6.1         py38h1ddbb56_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python-tzdata                  2023.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   python_abi                     3.8           3_cp38               conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pytz                           2023.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyviz_comms                    2.3.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyyaml                         6.0           py38h0a891b7_5       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   pyzmq                          25.1.0        py38h509eb50_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   rdma-core                      28.9          h59595ed_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   re2                            2023.03.02    h8c504da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   readline                       8.2           h8228510_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   requests                       2.31.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   rfc3339-validator              0.1.4         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   rfc3986-validator              0.1.1         pyh9f0ad1d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   s2n                            1.3.45        h06160fa_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   s3fs                           2023.6.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   send2trash                     1.8.2         pyh41d4057_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   setuptools                     68.0.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   six                            1.16.0        pyh6c4a22f_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   snappy                         1.1.10        h9fff704_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   sniffio                        1.3.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   sortedcontainers               2.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   soupsieve                      2.3.2.post1   pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   stack_data                     0.6.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tblib                          1.7.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   terminado                      0.17.1        pyh41d4057_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tinycss2                       1.2.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tk                             8.6.12        h27826a3_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   toml                           0.10.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tomli                          1.2.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   toolz                          0.12.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tornado                        6.3.2         py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   tqdm                           4.65.0        pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   traitlets                      5.9.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   typing-extensions              4.6.3         hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   typing_extensions              4.6.3         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   typing_utils                   0.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   uc-micro-py                    1.0.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   ucx                            1.14.1        hf587318_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   urllib3                        1.26.15       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   vcrpy                          4.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   wcwidth                        0.2.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   webencodings                   0.5.1         py_1                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   websocket-client               1.6.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   wheel                          0.40.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   wrapt                          1.15.0        py38h1de0b5d_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   xorg-libxau                    1.0.11        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   xorg-libxdmcp                  1.1.3         h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   xyzservices                    2023.5.0      pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   xz                             5.2.6         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   yaml                           0.2.5         h7f98852_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   yarl                           1.9.2         py38h01eb140_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zeromq                         4.3.4         h9c3ff4c_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zict                           3.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zipp                           3.15.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zlib                           1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zstandard                      0.19.0        py38ha98ab4e_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |   zstd                           1.5.2         h3eb15da_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking gmpy2-2.1.2-py39h376b7d2_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2705  Success - Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking markupsafe-2.1.3-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking wrapt-1.15.0-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pillow-9.5.0-py39haaeba84_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking regex-2023.6.3-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking tornado-6.3.2-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking psutil-5.9.5-py39h72bdee0_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking msgpack-python-1.0.5-py39h4b4f3f3_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyyaml-6.0-py39hb9d737c_5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking numpy-1.25.0-py39h6183b62_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking lz4-4.3.2-py39h724f13c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking cffi-1.15.1-py39he91dace_3\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking cytoolz-0.12.0-py39hb9d737c_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking coverage-7.2.7-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pydantic-1.10.9-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking yarl-1.9.2-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking sqlalchemy-1.4.48-py39hd1e30aa_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \u2b50 Run Main Run Tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking contourpy-1.1.0-py39h7633fee_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyarrow-12.0.1-py39hfbd5978_0_cpu\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking numcodecs-0.11.0-py39h227be39_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pandas-2.0.2-py39h40cae4c_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/lint        ] \ud83c\udfc1  Job failed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pynacl-1.5.0-py39hb9d737c_2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking bcrypt-3.2.2-py39hb9d737c_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking brotlipy-0.7.0-py39hb9d737c_1005\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking cryptography-41.0.1-py39hd4f0224_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsonschema-4.17.3-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aiosignal-1.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking ecdsa-0.18.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking sympy-1.12-pypyh9d50eac_103\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jinja2-3.1.2-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking werkzeug-2.3.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking dask-core-2023.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pytest-cov-4.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking zarr-2.15.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking xarray-2023.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking pyopenssl-23.2.0-pyhd8ed1ab_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking paramiko-3.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking openapi-schema-validator-0.4.4-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking sshpubkeys-3.3.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking python-jose-3.3.0-pyh6c4a22f_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking bokeh-3.2.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[tar-xz-4096] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-bz2-False-False] PASSED [  7%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[libarchive-128] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-xz-True-True] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[libarchive-512] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-xz-True-False] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking flask-2.3.2-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking flask_cors-3.0.10-pyhd3deb0d_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking requests-2.31.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking botocore-1.29.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking distributed-2023.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking jsonschema-spec-0.1.6-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking responses-0.23.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking docker-py-6.1.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking s3transfer-0.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-xray-sdk-2.12.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking dask-2023.6.1-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking openapi-spec-validator-0.5.7-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking boto3-1.26.76-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aws-sam-translator-1.70.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking cfn-lint-0.77.10-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking moto-4.1.12-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_isdir_isfile[libarchive-4096] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-xz-False-True] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[tar-xz-False-False] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[libarchive-True-True] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[libarchive-True-False] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[libarchive-False-True] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_archive.py::TestAnyArchive::test_walk[libarchive-False-False] PASSED [  8%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_idempotent PASSED      [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ============================= test session starts ==============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | platform linux -- Python 3.8.17, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/test_env/bin/python3.8\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | cachedir: .pytest_cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | configfile: pyproject.toml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | plugins: mock-3.11.1, vcr-1.0.2, cov-4.1.0, benchmark-4.0.0, anyio-3.7.0, asyncio-0.21.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | asyncio: mode=strict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aiohttp-3.8.4-py39hd1e30aa_1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/typecheck   ] \ud83c\udfc1  Job succeeded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking aiobotocore-2.5.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Linking s3fs-2023.6.0-pyhd8ed1ab_0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | collecting ... collected 0 items / 1 error\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ==================================== ERRORS ====================================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ________________________ ERROR collecting test session _________________________\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/site-packages/_pytest/config/__init__.py:642: in _importconftest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     mod = import_path(conftestpath, mode=importmode, root=rootpath)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/site-packages/_pytest/pathlib.py:565: in import_path\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     importlib.import_module(module_name)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | /home/runneradmin/micromamba-root/envs/test_env/lib/python3.8/importlib/__init__.py:127: in import_module\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     return _bootstrap._gcd_import(name[level:], package, level)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:1014: in _gcd_import\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:991: in _find_and_load\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:961: in _find_and_load_unlocked\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:219: in _call_with_frames_removed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:1014: in _gcd_import\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:991: in _find_and_load\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:961: in _find_and_load_unlocked\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:219: in _call_with_frames_removed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:1014: in _gcd_import\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:991: in _find_and_load\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:975: in _find_and_load_unlocked\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:671: in _load_unlocked\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap_external>:843: in exec_module\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | <frozen importlib._bootstrap>:219: in _call_with_frames_removed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     ???\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | gcsfs/gcsfs/__init__.py:5: in <module>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     from .core import GCSFileSystem\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | gcsfs/gcsfs/core.py:25: in <module>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     from .checkers import get_consistency_checker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | gcsfs/gcsfs/checkers.py:6: in <module>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     from .retry import ChecksumError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | gcsfs/gcsfs/retry.py:7: in <module>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   |     import google.auth.exceptions\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | E   ModuleNotFoundError: No module named 'google'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/report.xml -\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | =========================== short test summary info ============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ERROR  - ModuleNotFoundError: No module named 'google'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | !!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | =============================== 1 error in 0.68s ===============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u274c  Failure - Main Run Tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Installing build dependencies: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Checking if build backend supports build_editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_blockcache_workflow PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] exitcode '2': failure\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Checking if build backend supports build_editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Getting requirements to build editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \u2b50 Run Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Getting requirements to build editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Preparing editable metadata (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::group::Deinitializing micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Cache Paths:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Archive Path: /tmp/62922adb-189e-4810-a9f2-f30fad71e949/cache.tzst\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec --files-from manifest.txt --use-compress-program zstdmt\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::File Size: 5437506\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Reserving Cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \ud83d\udea7  ::warning::Failed to save: {\"error\":\"already exist\"}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2705  Success - Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Building wheels for collected packages: fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Building editable for fsspec (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Transaction finished\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | To activate this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     micromamba activate test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Or to execute a single command in this environment, use:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     micromamba run -n test_env mycommand\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | --- Contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # !! Contents within this block are managed by 'mamba init' !!\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | if [ $? -eq 0 ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     eval \"$__mamba_setup\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     else\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | fi\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | unset __mamba_setup\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | set -eo pipefail; micromamba activate test_env;\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | --- End contents of /home/runneradmin/.bash_profile ---\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_workflow[filecache] PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Building editable for fsspec (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Created wheel for fsspec: filename=fsspec-2023.6.0+4.g348d4ab-0.editable-py3-none-any.whl size=5759 sha256=e30cdf49aaa86c605e2c234028eb361a71b5a4f3af1349a6c08cf18a296eebf5\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-lr5rm30h/wheels/f0/ff/64/1ae53da889196741bb1a61e0ac5b65da376bb9b38d1f90db66\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Successfully built fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Installing collected packages: fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Successfully installed fsspec-2023.6.0+4.g348d4ab\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | {\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"channels\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/test_env\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"environment\": \"test_env (active)\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"libmamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"micromamba version\": \"1.4.4\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"platform\": \"linux-64\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"populated config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"/home/runneradmin/.condarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"user config files\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"/home/runneradmin/.mambarc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     ],\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     \"virtual packages\": [\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"__unix=0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"__linux=5.4.0=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"__glibc=2.31=0\",\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         \"__archspec=1=x86_64\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     ]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | }\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::group::Environment info\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                                            __\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |           __  ______ ___  ____ _____ ___  / /_  ____ _\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |          / / / / __ `__ \\/ __ `/ __ `__ \\/ __ \\/ __ `/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |         / /_/ / / / / / / /_/ / / / / / / /_/ / /_/ /\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |        / .___/_/ /_/ /_/\\__,_/_/ /_/ /_/_.___/\\__,_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       /_/\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_workflow[blockcache] PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |             environment : test_env (active)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |            env location : /home/runneradmin/micromamba-root/envs/test_env\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       user config files : /home/runneradmin/.mambarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |  populated config files : /home/runneradmin/.condarc\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |        libmamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |      micromamba version : 1.4.4\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |        virtual packages : __unix=0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                           __linux=5.4.0=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                           __glibc=2.31=0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                           __archspec=1=x86_64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                           https://conda.anaconda.org/conda-forge/noarch\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |        base environment : /home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |                platform : linux-64\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/gcsfs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Preparing metadata (setup.py): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Preparing metadata (setup.py): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/test_env\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Name                      Version       Build                Channel    \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   _libgcc_mutex             0.1           conda_forge          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   _openmp_mutex             4.5           2_gnu                conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aiobotocore               2.5.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aiohttp                   3.8.4         py39hd1e30aa_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aioitertools              0.11.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aiosignal                 1.3.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   asciitree                 0.3.3         py_2                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   async-timeout             4.0.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   attrs                     23.1.0        pyh71513ae_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-auth                0.6.28        hccec9ca_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-cal                 0.5.27        hf85dbcb_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-common              0.8.20        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-compression         0.2.17        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-event-stream        0.3.0         hc5de78f_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-http                0.7.8         h412fb1b_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-io                  0.13.26       h0d05201_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-mqtt                0.8.13        ha5d9b87_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-s3                  0.3.4         h95e21fb_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-c-sdkutils            0.1.10        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-checksums             0.1.16        h4b87b72_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-crt-cpp               0.20.2        h5289e1f_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-sam-translator        1.70.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-sdk-cpp               1.10.57       h8101662_14          conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   aws-xray-sdk              2.12.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   bcrypt                    3.2.2         py39hb9d737c_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   blinker                   1.6.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   bokeh                     3.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   boto3                     1.26.76       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   botocore                  1.29.76       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   brotlipy                  0.7.0         py39hb9d737c_1005    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   bzip2                     1.0.8         h7f98852_4           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   c-ares                    1.19.1        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   ca-certificates           2023.5.7      hbcca054_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   certifi                   2023.5.7      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   cffi                      1.15.1        py39he91dace_3       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   cfn-lint                  0.77.10       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   charset-normalizer        3.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   click                     8.1.3         unix_pyhd8ed1ab_2    conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   cloudpickle               2.2.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   colorama                  0.4.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   contourpy                 1.1.0         py39h7633fee_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   coverage                  7.2.7         py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   cryptography              41.0.1        py39hd4f0224_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   cytoolz                   0.12.0        py39hb9d737c_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   dask                      2023.6.1      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   dask-core                 2023.6.1      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   distributed               2023.6.1      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   docker-py                 6.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   ecdsa                     0.18.0        pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   entrypoints               0.4           pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   exceptiongroup            1.1.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   execnet                   1.9.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   fasteners                 0.17.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   flask                     2.3.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   flask_cors                3.0.10        pyhd3deb0d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   freetype                  2.12.1        hca18f0e_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   frozenlist                1.3.3         py39hb9d737c_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   fsspec                    2023.6.0      pyh1a96a4e_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   gflags                    2.2.2         he1b5a44_1004        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   glog                      0.6.0         h6f12383_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   gmp                       6.2.1         h58526e2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   gmpy2                     2.1.2         py39h376b7d2_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   graphql-core              3.2.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   greenlet                  2.0.2         py39h3d6467e_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   idna                      3.4           pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   importlib-metadata        6.7.0         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   importlib_metadata        6.7.0         hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   importlib_resources       5.12.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   iniconfig                 2.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   itsdangerous              2.1.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jinja2                    3.1.2         pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jmespath                  1.0.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jschema-to-python         1.2.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsondiff                  2.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsonpatch                 1.32          pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsonpickle                2.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsonpointer               2.0           py_0                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsonschema                4.17.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   jsonschema-spec           0.1.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   junit-xml                 1.9           pyh9f0ad1d_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   keyutils                  1.6.1         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   krb5                      1.20.1        h81ceb04_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   lazy-object-proxy         1.9.0         py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   lcms2                     2.15          haa2dc70_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   ld_impl_linux-64          2.40          h41732ed_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   lerc                      4.0.0         h27087fc_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libabseil                 20230125.2    cxx17_h59595ed_2     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libarrow                  12.0.1        hc410076_0_cpu       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libblas                   3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libbrotlicommon           1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libbrotlidec              1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libbrotlienc              1.0.9         h166bdaf_9           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libcblas                  3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libcrc32c                 1.1.2         h9c3ff4c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libcurl                   8.1.2         h409715c_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libdeflate                1.18          h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libedit                   3.1.20191231  he28a2e2_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libev                     4.33          h516909a_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libevent                  2.1.12        hf998b51_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libffi                    3.4.2         h7f98852_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgcc-ng                 13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgfortran-ng            13.1.0        h69a702a_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgfortran5              13.1.0        h15d22d2_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgomp                   13.1.0        he5830b7_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgoogle-cloud           2.12.0        hac9eb74_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libgrpc                   1.54.2        hb20ce57_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libjpeg-turbo             2.1.5.1       h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   liblapack                 3.9.0         17_linux64_openblas  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libnghttp2                1.52.0        h61bc06f_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libnsl                    2.0.0         h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libnuma                   2.0.16        h0b41bf4_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libopenblas               0.3.23        pthreads_h80387f5_0  conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libpng                    1.6.39        h753d276_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libprotobuf               3.21.12       h3eb15da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libsodium                 1.0.18        h36c2ea0_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libsqlite                 3.42.0        h2797004_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libssh2                   1.11.0        h0841786_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libstdcxx-ng              13.1.0        hfd8a6a1_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libthrift                 0.18.1        h8fd135c_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libtiff                   4.5.1         h8b53f26_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libutf8proc               2.8.0         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libuuid                   2.38.1        h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libwebp-base              1.3.0         h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libxcb                    1.15          h0b41bf4_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   libzlib                   1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   locket                    1.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   lz4                       4.3.2         py39h724f13c_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   lz4-c                     1.9.4         hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   markupsafe                2.1.3         py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   moto                      4.1.12        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   mpc                       1.3.1         hfe3b2da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   mpfr                      4.2.0         hb012696_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   mpmath                    1.3.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   msgpack-python            1.0.5         py39h4b4f3f3_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   multidict                 6.0.4         py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   ncurses                   6.4           hcb278e6_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   networkx                  2.8.8         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   numcodecs                 0.11.0        py39h227be39_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   numpy                     1.25.0        py39h6183b62_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   openapi-schema-validator  0.4.4         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   openapi-spec-validator    0.5.7         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   openjpeg                  2.5.0         hfec8fc6_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   openssl                   3.1.1         hd590300_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   orc                       1.8.4         h2f23424_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   packaging                 23.1          pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pandas                    2.0.2         py39h40cae4c_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   paramiko                  3.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   partd                     1.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pathable                  0.4.3         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pbr                       5.11.1        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pillow                    9.5.0         py39haaeba84_1       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pip                       23.1.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pkgutil-resolve-name      1.3.10        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pluggy                    1.2.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   psutil                    5.9.5         py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pthread-stubs             0.4           h36c2ea0_1001        conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyarrow                   12.0.1        py39hfbd5978_0_cpu   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyasn1                    0.4.8         py_0                 conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pycparser                 2.21          pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pydantic                  1.10.9        py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pynacl                    1.5.0         py39hb9d737c_2       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyopenssl                 23.2.0        pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyparsing                 3.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyrsistent                0.19.3        py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pysocks                   1.7.1         pyha2e5f31_6         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytest                    7.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytest-cov                4.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytest-rerunfailures      11.1.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytest-timeout            2.1.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytest-xdist              3.3.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   python                    3.9.16        h2782a2a_0_cpython   conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   python-dateutil           2.8.2         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   python-jose               3.3.0         pyh6c4a22f_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   python-tzdata             2023.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   python_abi                3.9           3_cp39               conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pytz                      2023.3        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pywin32-on-windows        0.1.0         pyh1179c8e_3         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   pyyaml                    6.0           py39hb9d737c_5       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   rdma-core                 28.9          h59595ed_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   re2                       2023.03.02    h8c504da_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   readline                  8.2           h8228510_1           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   regex                     2023.6.3      py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   requests                  2.31.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   responses                 0.23.1        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   rfc3339-validator         0.1.4         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   rsa                       4.9           pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   s2n                       1.3.45        h06160fa_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   s3fs                      2023.6.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   s3transfer                0.6.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   sarif-om                  1.0.4         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   setuptools                68.0.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   six                       1.16.0        pyh6c4a22f_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   snappy                    1.1.10        h9fff704_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   sortedcontainers          2.4.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   sqlalchemy                1.4.48        py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   sshpubkeys                3.3.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   sympy                     1.12          pypyh9d50eac_103     conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   tblib                     1.7.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   tk                        8.6.12        h27826a3_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   toml                      0.10.2        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   tomli                     2.0.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   toolz                     0.12.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   tornado                   6.3.2         py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   types-pyyaml              6.0.12.10     pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   typing-extensions         4.4.0         hd8ed1ab_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   typing_extensions         4.4.0         pyha770c72_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   tzdata                    2023c         h71feb2d_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   ucx                       1.14.1        hf587318_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   urllib3                   1.26.15       pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   websocket-client          1.6.1         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   werkzeug                  2.3.6         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   wheel                     0.40.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   wrapt                     1.15.0        py39h72bdee0_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xarray                    2023.6.0      pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xmltodict                 0.13.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xorg-libxau               1.0.11        hd590300_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xorg-libxdmcp             1.1.3         h7f98852_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xyzservices               2023.5.0      pyhd8ed1ab_1         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   xz                        5.2.6         h166bdaf_0           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   yaml                      0.2.5         h7f98852_2           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   yarl                      1.9.2         py39hd1e30aa_0       conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   zarr                      2.15.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   zict                      3.0.0         pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   zipp                      3.15.0        pyhd8ed1ab_0         conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   zlib                      1.2.13        hd590300_5           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   zstd                      1.5.2         h3eb15da_6           conda-forge\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Installing collected packages: gcsfs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |   Running setup.py develop for gcsfs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_glob[simplecache] PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Local install\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Successfully installed gcsfs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2705  Success - Main Install\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Main Test\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_glob[blockcache] PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_write PASSED           [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_clear PASSED           [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/4] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing build dependencies: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | platform linux -- Python 3.9.16, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/test_env/bin/python3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | cachedir: .pytest_cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | benchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/gcsfs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | configfile: setup.cfg\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | plugins: mock-3.11.1, vcr-1.0.2, cov-4.1.0, benchmark-4.0.0, asyncio-0.21.0, timeout-2.1.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | asyncio: mode=strict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | timeout: 600.0s\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | timeout method: signal\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | timeout func_only: False\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_clear_expired PASSED   [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_pop PASSED             [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_write_pickle_context PASSED [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1mcollecting ... \u001b[0mcollected 138 items\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_validate_headers[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  0%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_validate_headers[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  1%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  2%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  2%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker2-hello world-hello world-raises2] \u001b[32mPASSED\u001b[0m\u001b[32m [  3%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_http_response[checker3-hello world-different size-raises3] \u001b[32mPASSED\u001b[0m\u001b[32m [  4%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker0-hello world-different checksum-raises0] \u001b[32mPASSED\u001b[0m\u001b[32m [  5%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker1-hello world-hello world-raises1] \u001b[32mPASSED\u001b[0m\u001b[32m [  5%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker2-hello world-hello world-raises2] \u001b[32mPASSED\u001b[0m\u001b[32m [  6%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_checkers.py::test_checker_validate_json_response[checker3-hello world-different size-raises3] \u001b[32mPASSED\u001b[0m\u001b[32m [  7%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_simple \u001b[31mERROR\u001b[0m\u001b[31m                        [  7%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_many_connect \u001b[31mERROR\u001b[0m\u001b[31m                  [  8%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_many_connect_new \u001b[31mERROR\u001b[0m\u001b[31m              [  9%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_simple_upload \u001b[31mERROR\u001b[0m\u001b[31m                 [ 10%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_large_upload \u001b[31mERROR\u001b[0m\u001b[31m                  [ 10%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_multi_upload \u001b[31mERROR\u001b[0m\u001b[31m                  [ 11%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_info \u001b[31mERROR\u001b[0m\u001b[31m                          [ 12%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls2 \u001b[31mERROR\u001b[0m\u001b[31m                           [ 13%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_pickle \u001b[31mERROR\u001b[0m\u001b[31m                        [ 13%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_blocksize PASSED       [  9%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls_touch \u001b[31mERROR\u001b[0m\u001b[31m                      [ 14%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_rm \u001b[31mERROR\u001b[0m\u001b[31m                            [ 15%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_rm_batch \u001b[31mERROR\u001b[0m\u001b[31m                      [ 15%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_rm_recursive \u001b[31mERROR\u001b[0m\u001b[31m                  [ 16%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_rm_chunked_batch \u001b[31mERROR\u001b[0m\u001b[31m              [ 17%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/3.8-pytest  ] \ud83c\udfc1  Job failed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_file_access \u001b[31mERROR\u001b[0m\u001b[31m                   [ 18%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_file_info \u001b[31mERROR\u001b[0m\u001b[31m                     [ 18%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_du \u001b[31mERROR\u001b[0m\u001b[31m                            [ 19%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls \u001b[31mERROR\u001b[0m\u001b[31m                            [ 20%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls_detail \u001b[31mERROR\u001b[0m\u001b[31m                     [ 21%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_gcs_glob \u001b[31mERROR\u001b[0m\u001b[31m                      [ 21%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_read_keys_from_bucket \u001b[31mERROR\u001b[0m\u001b[31m         [ 22%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_url \u001b[31mERROR\u001b[0m\u001b[31m                           [ 23%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_seek \u001b[31mERROR\u001b[0m\u001b[31m                          [ 23%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bad_open \u001b[31mERROR\u001b[0m\u001b[31m                      [ 24%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_copy \u001b[31mERROR\u001b[0m\u001b[31m                          [ 25%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_blockcache_multiinstance PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_copy_recursive \u001b[31mERROR\u001b[0m\u001b[31m                [ 26%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_copy_errors \u001b[31mERROR\u001b[0m\u001b[31m                   [ 26%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_move \u001b[31mERROR\u001b[0m\u001b[31m                          [ 27%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_cat_file \u001b[31mERROR\u001b[0m\u001b[31m                      [ 28%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put[None] \u001b[31mERROR\u001b[0m\u001b[31m                 [ 28%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put[size] \u001b[31mERROR\u001b[0m\u001b[31m                 [ 29%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put[md5] \u001b[31mERROR\u001b[0m\u001b[31m                  [ 30%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put[crc32c] \u001b[31mERROR\u001b[0m\u001b[31m               [ 31%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_list \u001b[31mERROR\u001b[0m\u001b[31m                  [ 31%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_recursive[] \u001b[31mERROR\u001b[0m\u001b[31m           [ 32%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing build dependencies: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Checking if build backend supports build_editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_recursive[gs:/] \u001b[31mERROR\u001b[0m\u001b[31m       [ 33%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_recursive[gcs:/] \u001b[31mERROR\u001b[0m\u001b[31m      [ 34%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Checking if build backend supports build_editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Getting requirements to build editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_file_in_dir[] \u001b[31mERROR\u001b[0m\u001b[31m         [ 34%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_file_in_dir[gs:/] \u001b[31mERROR\u001b[0m\u001b[31m     [ 35%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_put_file_in_dir[gcs:/] \u001b[31mERROR\u001b[0m\u001b[31m    [ 36%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_metadata_save_blocked PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_creates_dir_if_needed[filecache] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_special_characters_filename \u001b[31mERROR\u001b[0m\u001b[31m   [ 36%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_creates_dir_if_needed[simplecache] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_creates_dir_if_needed[blockcache] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[filecache-True] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_slash_filename \u001b[31mERROR\u001b[0m\u001b[31m                [ 37%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[filecache-False] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[simplecache-True] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_hash_filename \u001b[31mERROR\u001b[0m\u001b[31m                 [ 38%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[simplecache-False] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[blockcache-True] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_get_mapper[blockcache-False] PASSED [ 10%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_basic PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_does_not_change_when_original_data_changed PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_gets_from_original_if_cache_deleted PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_local_filecache_with_new_cache_location_makes_a_new_copy PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_filecache_multicache PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_filecache_multicache_with_same_file_different_data_reads_from_first[filecache] PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_errors \u001b[31mERROR\u001b[0m\u001b[31m                        [ 39%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_filecache_multicache_with_same_file_different_data_reads_from_first[simplecache] PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_read_small \u001b[31mERROR\u001b[0m\u001b[31m                    [ 39%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Getting requirements to build editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing editable metadata (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_seek_delimiter \u001b[31mERROR\u001b[0m\u001b[31m                [ 40%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_read_block \u001b[31mERROR\u001b[0m\u001b[31m                    [ 41%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_filecache_with_checks PASSED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[local-filecache] SKIPPED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[local-simplecache] SKIPPED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[local-blockcache] SKIPPED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[multi-filecache] SKIPPED [ 11%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[multi-simplecache] SKIPPED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_takes_fs_instance[multi-blockcache] SKIPPED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_flush \u001b[31mERROR\u001b[0m\u001b[31m                         [ 42%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_add_file_to_cache_after_save PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_write_fails \u001b[31mERROR\u001b[0m\u001b[31m                   [ 42%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_write_blocks \u001b[31mERROR\u001b[0m\u001b[31m                  [ 43%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_write_blocks2 \u001b[31mERROR\u001b[0m\u001b[31m                 [ 44%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_readline \u001b[31mERROR\u001b[0m\u001b[31m                      [ 44%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_readline_from_cache \u001b[31mERROR\u001b[0m\u001b[31m           [ 45%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_readline_empty \u001b[31mERROR\u001b[0m\u001b[31m                [ 46%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_readline_blocksize \u001b[31mERROR\u001b[0m\u001b[31m            [ 47%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_next \u001b[31mERROR\u001b[0m\u001b[31m                          [ 47%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_iterable \u001b[31mERROR\u001b[0m\u001b[31m                      [ 48%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Building wheels for collected packages: fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Building editable for fsspec (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime] \u001b[31mERROR\u001b[0m\u001b[31m [ 49%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl] \u001b[31mERROR\u001b[0m\u001b[31m [ 50%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_fixed_key_metadata[content_encoding-gzip-contentEncoding] \u001b[31mERROR\u001b[0m\u001b[31m [ 50%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_fixed_key_metadata[content_language-en-contentLanguage] \u001b[31mERROR\u001b[0m\u001b[31m [ 51%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition] \u001b[31mERROR\u001b[0m\u001b[31m [ 52%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_readable \u001b[31mERROR\u001b[0m\u001b[31m                      [ 52%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_seekable \u001b[31mERROR\u001b[0m\u001b[31m                      [ 53%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_writable \u001b[31mERROR\u001b[0m\u001b[31m                      [ 54%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_merge \u001b[31mERROR\u001b[0m\u001b[31m                         [ 55%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bigger_than_block_read \u001b[31mERROR\u001b[0m\u001b[31m        [ 55%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_current \u001b[31mERROR\u001b[0m\u001b[31m                       [ 56%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_array \u001b[31mERROR\u001b[0m\u001b[31m                         [ 57%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Building editable for fsspec (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Created wheel for fsspec: filename=fsspec-3000-0.editable-py3-none-any.whl size=5485 sha256=199f2b2be587812a9c441f824527cbb8ee20d24ec38ea31d322a868361ece1b2\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-m8p4e2t8/wheels/f0/ff/64/1ae53da889196741bb1a61e0ac5b65da376bb9b38d1f90db66\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Successfully built fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_attrs \u001b[31mERROR\u001b[0m\u001b[31m                         [ 57%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_cached_open_close_read PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_with_compression[gzip-filecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_with_compression[gzip-simplecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_request_user_project \u001b[31mERROR\u001b[0m\u001b[31m          [ 58%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_with_compression[bz2-filecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_with_compression[bz2-simplecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_again[simplecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_request_user_project_string \u001b[31mERROR\u001b[0m\u001b[31m   [ 59%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_again[filecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cache[simplecache] PASSED [ 12%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_request_header \u001b[31mERROR\u001b[0m\u001b[31m                [ 60%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_user_project_fallback_google_default \u001b[32mPASSED\u001b[0m\u001b[31m [ 60%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cache[filecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_user_project_cat \u001b[31mERROR\u001b[0m\u001b[31m              [ 61%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_raise_on_project_mismatch \u001b[32mPASSED\u001b[0m\u001b[31m    [ 62%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls_prefix_cache \u001b[31mERROR\u001b[0m\u001b[31m               [ 63%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_placeholder_dir_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m [ 63%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_pipe_small_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m     [ 64%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_put_small_cache_validity \u001b[31mERROR\u001b[0m\u001b[31m      [ 65%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_pseudo_dir_find \u001b[31mERROR\u001b[0m\u001b[31m               [ 65%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_zero_cache_timeout \u001b[31mERROR\u001b[0m\u001b[31m            [ 66%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_find_with_prefix_partial_cache[False] \u001b[31mERROR\u001b[0m\u001b[31m [ 67%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_find_with_prefix_partial_cache[True] \u001b[31mERROR\u001b[0m\u001b[31m [ 68%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_find_dircache \u001b[31mERROR\u001b[0m\u001b[31m                 [ 68%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_percent_file_name \u001b[31mERROR\u001b[0m\u001b[31m             [ 69%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bucket_location[None] \u001b[31mERROR\u001b[0m\u001b[31m         [ 70%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bucket_location[US] \u001b[31mERROR\u001b[0m\u001b[31m           [ 71%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Installing collected packages: fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Attempting uninstall: fsspec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Found existing installation: fsspec 2023.6.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Uninstalling fsspec-2023.6.0:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       Successfully uninstalled fsspec-2023.6.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bucket_location[EUROPE-WEST3] \u001b[31mERROR\u001b[0m\u001b[31m [ 71%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | s3fs 2023.6.0 requires fsspec==2023.6.0, but you have fsspec 3000 which is incompatible.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Successfully installed fsspec-3000\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bucket_location[europe-west3] \u001b[31mERROR\u001b[0m\u001b[31m [ 72%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_bucket_default_location_overwrite \u001b[31mERROR\u001b[0m\u001b[31m [ 73%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_dir_marker \u001b[31mERROR\u001b[0m\u001b[31m                    [ 73%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_mkdir_with_path \u001b[31mERROR\u001b[0m\u001b[31m               [ 74%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Local install\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_deep_find_wthdirs \u001b[31mERROR\u001b[0m\u001b[31m             [ 75%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_info_versioned \u001b[31mERROR\u001b[0m\u001b[31m                [ 76%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_cat_versioned \u001b[31mERROR\u001b[0m\u001b[31m                 [ 76%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cat[simplecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_cp_versioned \u001b[31mERROR\u001b[0m\u001b[31m                  [ 77%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_ls_versioned \u001b[31mERROR\u001b[0m\u001b[31m                  [ 78%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_find_versioned \u001b[31mERROR\u001b[0m\u001b[31m                [ 78%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_cp_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m        [ 79%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_get_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m       [ 80%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_put_directory_recursive \u001b[31mERROR\u001b[0m\u001b[31m       [ 81%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_cp_two_files \u001b[31mERROR\u001b[0m\u001b[31m                  [ 81%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Clone s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_multiglob \u001b[31mERROR\u001b[0m\u001b[31m                     [ 82%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_core.py::test_expiry_keyword \u001b[32mPASSED\u001b[0m\u001b[31m               [ 83%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/3] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cat[filecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cat[blockcache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cache_chain[simplecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_multi_cache_chain[filecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_strip[blockcache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_strip[simplecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_strip[filecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_cached_write[simplecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_cached_write[filecache] PASSED [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_expiry PASSED          [ 13%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_equality PASSED        [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_str PASSED             [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_cached.py::test_getitems_errors PASSED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_common.py::test_created[local] SKIPPED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_common.py::test_modified[local] SKIPPED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_common.py::test_modified[memory] SKIPPED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_common.py::test_modified[arrow] SKIPPED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dbfs.py::test_dbfs_file_listing PASSED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dbfs.py::test_dbfs_mkdir PASSED        [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dbfs.py::test_dbfs_write_and_read PASSED [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dbfs.py::test_dbfs_read_range PASSED   [ 14%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Cloning into 's3fs'...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dbfs.py::test_dbfs_read_range_chunked PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_dirfs[sync] PASSED      [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_dirfs[async] PASSED     [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[sync---] PASSED    [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[sync--foo-foo] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[sync-root--root] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[sync-root-foo-root/foo] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[async---] PASSED   [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[async--foo-foo] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[async-root--root] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_path[async-root-foo-root/foo] PASSED [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_sep[sync] PASSED        [ 15%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_sep[async] PASSED       [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_set_session PASSED      [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_rm_file PASSED    [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rm_file[sync] PASSED    [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rm_file[async] PASSED   [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_rm PASSED         [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rm[sync] PASSED         [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rm[async] PASSED        [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_cp_file PASSED    [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cp_file[sync] PASSED    [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cp_file[async] PASSED   [ 16%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_copy PASSED       [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_copy[sync] PASSED       [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_copy[async] PASSED      [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_pipe PASSED       [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_pipe[sync] PASSED       [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_pipe[async] PASSED      [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_cat_file PASSED   [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat_file[sync] PASSED   [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat_file[async] PASSED  [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_cat PASSED        [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat[sync] PASSED        [ 17%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat[async] PASSED       [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_cat_list PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat_list[sync] PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_cat_list[async] PASSED  [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_put_file PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_put_file[sync] PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_put_file[async] PASSED  [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_put PASSED        [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_put[sync] PASSED        [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_put[async] PASSED       [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_get_file PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_get_file[sync] PASSED   [ 18%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_get_file[async] PASSED  [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_get PASSED        [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_get[sync] PASSED        [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_get[async] PASSED       [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_isfile PASSED     [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_isfile[sync] PASSED     [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_isfile[async] PASSED    [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_isdir PASSED      [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_isdir[sync] PASSED      [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_isdir[async] PASSED     [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_size PASSED       [ 19%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_size[sync] PASSED       [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_size[async] PASSED      [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_exists PASSED     [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_exists[sync] PASSED     [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_exists[async] PASSED    [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_info PASSED       [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_info[sync] PASSED       [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_info[async] PASSED      [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_ls PASSED         [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_ls[sync] PASSED         [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_ls[async] PASSED        [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_ls_detail PASSED  [ 20%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_ls_detail[sync] PASSED  [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_ls_detail[async] PASSED [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_walk PASSED       [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_walk[sync] PASSED       [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_walk[async] PASSED      [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_glob PASSED       [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_glob[sync] PASSED       [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_glob[async] PASSED      [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_glob_detail PASSED [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_glob_detail[sync] PASSED [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_glob_detail[async] PASSED [ 21%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_du PASSED         [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_du[sync] PASSED         [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_du[async] PASSED        [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_du_granular PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_du_granular[sync] PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_du_granular[async] PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_find PASSED       [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_find[sync] PASSED       [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_find[async] PASSED      [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_find_detail PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_find_detail[sync] PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_find_detail[async] PASSED [ 22%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_expand_path PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_expand_path[sync] PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_expand_path[async] PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_expand_path_list PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_expand_path_list[sync] PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_expand_path_list[async] PASSED [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_mkdir PASSED      [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_mkdir[sync] PASSED      [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_mkdir[async] PASSED     [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_async_makedirs PASSED   [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_makedirs[sync] PASSED   [ 23%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_makedirs[async] PASSED  [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rmdir[sync] PASSED      [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_rmdir[async] PASSED     [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_mv_file[sync] PASSED    [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_mv_file[async] PASSED   [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_touch[sync] PASSED      [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_touch[async] PASSED     [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_created[sync] PASSED    [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_created[async] PASSED   [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_modified[sync] PASSED   [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_modified[async] PASSED  [ 24%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_sign[sync] PASSED       [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_sign[async] PASSED      [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_open[sync] PASSED       [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_open[async] PASSED      [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Clone s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_dirfs.py::test_from_url PASSED         [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Install s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/4] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_basic PASSED              [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_not_cached PASSED         [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing metadata (setup.py): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing metadata (setup.py): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Installing collected packages: s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Attempting uninstall: s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Found existing installation: s3fs 2023.6.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Uninstalling s3fs-2023.6.0:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       Successfully uninstalled s3fs-2023.6.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Running setup.py develop for s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_complex[bytes] PASSED     [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Successfully installed s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Install s3fs\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Run fsspec tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_complex[mmap] PASSED      [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/5] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_write_small PASSED        [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_credentials.py::test_googlecredentials_none \u001b[32mPASSED\u001b[0m\u001b[31m [ 84%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[] \u001b[32mPASSED\u001b[0m\u001b[31m [ 84%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_with_url PASSED           [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[incorrect.token] \u001b[32mPASSED\u001b[0m\u001b[31m [ 85%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_credentials.py::test_credentials_from_raw_token[xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] \u001b[32mPASSED\u001b[0m\u001b[31m [ 86%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_fuse.py::test_fuse \u001b[33mXFAIL\u001b[0m (Failing test not pr...)\u001b[31m [ 86%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_api \u001b[32mPASSED\u001b[0m\u001b[31m                       [ 87%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_simple \u001b[31mERROR\u001b[0m\u001b[31m                 [ 88%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_default_gcsfilesystem \u001b[31mERROR\u001b[0m\u001b[31m  [ 89%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_errors \u001b[31mERROR\u001b[0m\u001b[31m                 [ 89%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_with_data \u001b[31mERROR\u001b[0m\u001b[31m              [ 90%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_complex_keys \u001b[31mERROR\u001b[0m\u001b[31m           [ 91%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_clear_empty \u001b[31mERROR\u001b[0m\u001b[31m            [ 92%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_pickle \u001b[31mERROR\u001b[0m\u001b[31m                 [ 92%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_array \u001b[31mERROR\u001b[0m\u001b[31m                  [ 93%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_write_big[bytes] PASSED   [ 25%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_map_bytearray \u001b[31mERROR\u001b[0m\u001b[31m              [ 94%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_mapping.py::test_new_bucket \u001b[31mERROR\u001b[0m\u001b[31m                 [ 94%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_tempfile \u001b[32mPASSED\u001b[0m\u001b[31m                    [ 95%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_retriable_exception \u001b[32mPASSED\u001b[0m\u001b[31m         [ 96%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_validate_response \u001b[32mPASSED\u001b[0m\u001b[31m           [ 97%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_metadata_read_permissions[missing_with_get_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 97%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_metadata_read_permissions[missing_with_list_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 98%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_metadata_read_permissions[existing_with_get_perms] \u001b[31mERROR\u001b[0m\u001b[31m [ 99%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | gcsfs/gcsfs/tests/test_retry.py::test_metadata_read_permissions[existing_with_list_perms] \u001b[31mERROR\u001b[0m\u001b[31m [100%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ==================================== ERRORS ====================================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_simple _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ---------------------------- Captured stderr setup -----------------------------\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_many_connect ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_many_connect_new ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_simple_upload _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_large_upload ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_multi_upload ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_info __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_ls2 __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_pickle _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_ls_touch ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_rm ___________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_rm_batch ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_rm_recursive ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_rm_chunked_batch ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_file_access ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_file_info _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_du ___________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_ls ___________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_ls_detail _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_gcs_glob ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_read_keys_from_bucket _________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________________ ERROR at setup of test_url __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_seek __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_bad_open ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_copy __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_copy_recursive _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_copy_errors ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_move __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_cat_file ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[None] _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[size] _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put[md5] ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_get_put[crc32c] ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_get_put_list ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_get_put_recursive[] __________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_get_put_recursive[gs://] ________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_get_put_recursive[gcs://] _______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_get_put_file_in_dir[] _________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_get_put_file_in_dir[gs://] _______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_get_put_file_in_dir[gcs://] ______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_special_characters_filename ______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_slash_filename _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_hash_filename _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_errors _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_read_small _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_seek_delimiter _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_read_block _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_flush _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_write_fails ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_write_blocks ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_write_blocks2 _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_readline ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_readline_from_cache __________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_readline_empty _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_readline_blocksize ___________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_next __________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_iterable ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime] _\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl] _\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_encoding-gzip-contentEncoding] _\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_language-en-contentLanguage] _\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_ ERROR at setup of test_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition] _\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_readable ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_seekable ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_writable ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_merge _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_bigger_than_block_read _________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________________ ERROR at setup of test_current ________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_array _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________________ ERROR at setup of test_attrs _________________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_request_user_project __________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________ ERROR at setup of test_request_user_project_string ______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_request_header _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_user_project_cat ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_ls_prefix_cache ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________ ERROR at setup of test_placeholder_dir_cache_validity _____________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_pipe_small_cache_validity _______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_put_small_cache_validity ________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_pseudo_dir_find ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_zero_cache_timeout ___________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________ ERROR at setup of test_find_with_prefix_partial_cache[False] _________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________ ERROR at setup of test_find_with_prefix_partial_cache[True] __________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_find_dircache _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_percent_file_name ___________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_________________ ERROR at setup of test_bucket_location[None] _________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__________________ ERROR at setup of test_bucket_location[US] __________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________ ERROR at setup of test_bucket_location[EUROPE-WEST3] _____________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________ ERROR at setup of test_bucket_location[europe-west3] _____________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________ ERROR at setup of test_bucket_default_location_overwrite ___________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_dir_marker _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_mkdir_with_path ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_deep_find_wthdirs ___________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_info_versioned _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cat_versioned _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cp_versioned ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_ls_versioned ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_find_versioned _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_cp_directory_recursive _________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_get_directory_recursive ________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m________________ ERROR at setup of test_put_directory_recursive ________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_cp_two_files ______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_multiglob _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_simple _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ---------------------------- Captured stderr setup -----------------------------\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________ ERROR at setup of test_map_default_gcsfilesystem _______________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_errors _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_map_with_data _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___________________ ERROR at setup of test_map_complex_keys ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m____________________ ERROR at setup of test_map_clear_empty ____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_map_pickle _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_______________________ ERROR at setup of test_map_array _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m_____________________ ERROR at setup of test_map_bytearray _____________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m______________________ ERROR at setup of test_new_bucket _______________________\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m___ ERROR at setup of test_metadata_read_permissions[missing_with_get_perms] ___\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ---------------------------- Captured stderr setup -----------------------------\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json?all=1&filters=%7B%22name%22%3A%7B%22gcsfs_test%22%3Atrue%7D%7D\": dial unix /var/run/docker.sock: connect: permission denied\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[missing_with_list_perms] ___\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[existing_with_get_perms] ___\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m\u001b[1m__ ERROR at setup of test_metadata_read_permissions[existing_with_list_perms] __\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     @pytest.fixture(scope=\"module\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def docker_gcs():\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if \"STORAGE_EMULATOR_HOST\" in os.environ:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             # assume using real API or otherwise have a server already set up\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             yield os.getenv(\"STORAGE_EMULATOR_HOST\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             return\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         container = \"gcsfs_test\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         cmd = (\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"docker run -d -p 4443:4443 --name gcsfs_test fsouza/fake-gcs-server:latest -scheme \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"http -public-host http://localhost:4443 -external-url http://localhost:4443 \"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             \"-backend memory\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         )\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >       stop_docker(container)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:69: \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mgcsfs/gcsfs/tests/conftest.py\u001b[0m:52: in stop_docker\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     cid = subprocess.check_output(cmd).strip().decode()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:424: in check_output\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | input = None, capture_output = False, timeout = None, check = True\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | popenargs = (['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test'],)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | kwargs = {'stdout': -1}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | process = <Popen: returncode: 1 args: ['docker', 'ps', '-a', '-q', '--filter', 'name=g...>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | stdout = b'', stderr = None, retcode = 1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     def run(*popenargs,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             input=None, capture_output=False, timeout=None, check=False, **kwargs):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"Run command with arguments and return a CompletedProcess instance.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The returned instance will have attributes args, returncode, stdout and\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         stderr. By default, stdout and stderr are not captured, and those attributes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If check is True and the exit code was non-zero, it raises a\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         CalledProcessError. The CalledProcessError object will have the return code\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         in the returncode attribute, and output & stderr attributes if those streams\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         were captured.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         If timeout is given, and the process takes too long, a TimeoutExpired\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         exception will be raised.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         There is an optional argument \"input\", allowing you to\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         pass bytes or a string to the subprocess's stdin.  If you use this argument\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         you may not also use the Popen constructor's \"stdin\" argument, as\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         it will be used internally.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         By default, all communication is in bytes, and therefore any \"input\" should\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         be bytes, and the stdout and stderr will be bytes. If in text mode, any\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"input\" should be a string, and stdout and stderr will be strings decoded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         according to locale encoding, or by \"encoding\" if set. Text mode is\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         triggered by setting any of text, encoding, errors or universal_newlines.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         The other arguments are the same as for the Popen constructor.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         \"\"\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if input is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdin') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdin and input arguments may not both be used.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdin'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         if capture_output:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise ValueError('stdout and stderr arguments may not be used '\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                  'with capture_output.')\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stdout'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             kwargs['stderr'] = PIPE\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |     \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |         with Popen(*popenargs, **kwargs) as process:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             try:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 stdout, stderr = process.communicate(input, timeout=timeout)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except TimeoutExpired as exc:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 if _mswindows:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # Windows accumulates the output in a single blocking\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # read() call run on child threads, with the timeout\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # being done in a join() on those threads.  communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # _after_ kill() is required to collect that and add it\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # to the exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     exc.stdout, exc.stderr = process.communicate()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 else:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # POSIX _communicate already populated the output so\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     # far into the TimeoutExpired exception.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                     process.wait()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             except:  # Including KeyboardInterrupt, communicate handled that.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 process.kill()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 # We don't call process.wait() as .__exit__ does that for us.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                 raise\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             retcode = process.poll()\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |             if check and retcode:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | >               raise CalledProcessError(retcode, process.args,\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   |                                          output=stdout, stderr=stderr)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31mE               subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[1m\u001b[31m/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/subprocess.py\u001b[0m:528: CalledProcessError\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/report.xml -\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_simple\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_many_connect\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_many_connect_new\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_simple_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_large_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_multi_upload\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_info\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls2\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_pickle\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls_touch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_rm\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_rm_batch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_rm_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_rm_chunked_batch\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_file_access\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_file_info\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_du\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls_detail\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_gcs_glob\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_read_keys_from_bucket\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_url\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_seek\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bad_open\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_copy\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_copy_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_copy_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_move\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_cat_file\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put[None]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put[size]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put[md5]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put[crc32c]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_list\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[gs:/]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_recursive[gcs:/]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[gs:/]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_put_file_in_dir[gcs:/]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_special_characters_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_slash_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_hash_filename\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_read_small\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_seek_delimiter\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_read_block\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_flush\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_write_fails\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_write_blocks\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_write_blocks2\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_readline\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_readline_from_cache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_readline_empty\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_readline_blocksize\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_next\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_iterable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[custom_time-2021-10-21T17:00:00Z-customTime]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[cache_control-public, max-age=3600-cacheControl]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_encoding-gzip-contentEncoding]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_language-en-contentLanguage]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_fixed_key_metadata[content_disposition-Attachment; filename=sample.empty-contentDisposition]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_readable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_seekable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_writable\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_merge\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bigger_than_block_read\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_current\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_array\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_attrs\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_request_user_project\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_request_user_project_string\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_request_header\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_user_project_cat\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls_prefix_cache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_placeholder_dir_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_pipe_small_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_put_small_cache_validity\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_pseudo_dir_find\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_zero_cache_timeout\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_find_with_prefix_partial_cache[False]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_find_with_prefix_partial_cache[True]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_find_dircache\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_percent_file_name\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[None]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[US]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[EUROPE-WEST3]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bucket_location[europe-west3]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_bucket_default_location_overwrite\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_dir_marker\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_mkdir_with_path\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_deep_find_wthdirs\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_info_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_cat_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_cp_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_ls_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_find_versioned\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_cp_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_get_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_put_directory_recursive\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_cp_two_files\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_core.py::\u001b[1mtest_multiglob\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_simple\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_default_gcsfilesystem\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_errors\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_with_data\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_complex_keys\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_clear_empty\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_pickle\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_array\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_map_bytearray\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_mapping.py::\u001b[1mtest_new_bucket\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[missing_with_get_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[missing_with_list_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[existing_with_get_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31mERROR\u001b[0m gcsfs/gcsfs/tests/test_retry.py::\u001b[1mtest_metadata_read_permissions[existing_with_list_perms]\u001b[0m - subprocess.CalledProcessError: Command '['docker', 'ps', '-a', '-q', '--filter', 'name=gcsfs_test']' returned non-zero exit status 1.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | \u001b[31m================== \u001b[32m21 passed\u001b[0m, \u001b[33m1 xfailed\u001b[0m, \u001b[31m\u001b[1m116 errors\u001b[0m\u001b[31m in 18.37s\u001b[0m\u001b[31m ==================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u274c  Failure - Main Test\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_write_big[mmap] PASSED    [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] exitcode '1': failure\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \u2b50 Run Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_transaction PASSED        [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_transaction_with_cache PASSED [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_cat_get PASSED            [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_mkdir PASSED              [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ============================= test session starts ==============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | platform linux -- Python 3.9.16, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/test_env/bin/python3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | cachedir: .pytest_cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | configfile: pyproject.toml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | plugins: rerunfailures-11.1.2, xdist-3.3.1, cov-4.1.0, timeout-2.1.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_ftp.py::test_rm_get_recursive PASSED   [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list PASSED              [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_invalid_args PASSED [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache PASSED        [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache_with_expiry_time_cached PASSED [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache_with_expiry_time_purged PASSED [ 26%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache_reuse PASSED  [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_ls_raises_filenotfound PASSED [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache_with_max_paths PASSED [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_list_cache_with_skip_instance_cache PASSED [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_isdir PASSED             [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_policy_arg PASSED        [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_exists PASSED            [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_read PASSED              [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_file_pickle PASSED       [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_methods PASSED           [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers0] PASSED [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers1] PASSED [ 27%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers2] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers3] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers4] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers5] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers6] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers7] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_random_access[headers8] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_no_range_support[headers0] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_no_range_support[headers1] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_no_range_support[headers2] PASSED [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_stream_seek PASSED       [ 28%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_mapper_url PASSED        [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_content_length_zero PASSED [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_download PASSED          [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_multi_download PASSED    [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_ls PASSED                [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_mcat PASSED              [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_cat_file_range PASSED    [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_cat_file_range_numpy PASSED [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_mcat_cache PASSED        [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_mcat_expand PASSED       [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_info PASSED              [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_put_file[POST] PASSED    [ 29%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_put_file[PUT] PASSED     [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_docstring PASSED         [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_async_other_thread PASSED [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_async_this_thread PASSED [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | collecting ... collected 2 items\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_processes[spawn] PASSED  [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_processes[forkserver] PASSED [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_close[get_aiohttp] PASSED [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_close[get_proxy] PASSED  [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_async_file PASSED        [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_encoded PASSED           [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_with_cache PASSED        [ 30%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_async_expand_path PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_async_walk PASSED        [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | fsspec/tests/test_downstream.py::test_pandas PASSED                      [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_libarchive.py::test_cache PASSED       [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_urlpath_inference_strips_protocol PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_urlpath_inference_errors PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_urlpath_expand_read PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cats PASSED             [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_urlpath_expand_write PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_open_files PASSED       [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_open_files_text_mode[utf-8] PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_open_files_text_mode[ascii] PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[None-rt] PASSED [ 31%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[None-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[zip-rt] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[zip-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[bz2-rt] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[bz2-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[gzip-rt] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[gzip-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[lzma-rt] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[lzma-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[xz-rt] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[xz-rb] PASSED [ 32%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[snappy-rt] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[snappy-rb] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[lz4-rt] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[lz4-rb] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[zstd-rt] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_compressions[zstd-rb] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_bad_compression PASSED  [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_not_found PASSED        [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_isfile PASSED           [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_isdir PASSED            [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_open_files_write[compression_opener0] PASSED [ 33%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_open_files_write[compression_opener1] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_pickability_of_lazy_files PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_abs_paths PASSED        [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[+-/] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[+-\\\\] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[++-/] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[++-\\\\] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[(-/] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[(-\\\\] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[)-/] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[)-\\\\] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[|-/] PASSED [ 34%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[|-\\\\] PASSED [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[\\\\-/] PASSED [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_glob_weird_characters[\\\\-\\\\] PASSED [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_globfind_dirs PASSED    [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_touch PASSED            [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_touch_truncate PASSED   [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_directories PASSED      [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_file_ops[] PASSED       [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_file_ops[file://] PASSED [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_recursive_get_put PASSED [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_commit_discard PASSED   [ 35%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_make_path_posix PASSED  [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_linked_files PASSED     [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_linked_files_exists PASSED [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_linked_directories PASSED [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_isfilestore PASSED      [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_pickle PASSED           [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_strip_protocol_expanduser PASSED [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_strip_protocol_no_authority PASSED [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_mkdir_twice_faile PASSED [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_iterable PASSED         [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_mv_empty PASSED         [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_mv_recursive PASSED     [ 36%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_copy_errors PASSED      [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_transaction PASSED      [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_delete_cwd PASSED       [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_delete_non_recursive_dir_fails PASSED [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_infer_compression[open-.bz2] PASSED [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_infer_compression[open-.gz] PASSED [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_infer_compression[open-] PASSED [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_info_path_like PASSED   [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_seekable PASSED         [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_numpy_fromfile PASSED   [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_link PASSED             [ 37%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_symlink PASSED          [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_put_file_to_dir PASSED  [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_du PASSED               [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_directory_recursive[cp] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_directory_recursive[get] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_directory_recursive[put] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_empty_directory[cp] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_empty_directory[get] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_get_put_empty_directory[put] PASSED [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_local.py::test_cp_two_files PASSED     [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_1 PASSED               [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_strip PASSED           [ 38%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_ls PASSED              [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_directories PASSED     [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_mv_recursive PASSED    [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_mv_same_paths PASSED   [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_rm_no_psuedo_dir PASSED [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_rewind PASSED          [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_empty_raises PASSED    [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_dir_errors PASSED      [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_no_rewind_append_mode PASSED [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_moves PASSED           [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_rm_reursive_empty_subdir PASSED [ 39%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_seekable PASSED        [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_remove_all PASSED      [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_cp_directory_recursive PASSED [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_get_directory_recursive PASSED [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_put_directory_recursive PASSED [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_cp_empty_directory PASSED [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_memory.py::test_cp_two_files PASSED    [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_simple PASSED       [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_target_options PASSED [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_ls PASSED           [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_info PASSED         [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_mutable PASSED      [ 40%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_put_get PASSED      [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_put_get_single PASSED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_defaults PASSED     [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_spec1_expand SKIPPED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_spec1_expand_simple SKIPPED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_spec1_gen_variants SKIPPED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_empty SKIPPED (...) [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_get_sync PASSED     [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::group::Deinitializing micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_multi_fs_provided PASSED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_multi_fs_created PASSED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_missing_nonasync SKIPPED [ 41%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_fss_has_defaults PASSED [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_merging PASSED      [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_cat_file_ranges PASSED [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_cat_missing PASSED  [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_df_single SKIPPED   [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_df_multi SKIPPED    [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Cache Paths:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Archive Path: /tmp/6974bfa1-3987-4777-bd5c-ef40c3d9bf8c/cache.tzst\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec --files-from manifest.txt --use-compress-program zstdmt\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::File Size: 5437505\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Reserving Cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \ud83d\udea7  ::warning::Failed to save: {\"error\":\"already exist\"}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2705  Success - Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_reference.py::test_mapping_getitems PASSED [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_info PASSED               [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_compressions[tar] PASSED  [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_compressions[tar-gz] PASSED [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_compressions[tar-bz2] PASSED [ 42%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_compressions[tar-xz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_direct[tar] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_direct[tar-gz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_direct[tar-bz2] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_direct[tar-xz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_cached[tar] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_cached[tar-gz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_cached[tar-bz2] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_filesystem_cached[tar-xz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_direct[tar] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_direct[tar-gz] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_direct[tar-bz2] PASSED [ 43%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_direct[tar-xz] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_cached[tar] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_cached[tar-gz] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_cached[tar-bz2] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_url_to_fs_cached[tar-xz] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_ls_with_folders[tar] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_ls_with_folders[tar-gz] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_ls_with_folders[tar-bz2] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_tar.py::test_ls_with_folders[tar-xz] PASSED [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_pickle SKIPPED (h...) [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_simple SKIPPED (h...) [ 44%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_url SKIPPED (htcl...) [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_workflow SKIPPED      [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_with_gzip SKIPPED     [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_workflow_transaction SKIPPED [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_webhdfs.py::test_webhdfs_cp_file SKIPPED [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_info PASSED               [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_fsspec_get_mapper PASSED  [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_not_cached PASSED         [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_root_info PASSED          [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_write_seek PASSED         [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_rw PASSED                 [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_zip.py::test_mapper PASSED             [ 45%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_file_to_existing_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_file_to_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_file_to_file_in_existing_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_file_to_file_in_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_directory_to_existing_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_directory_to_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_glob_to_existing_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_glob_to_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_list_of_files_to_existing_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_list_of_files_to_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalCopy::test_copy_two_files_new_directory PASSED [ 46%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_file_to_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_file_to_new_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_file_to_file_in_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_file_to_file_in_new_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_directory_to_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_directory_to_new_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_glob_to_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_glob_to_new_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_list_of_files_to_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_list_of_files_to_new_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalGet::test_get_directory_recursive PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_file_to_existing_directory PASSED [ 47%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_file_to_new_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_file_to_file_in_existing_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_file_to_file_in_new_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_directory_to_existing_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_directory_to_new_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_glob_to_existing_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_glob_to_new_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_list_of_files_to_existing_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_list_of_files_to_new_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/local/local_test.py::TestLocalPut::test_put_directory_recursive PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_file_to_existing_directory PASSED [ 48%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_file_to_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_file_to_file_in_existing_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_file_to_file_in_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_directory_to_existing_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_directory_to_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_glob_to_existing_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_glob_to_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_list_of_files_to_existing_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_list_of_files_to_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryCopy::test_copy_two_files_new_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | fsspec/tests/test_downstream.py::test_xarray_zarr PASSED                 [100%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/report.xml -\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ============================== 2 passed in 6.43s ===============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_file_to_existing_directory PASSED [ 49%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_file_to_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_file_to_file_in_existing_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_file_to_file_in_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_directory_to_existing_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_directory_to_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_glob_to_existing_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_glob_to_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_list_of_files_to_existing_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_list_of_files_to_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryGet::test_get_directory_recursive PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_file_to_existing_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_file_to_new_directory PASSED [ 50%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_file_to_file_in_existing_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_file_to_file_in_new_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_directory_to_existing_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_directory_to_new_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_glob_to_existing_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_glob_to_new_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_list_of_files_to_existing_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_list_of_files_to_new_directory PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/memory/memory_test.py::TestMemoryPut::test_put_directory_recursive PASSED [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_idempotent PASSED                         [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_pickle PASSED                             [ 51%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_class_methods PASSED                      [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_multi PASSED                              [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_get_put PASSED                            [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_du PASSED                                 [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_head_tail PASSED                          [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_move PASSED                               [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_recursive_get_put PASSED                  [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_pipe_cat PASSED                           [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_read_block_delimiter PASSED               [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_open_text PASSED                          [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_read_text PASSED                          [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_write_text PASSED                         [ 52%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_chained_fs PASSED                         [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Run fsspec tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_multilevel_chained_fs XFAIL (see issu...) [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_multilevel_chained_fs_zip_zip_file PASSED [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_chained_equivalent PASSED                 [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_chained_fs_multi PASSED                   [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_chained_fo PASSED                         [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_url_to_fs PASSED                          [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_api.py::test_walk PASSED                               [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_methods PASSED                     [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_when_sync_methods_are_disabled PASSED   [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_interrupt PASSED                        [ 53%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_wrapper_timeout_on_less_than_expected_wait_time_not_finish_function PASSED [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main clone dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/6] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Cloning into 'dask'...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_wrapper_timeout_on_more_than_expected_wait_time_will_finish_function PASSED [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_wrapper_timeout_none_will_wait_func_finished PASSED [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/gcsfs-pytest] \ud83c\udfc1  Job failed\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_wrapper_treat_timeout_0_as_none PASSED [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_sync_wrapper_bad_multiple_sync PASSED   [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_run_coros_in_chunks PASSED              [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_windows_policy SKIPPED (only for wi...) [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_running_async PASSED                    [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_async_streamed_file_write PASSED        [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_async_streamed_file_read PASSED         [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[BaseCache] PASSED        [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[none] PASSED             [ 54%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[mmap] PASSED             [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[bytes] PASSED            [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[readahead] PASSED        [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[blockcache] PASSED       [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[first] PASSED            [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[all] PASSED              [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_getitem[background] PASSED       [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_block_cache_lru PASSED                 [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[BaseCache] PASSED     [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[none] PASSED          [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[mmap] PASSED          [ 55%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[bytes] PASSED         [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[readahead] PASSED     [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[blockcache] PASSED    [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[first] PASSED         [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[all] PASSED           [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_empty_file[background] PASSED    [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[BaseCache] PASSED     [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[none] PASSED          [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[mmap] PASSED          [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[bytes] PASSED         [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[readahead] PASSED     [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[blockcache] PASSED    [ 56%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[first] PASSED         [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[all] PASSED           [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_pickleable[background] PASSED    [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_first_cache PASSED                     [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-1-size_requests0] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-1-size_requests1] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-1-size_requests2] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-10-size_requests0] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-10-size_requests1] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-10-size_requests2] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-52-size_requests0] PASSED [ 57%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-52-size_requests1] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-52-size_requests2] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-100-size_requests0] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-100-size_requests1] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[BaseCache-100-size_requests2] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-1-size_requests0] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-1-size_requests1] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-1-size_requests2] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-10-size_requests0] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-10-size_requests1] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-10-size_requests2] PASSED [ 58%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-52-size_requests0] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-52-size_requests1] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-52-size_requests2] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-100-size_requests0] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-100-size_requests1] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[none-100-size_requests2] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-1-size_requests0] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-1-size_requests1] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-1-size_requests2] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-10-size_requests0] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-10-size_requests1] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-10-size_requests2] PASSED [ 59%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-52-size_requests0] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-52-size_requests1] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-52-size_requests2] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-100-size_requests0] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-100-size_requests1] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[mmap-100-size_requests2] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-1-size_requests0] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-1-size_requests1] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-1-size_requests2] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-10-size_requests0] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-10-size_requests1] PASSED [ 60%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-10-size_requests2] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-52-size_requests0] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-52-size_requests1] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-52-size_requests2] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-100-size_requests0] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-100-size_requests1] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[bytes-100-size_requests2] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-1-size_requests0] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-1-size_requests1] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-1-size_requests2] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-10-size_requests0] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-10-size_requests1] PASSED [ 61%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-10-size_requests2] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-52-size_requests0] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-52-size_requests1] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-52-size_requests2] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-100-size_requests0] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-100-size_requests1] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[readahead-100-size_requests2] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-1-size_requests0] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-1-size_requests1] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-1-size_requests2] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-10-size_requests0] PASSED [ 62%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-10-size_requests1] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-10-size_requests2] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-52-size_requests0] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-52-size_requests1] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-52-size_requests2] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-100-size_requests0] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-100-size_requests1] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[blockcache-100-size_requests2] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-1-size_requests0] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-1-size_requests1] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-1-size_requests2] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-10-size_requests0] PASSED [ 63%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-10-size_requests1] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-10-size_requests2] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-52-size_requests0] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-52-size_requests1] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-52-size_requests2] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-100-size_requests0] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-100-size_requests1] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[first-100-size_requests2] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-1-size_requests0] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-1-size_requests1] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-1-size_requests2] PASSED [ 64%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-10-size_requests0] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-10-size_requests1] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-10-size_requests2] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-52-size_requests0] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-52-size_requests1] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-52-size_requests2] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-100-size_requests0] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-100-size_requests1] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[all-100-size_requests2] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-1-size_requests0] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-1-size_requests1] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-1-size_requests2] PASSED [ 65%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-10-size_requests0] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-10-size_requests1] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-10-size_requests2] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-52-size_requests0] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-52-size_requests1] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-52-size_requests2] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-100-size_requests0] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-100-size_requests1] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_cache_basic[background-100-size_requests2] PASSED [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_known[True-True] PASSED                [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_known[True-False] PASSED               [ 66%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_known[False-True] PASSED               [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_known[False-False] PASSED              [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_background PASSED                      [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_caches.py::test_register_cache PASSED                  [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_callbacks.py::test_callbacks PASSED                    [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_callbacks.py::test_callbacks_as_callback PASSED        [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_callbacks.py::test_callbacks_wrap PASSED               [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_callbacks.py::test_tqdm_callback[tqdm_kwargs0] PASSED  [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_callbacks.py::test_tqdm_callback[tqdm_kwargs1] PASSED  [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_infer_custom_compression PASSED   [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_infer_uppercase_compression PASSED [ 67%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_lzma_compression_name PASSED      [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_lz4_compression PASSED            [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_zstd_compression PASSED           [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_compression.py::test_snappy_compression PASSED         [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_env_ignored PASSED                [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_env_kwargs PASSED                 [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_env_protocol_dict PASSED          [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_env_kwargs_override_protocol_dict PASSED [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_file_ini PASSED                   [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_from_file_json PASSED                  [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_config.py::test_apply PASSED                           [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths[path0-None-1-out0] PASSED   [ 68%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths[apath.*.csv-None-1-out1] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths[apath.*.csv-None-2-out2] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths[a*-<lambda>-2-out3] PASSED  [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths_if_needed_in_read_mode[create_files0-apath-out0] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths_if_needed_in_read_mode[create_files1-apath*-out1] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths_if_needed_in_read_mode[create_files2-apath*-out2] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths_if_needed_in_read_mode[create_files3-apath[1]-out3] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_paths_if_needed_in_read_mode[create_files4-apath?-out4] PASSED [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_expand_error PASSED                      [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_openfile_api PASSED                      [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_openfile_open PASSED                     [ 69%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_open_local PASSED                        [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_xz_lzma_compressions PASSED              [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_list PASSED                              [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_pathobject PASSED                        [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_automkdir PASSED                         [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_automkdir_readonly PASSED                [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_openfile_pickle_newline PASSED           [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_pickle_after_open_open PASSED            [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_mismatch PASSED                          [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_url_kwargs_chain PASSED                  [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_multi_context PASSED                     [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_not_local PASSED                         [ 70%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_url_to_fs PASSED                         [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_target_protocol_options PASSED           [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_core.py::test_chained_url PASSED                       [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_pickle PASSED                            [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_file_read_attributes PASSED              [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_seek PASSED                              [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_file_idempotent PASSED                   [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_file_text_attributes PASSED              [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_file_write_attributes PASSED             [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_midread_cache PASSED                     [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_read_block PASSED                        [ 71%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_with_gzip PASSED                         [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_auto_compression PASSED                  [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_file.py::test_with_zip PASSED                          [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_remote_async_ops PASSED               [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_touch_rm PASSED                       [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_cp_async_to_sync PASSED               [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_pipe_cat_sync PASSED                  [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_cat_async PASSED                      [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_generic.py::test_rsync PASSED                          [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_mapping_prefix PASSED                 [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_getitems_errors PASSED                [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_ops PASSED                            [ 72%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_pickle PASSED                         [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_keys_view PASSED                      [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_multi PASSED                          [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_setitem_types PASSED                  [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_setitem_numpy PASSED                  [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_empty_url PASSED                      [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_access_with_root_prefix PASSED  [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_non_str_keys[bytes] PASSED      [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_non_str_keys[int] PASSED        [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_non_str_keys[tuple] PASSED      [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_non_str_keys[list] PASSED       [ 73%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_error_on_protocol_keys PASSED   [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_mapping.py::test_fsmap_access_with_suffix PASSED       [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-0-None] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-0-columns1] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-0-columns2] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-0-columns3] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-64-None] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-64-columns1] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-64-columns2] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-64-64-columns3] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-0-None] PASSED [ 74%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-0-columns1] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-0-columns2] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-0-columns3] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-64-None] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-64-columns1] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-64-columns2] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-8-256000000-64-columns3] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-0-None] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-0-columns1] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-0-columns2] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-0-columns3] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-64-None] PASSED [ 75%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-64-columns1] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-64-columns2] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-64-64-columns3] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-0-None] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-0-columns1] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-0-columns2] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-0-columns3] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-64-None] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-64-columns1] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-64-columns2] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-True-1000-256000000-64-columns3] PASSED [ 76%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-0-None] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-0-columns1] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-0-columns2] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-0-columns3] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-64-None] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-64-columns1] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-64-columns2] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-64-64-columns3] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-0-None] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-0-columns1] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-0-columns2] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-0-columns3] PASSED [ 77%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-64-None] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-64-columns1] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-64-columns2] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-8-256000000-64-columns3] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-0-None] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-0-columns1] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-0-columns2] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-0-columns3] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-64-None] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-64-columns1] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-64-columns2] PASSED [ 78%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-64-64-columns3] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-0-None] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-0-columns1] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-0-columns2] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-0-columns3] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-64-None] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-64-columns1] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-64-columns2] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[fastparquet-False-1000-256000000-64-columns3] PASSED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-0-None] SKIPPED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-0-columns1] SKIPPED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-0-columns2] SKIPPED [ 79%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-0-columns3] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-64-None] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-64-columns1] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-64-columns2] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-64-64-columns3] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-0-None] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-0-columns1] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-0-columns2] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-0-columns3] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-64-None] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-64-columns1] SKIPPED [ 80%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-64-columns2] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-8-256000000-64-columns3] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-0-None] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-0-columns1] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-0-columns2] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-0-columns3] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-64-None] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-64-columns1] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-64-columns2] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-64-64-columns3] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-0-None] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-0-columns1] SKIPPED [ 81%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-0-columns2] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-0-columns3] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-64-None] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-64-columns1] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-64-columns2] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-True-1000-256000000-64-columns3] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-0-None] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-0-columns1] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-0-columns2] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-0-columns3] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-64-None] SKIPPED [ 82%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-64-columns1] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-64-columns2] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-64-64-columns3] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-0-None] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-0-columns1] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-0-columns2] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-0-columns3] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-64-None] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-64-columns1] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-64-columns2] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-8-256000000-64-columns3] SKIPPED [ 83%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-0-None] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-0-columns1] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-0-columns2] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-0-columns3] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-64-None] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-64-columns1] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-64-columns2] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-64-64-columns3] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-0-None] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-0-columns1] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-0-columns2] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-0-columns3] SKIPPED [ 84%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-64-None] SKIPPED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-64-columns1] SKIPPED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-64-columns2] SKIPPED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[pyarrow-False-1000-256000000-64-columns3] SKIPPED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-0-None] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-0-columns1] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-0-columns2] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-0-columns3] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-64-None] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-64-columns1] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-64-columns2] PASSED [ 85%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-64-64-columns3] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-0-None] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-0-columns1] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-0-columns2] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-0-columns3] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-64-None] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-64-columns1] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-64-columns2] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-8-256000000-64-columns3] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-0-None] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-0-columns1] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-0-columns2] PASSED [ 86%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-0-columns3] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-64-None] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-64-columns1] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-64-columns2] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-64-64-columns3] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-0-None] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-0-columns1] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-0-columns2] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-0-columns3] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-64-None] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-64-columns1] PASSED [ 87%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-64-columns2] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-True-1000-256000000-64-columns3] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-0-None] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-0-columns1] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-0-columns2] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-0-columns3] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-64-None] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-64-columns1] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-64-columns2] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-64-64-columns3] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-0-None] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-0-columns1] PASSED [ 88%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-0-columns2] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-0-columns3] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-64-None] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-64-columns1] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-64-columns2] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-8-256000000-64-columns3] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-0-None] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-0-columns1] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-0-columns2] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-0-columns3] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-64-None] PASSED [ 89%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-64-columns1] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-64-columns2] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-64-64-columns3] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-0-None] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-0-columns1] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-0-columns2] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-0-columns3] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-64-None] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-64-columns1] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-64-columns2] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py::test_open_parquet_file[auto-False-1000-256000000-64-columns3] PASSED [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_registry_readonly PASSED             [ 90%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_register_cls PASSED                  [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_register_str PASSED                  [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_register_fail PASSED                 [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_entry_points_registered_on_import PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_registry.py::test_filesystem_warning_arrow_hdfs_deprecated PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-01/a.parquet-expected0] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-01/*-expected1] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-expected2] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-0[1-4]-expected3] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-0[1-4]/*-expected4] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://top_level/second_level/date=2019-10-0[1-4]/[a].*-expected5] PASSED [ 91%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://glob_test/hat/^foo.*-expected6] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://glob_test/dollar/$foo.*-expected7] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://glob_test/lbrace/{foo.*-expected8] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_glob[mock://glob_test/rbrace/}foo.*-expected9] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_expand_path_recursive[test_paths0-expected0] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_expand_path_recursive[test_paths1-expected1] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_expand_path_recursive[test_paths2-expected2] PASSED [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_find XFAIL                               [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_find_details PASSED                      [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_find_file PASSED                         [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_cache PASSED                             [ 92%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_current PASSED                           [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_alias PASSED                             [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_add_docs_warns PASSED                    [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_cache_options PASSED                     [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_trim_kwarg_warns PASSED                  [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::tests_file_open_error PASSED                  [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_eq PASSED                                [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_pickle_multiple PASSED                   [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_json PASSED                              [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_ls_from_cache PASSED                     [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[int8] PASSED         [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[int16] PASSED        [ 93%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[int32] PASSED        [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[int64] PASSED        [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[uint8] PASSED        [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[uint16] PASSED       [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[uint32] PASSED       [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[uint64] PASSED       [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[float32] PASSED      [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_numpy[float64] PASSED      [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[int8] PASSED     [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[int16] PASSED    [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[int32] PASSED    [ 94%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing build dependencies: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[int64] PASSED    [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[uint8] PASSED    [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[uint16] PASSED   [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[uint32] PASSED   [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing build dependencies: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Checking if build backend supports build_editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[uint64] PASSED   [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Checking if build backend supports build_editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Getting requirements to build editable: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Getting requirements to build editable: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing backend dependencies: started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[float32] PASSED  [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_readinto_with_multibyte[float64] PASSED  [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_dummy_callbacks_file PASSED              [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_dummy_callbacks_files PASSED             [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_spec.py::test_dummy_callbacks_files_branched PASSED    [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_read_block PASSED                       [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_read_block_split_before PASSED          [ 95%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_seek_delimiter_endline PASSED           [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_options PASSED                    [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_simple PASSED                     [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[c:\\\\foo\\\\bar-c:\\\\foo\\\\bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[C:\\\\\\\\foo\\\\bar-C:\\\\\\\\foo\\\\bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[c:/foo/bar-c:/foo/bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[file:///c|\\\\foo\\\\bar-c:\\\\foo\\\\bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[file:///C|/foo/bar-C:/foo/bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_infer_storage_options_c[file:///C:/foo/bar-C:/foo/bar] PASSED [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths0-/more] PASSED      [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths1-] PASSED           [ 96%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths2-/] PASSED          [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths3-] PASSED           [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths4-/more] PASSED      [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_common_prefix[paths5-more] PASSED       [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths0-/path2-False-False-expected0] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths1-/path2-True-True-expected1] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths2-/path2-None-False-expected2] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths3-/path2/-True-True-expected3] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths4-other4-True-False-expected4] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths5-other5-True-True-expected5] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths6-/path2-True-False-expected6] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths7-/path2-True-True-expected7] PASSED [ 97%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths8-/path2-True-False-expected8] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths9-/path2-True-True-expected9] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths10-/path2-False-False-expected10] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths11-/path2-False-True-expected11] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths12-/path2/-None-False-expected12] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths13-/path2/-None-True-expected13] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths14-/path2/-None-False-expected14] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths15-/path2/-None-True-expected15] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths16-dest/-True-False-expected16] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_other_paths[paths17-dest/-True-False-expected17] PASSED [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_log PASSED                              [ 98%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par0] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par1] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par2] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par3] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par4] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_can_local[par5] PASSED                  [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_mirror_from PASSED                      [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_merge_offset_ranges[None-0] PASSED      [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_merge_offset_ranges[None-32] PASSED     [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_merge_offset_ranges[128-0] PASSED       [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_merge_offset_ranges[128-32] PASSED      [ 99%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_utils.py::test_size PASSED                             [100%]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | =============================== warnings summary ===============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/implementations/tests/test_http.py::test_exists\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f60dd11b700; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/implementations/http.py\", line 121, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       sync(loop, session.close, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_run_coros_in_chunks\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/asyncio/tasks.py:756: RuntimeWarning: coroutine 'test_run_coros_in_chunks.<locals>.runner' was never awaited\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     return _gather(*coros_or_futures, loop=loop, return_exceptions=return_exceptions)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Enable tracemalloc to get traceback where the object was allocated.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_async.py::test_async_streamed_file_write\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py:872: RuntimeWarning: coroutine 'test_run_coros_in_chunks.<locals>.runner' was never awaited\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     mth = sync_wrapper(getattr(obj, method), obj=obj)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   Enable tracemalloc to get traceback where the object was allocated.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py: 24 warnings\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/parquet.py:225: UserWarning: Not enough data was used to sample the parquet footer. Try setting footer_sample_size >= 923.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     warnings.warn(\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | fsspec/tests/test_parquet.py: 48 warnings\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/parquet.py:225: UserWarning: Not enough data was used to sample the parquet footer. Try setting footer_sample_size >= 1058.\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   |     warnings.warn(\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/report.xml -\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | ===== 1053 passed, 98 skipped, 2 xfailed, 75 warnings in 95.23s (0:01:35) ======\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/aiohttp/client.py:342: ResourceWarning: Unclosed client session <aiohttp.client.ClientSession object at 0x7f60dcc34c40>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Unclosed client session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | client_session: <aiohttp.client.ClientSession object at 0x7f60dcc34c40>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | sys:1: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/tmpt0x3rt3z/9839a624ef765af078590a43020020c10da38027217e0ff07da0f03a5bb48064'>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/asyncio/base_events.py:686: ResourceWarning: unclosed event loop <_UnixSelectorEventLoop running=False closed=False debug=False>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2705  Success - Main Run Tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \u2b50 Run Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Installing backend dependencies: finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing editable metadata (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: click>=8.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (8.1.3)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: cloudpickle>=1.5.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (2.2.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: fsspec>=2021.09.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (3000)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: packaging>=20.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (23.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: partd>=1.2.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (1.4.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: pyyaml>=5.3.1 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (6.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: toolz>=0.10.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (0.12.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: importlib-metadata>=4.13.0 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from dask==2023.6.1) (6.7.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: zipp>=0.5 in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from importlib-metadata>=4.13.0->dask==2023.6.1) (3.15.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Requirement already satisfied: locket in /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages (from partd>=1.2.0->dask==2023.6.1) (1.0.0)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Building wheels for collected packages: dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Building editable for dask (pyproject.toml): started\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Building editable for dask (pyproject.toml): finished with status 'done'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Created wheel for dask: filename=dask-2023.6.1-0.editable-py3-none-any.whl size=5837 sha256=10279ddf1f8b919801f308b279dce3779430320f7ade918a1393987a9b8d6f2f\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-3bxd06ag/wheels/f0/a2/48/5bbd8729d5d5213f840ba335645b2e834ca1e99de25308ec73\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Successfully built dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::group::Deinitializing micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Cache Paths:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Archive Path: /tmp/2addcc7e-9380-4970-ba55-982458e61593/cache.tzst\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec --files-from manifest.txt --use-compress-program zstdmt\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::File Size: 5437475\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Reserving Cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \ud83d\udea7  ::warning::Failed to save: {\"error\":\"already exist\"}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2705  Success - Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Installing collected packages: dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Attempting uninstall: dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Found existing installation: dask 2023.6.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     Uninstalling dask-2023.6.1:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       Successfully uninstalled dask-2023.6.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Successfully installed dask-2023.6.1\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main clone dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Main Run dask tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/7] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/pytest-win  ] \ud83c\udfc1  Job succeeded\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[1m============================= test session starts ==============================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | platform linux -- Python 3.9.16, pytest-7.4.0, pluggy-1.2.0 -- /home/runneradmin/micromamba-root/envs/test_env/bin/python3.9\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | cachedir: .pytest_cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/dask\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | configfile: pyproject.toml\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | plugins: rerunfailures-11.1.2, xdist-3.3.1, cov-4.1.0, timeout-2.1.0\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[1mcollecting ... \u001b[0mcollected 123 items\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_read_block \u001b[32mPASSED\u001b[0m\u001b[32m        [  0%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_seek_delimiter_endline \u001b[32mPASSED\u001b[0m\u001b[32m [  1%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options \u001b[32mPASSED\u001b[0m\u001b[32m [  2%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[c:\\\\foo\\\\bar-c:\\\\foo\\\\bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  3%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[C:\\\\\\\\foo\\\\bar-C:\\\\\\\\foo\\\\bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  4%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[c:/foo/bar-c:/foo/bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  4%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[file:/c|\\\\foo\\\\bar-c:\\\\foo\\\\bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  5%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[file:/C|/foo/bar-C:/foo/bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  6%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_infer_storage_options_c[file:/C:/foo/bar-C:/foo/bar] \u001b[32mPASSED\u001b[0m\u001b[32m [  7%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_bytes_utils.py::test_stringify_path \u001b[32mPASSED\u001b[0m\u001b[32m    [  8%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[None-noop_file] \u001b[32mPASSED\u001b[0m\u001b[32m [  8%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[zip-unzip] \u001b[32mPASSED\u001b[0m\u001b[32m  [  9%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[bz2-BZ2File] \u001b[32mPASSED\u001b[0m\u001b[32m [ 10%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[gzip-<lambda>] \u001b[32mPASSED\u001b[0m\u001b[32m [ 11%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[lzma-LZMAFile] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 12%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[xz-LZMAFile] \u001b[32mPASSED\u001b[0m\u001b[32m [ 13%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_compression.py::test_files[lz4-open] \u001b[33mSKIPPED\u001b[0m\u001b[32m  [ 13%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_simple \u001b[32mPASSED\u001b[0m\u001b[32m                   [ 14%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_loc \u001b[32mPASSED\u001b[0m\u001b[32m                      [ 15%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_fetch_range_with_headers \u001b[32mPASSED\u001b[0m\u001b[32m [ 16%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_ops[None] \u001b[32mPASSED\u001b[0m\u001b[32m                [ 17%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_ops[99999] \u001b[32mPASSED\u001b[0m\u001b[32m               [ 17%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_ops_blocksize \u001b[32mPASSED\u001b[0m\u001b[32m            [ 18%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_errors \u001b[32mPASSED\u001b[0m\u001b[32m                   [ 19%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_files \u001b[32mPASSED\u001b[0m\u001b[32m                    [ 20%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_open_glob \u001b[32mPASSED\u001b[0m\u001b[32m                [ 21%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_parquet[pyarrow] \u001b[32mPASSED\u001b[0m\u001b[32m         [ 21%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_parquet[fastparquet] \u001b[33mSKIPPED\u001b[0m\u001b[32m    [ 22%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_bag \u001b[32mPASSED\u001b[0m\u001b[32m                      [ 23%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_http.py::test_read_csv \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 24%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_unordered_urlpath_errors \u001b[32mPASSED\u001b[0m\u001b[32m [ 25%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes \u001b[32mPASSED\u001b[0m\u001b[32m              [ 26%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_sample_delimiter \u001b[32mPASSED\u001b[0m\u001b[32m [ 26%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_parse_sample_bytes \u001b[32mPASSED\u001b[0m\u001b[32m      [ 27%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_no_sample \u001b[32mPASSED\u001b[0m\u001b[32m    [ 28%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_blocksize_none \u001b[32mPASSED\u001b[0m\u001b[32m [ 29%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_blocksize_types[5.0] \u001b[32mPASSED\u001b[0m\u001b[32m [ 30%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_blocksize_types[5 B] \u001b[32mPASSED\u001b[0m\u001b[32m [ 30%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_blocksize_float_errs \u001b[32mPASSED\u001b[0m\u001b[32m [ 31%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_include_path \u001b[32mPASSED\u001b[0m\u001b[32m [ 32%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_with_urls \u001b[32mPASSED\u001b[0m\u001b[32m               [ 33%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_with_paths \u001b[32mPASSED\u001b[0m\u001b[32m              [ 34%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_block \u001b[32mPASSED\u001b[0m\u001b[32m        [ 34%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_read_bytes_delimited \u001b[32mPASSED\u001b[0m\u001b[32m    [ 35%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[None-None] \u001b[32mPASSED\u001b[0m\u001b[32m  [ 36%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[zip-None] \u001b[32mPASSED\u001b[0m\u001b[32m   [ 37%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[bz2-None] \u001b[32mPASSED\u001b[0m\u001b[32m   [ 38%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[gzip-None] \u001b[32mPASSED\u001b[0m\u001b[32m  [ 39%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[lzma-None] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 39%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[xz-None] \u001b[32mPASSED\u001b[0m\u001b[32m    [ 40%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[lz4-None] \u001b[33mSKIPPED\u001b[0m\u001b[32m  [ 41%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[None-10] \u001b[32mPASSED\u001b[0m\u001b[32m    [ 42%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[zip-10] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 43%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[bz2-10] \u001b[32mPASSED\u001b[0m\u001b[32m     [ 43%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[gzip-10] \u001b[32mPASSED\u001b[0m\u001b[32m    [ 44%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[lzma-10] \u001b[33mSKIPPED\u001b[0m\u001b[32m   [ 45%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[xz-10] \u001b[32mPASSED\u001b[0m\u001b[32m      [ 46%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_compression[lz4-10] \u001b[33mSKIPPED\u001b[0m\u001b[32m    [ 47%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files \u001b[32mPASSED\u001b[0m\u001b[32m              [ 47%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_text_mode[utf-8] \u001b[32mPASSED\u001b[0m\u001b[32m [ 48%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_text_mode[ascii] \u001b[32mPASSED\u001b[0m\u001b[32m [ 49%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[None-rt] \u001b[32mPASSED\u001b[0m\u001b[32m [ 50%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[None-rb] \u001b[32mPASSED\u001b[0m\u001b[32m [ 51%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[zip-rt] \u001b[32mPASSED\u001b[0m\u001b[32m [ 52%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[zip-rb] \u001b[32mPASSED\u001b[0m\u001b[32m [ 52%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[bz2-rt] \u001b[32mPASSED\u001b[0m\u001b[32m [ 53%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[bz2-rb] \u001b[32mPASSED\u001b[0m\u001b[32m [ 54%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[gzip-rt] \u001b[32mPASSED\u001b[0m\u001b[32m [ 55%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[gzip-rb] \u001b[32mPASSED\u001b[0m\u001b[32m [ 56%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[lzma-rt] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 56%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[lzma-rb] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 57%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[xz-rt] \u001b[32mPASSED\u001b[0m\u001b[32m [ 58%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[xz-rb] \u001b[32mPASSED\u001b[0m\u001b[32m [ 59%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[lz4-rt] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 60%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_compression[lz4-rb] \u001b[33mSKIPPED\u001b[0m\u001b[32m [ 60%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_bad_compression \u001b[32mPASSED\u001b[0m\u001b[32m         [ 61%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_not_found \u001b[32mPASSED\u001b[0m\u001b[32m               [ 62%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_names \u001b[33mSKIPPED\u001b[0m (need --runslow\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | option to run)\u001b[32m                                                           [ 63%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_write[compression_opener0] \u001b[32mPASSED\u001b[0m\u001b[32m [ 64%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_open_files_write[compression_opener1] \u001b[32mPASSED\u001b[0m\u001b[32m [ 65%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_pickability_of_lazy_files \u001b[32mPASSED\u001b[0m\u001b[32m [ 65%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_py2_local_bytes \u001b[32mPASSED\u001b[0m\u001b[32m         [ 66%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_local.py::test_abs_paths \u001b[32mPASSED\u001b[0m\u001b[32m               [ 67%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_get_s3 \u001b[32mPASSED\u001b[0m\u001b[32m                     [ 68%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_open_files_write \u001b[32mPASSED\u001b[0m\u001b[32m           [ 69%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes \u001b[32mPASSED\u001b[0m\u001b[32m                 [ 69%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_sample_delimiter \u001b[32mPASSED\u001b[0m\u001b[33m [ 70%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_non_existing_glob \u001b[32mPASSED\u001b[0m\u001b[33m [ 71%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_blocksize_none \u001b[32mPASSED\u001b[0m\u001b[33m  [ 72%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_blocksize_on_large_data \u001b[32mPASSED\u001b[0m\u001b[33m [ 73%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_block[5] \u001b[32mPASSED\u001b[0m\u001b[33m        [ 73%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_block[15] \u001b[32mPASSED\u001b[0m\u001b[33m       [ 74%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_block[45] \u001b[32mPASSED\u001b[0m\u001b[33m       [ 75%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_block[1500] \u001b[32mPASSED\u001b[0m\u001b[33m     [ 76%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_delimited[5] \u001b[32mPASSED\u001b[0m\u001b[33m    [ 77%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_delimited[15] \u001b[32mPASSED\u001b[0m\u001b[33m   [ 78%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_delimited[45] \u001b[32mPASSED\u001b[0m\u001b[33m   [ 78%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_read_bytes_delimited[1500] \u001b[32mPASSED\u001b[0m\u001b[33m [ 79%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[None-None] \u001b[32mPASSED\u001b[0m\u001b[33m     [ 80%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[zip-None] \u001b[32mPASSED\u001b[0m\u001b[33m      [ 81%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[bz2-None] \u001b[32mPASSED\u001b[0m\u001b[33m      [ 82%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[gzip-None] \u001b[32mPASSED\u001b[0m\u001b[33m     [ 82%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[lzma-None] \u001b[33mSKIPPED\u001b[0m\u001b[33m    [ 83%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[xz-None] \u001b[32mPASSED\u001b[0m\u001b[33m       [ 84%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[lz4-None] \u001b[33mSKIPPED\u001b[0m\u001b[33m     [ 85%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[None-10] \u001b[32mPASSED\u001b[0m\u001b[33m       [ 86%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[zip-10] \u001b[32mPASSED\u001b[0m\u001b[33m        [ 86%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[bz2-10] \u001b[32mPASSED\u001b[0m\u001b[33m        [ 87%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[gzip-10] \u001b[32mPASSED\u001b[0m\u001b[33m       [ 88%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[lzma-10] \u001b[33mSKIPPED\u001b[0m\u001b[33m      [ 89%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[xz-10] \u001b[32mPASSED\u001b[0m\u001b[33m         [ 90%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_compression[lz4-10] \u001b[33mSKIPPED\u001b[0m\u001b[33m       [ 91%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_open_files[rt] \u001b[32mPASSED\u001b[0m\u001b[33m             [ 91%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_open_files[rb] \u001b[32mPASSED\u001b[0m\u001b[33m             [ 92%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_modification_time_read_bytes \u001b[32mPASSED\u001b[0m\u001b[33m [ 93%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet[True-pyarrow] \u001b[32mPASSED\u001b[0m\u001b[33m      [ 94%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet[True-fastparquet] \u001b[33mSKIPPED\u001b[0m\u001b[33m [ 95%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet[False-pyarrow] \u001b[32mPASSED\u001b[0m\u001b[33m     [ 95%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet[False-fastparquet] \u001b[33mSKIPPED\u001b[0m\u001b[33m [ 96%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet_append[pyarrow] \u001b[32mPASSED\u001b[0m\u001b[33m    [ 97%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet_append[fastparquet] \u001b[33mSKIPPED\u001b[0m\u001b[33m [ 98%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet_wstoragepars[pyarrow] \u001b[32mPASSED\u001b[0m\u001b[33m [ 99%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/dask/bytes/tests/test_s3.py::test_parquet_wstoragepars[fastparquet] \u001b[33mSKIPPED\u001b[0m\u001b[33m [100%]\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33m=============================== warnings summary ===============================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f0111623180; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes_non_existing_glob\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00ef756b40; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes_block[15]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f01086a1200; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes_block[45]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f0108e2e0e0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes_delimited[5]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00eefc19c0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_read_bytes_delimited[45]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f0108d14600; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[None-None]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f011979ef40; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[bz2-None]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00d3b81de0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[gzip-None]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00d36ca8c0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[xz-None]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00cada01a0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[zip-10]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00caad37c0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_compression[xz-10]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f01110c12e0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_open_files[rb]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00d3ceb240; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_modification_time_read_bytes\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00e62c1880; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_parquet[False-fastparquet]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00e6a7c560; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | dask/bytes/tests/test_s3.py::test_parquet_wstoragepars[pyarrow]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   /home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/site-packages/_pytest/unraisableexception.py:78: PytestUnraisableExceptionWarning: Exception ignored in: <finalize object at 0x7f00e6bbcfe0; dead>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   Traceback (most recent call last):\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/home/runneradmin/micromamba-root/envs/test_env/lib/python3.9/weakref.py\", line 591, in __call__\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       return info.func(*info.args, **(info.kwargs or {}))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/s3fs/s3fs/core.py\", line 545, in close_session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       sync(loop, s3.__aexit__, None, None, None, timeout=0.1)\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     File \"/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/fsspec/asyn.py\", line 85, in sync\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |       raise NotImplementedError(\"Calling sync() from within a running loop\")\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   NotImplementedError: Calling sync() from within a running loop\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |   \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   |     warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/report.xml -\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ============================= slowest 10 durations =============================\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 2.62s call     dask/bytes/tests/test_http.py::test_parquet[pyarrow]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 2.17s setup    dask/bytes/tests/test_s3.py::test_read_bytes_blocksize_on_large_data\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 1.56s call     dask/bytes/tests/test_http.py::test_bag\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 1.27s setup    dask/bytes/tests/test_s3.py::test_open_files_write\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 1.27s call     dask/bytes/tests/test_s3.py::test_parquet_wstoragepars[pyarrow]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 0.92s call     dask/bytes/tests/test_s3.py::test_compression[zip-10]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 0.90s call     dask/bytes/tests/test_s3.py::test_parquet[False-pyarrow]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 0.89s call     dask/bytes/tests/test_s3.py::test_compression[xz-10]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 0.88s call     dask/bytes/tests/test_s3.py::test_compression[gzip-10]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | 0.77s call     dask/bytes/tests/test_s3.py::test_read_bytes_delimited[5]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[36m\u001b[1m=========================== short test summary info ============================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [2] dask/dask/bytes/tests/test_compression.py:14: compression function not provided\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [1] dask/dask/bytes/tests/test_http.py:184: could not import 'fastparquet': No module named 'fastparquet'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [4] dask/dask/bytes/tests/test_local.py:198: compression function not provided\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [4] dask/dask/bytes/tests/test_local.py:249: compression function not provided\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [1] dask/conftest.py:61: need --runslow option to run\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [4] dask/dask/bytes/tests/test_s3.py:388: compression function not provided\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [2] dask/dask/bytes/tests/test_s3.py:454: could not import 'fastparquet': No module named 'fastparquet'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [1] dask/dask/bytes/tests/test_s3.py:555: could not import 'fastparquet': No module named 'fastparquet'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33mSKIPPED\u001b[0m [1] dask/dask/bytes/tests/test_s3.py:616: could not import 'fastparquet': No module named 'fastparquet'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | \u001b[33m================ \u001b[32m103 passed\u001b[0m, \u001b[33m\u001b[1m20 skipped\u001b[0m, \u001b[33m\u001b[1m16 warnings\u001b[0m\u001b[33m in 35.67s\u001b[0m\u001b[33m =================\u001b[0m\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Unclosed client session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | client_session: <aiohttp.client.ClientSession object at 0x7f00dcdc7ee0>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Unclosed client session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | client_session: <aiohttp.client.ClientSession object at 0x7f00f832adf0>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Unclosed client session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | client_session: <aiohttp.client.ClientSession object at 0x7f00e62a3070>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Unclosed client session\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | client_session: <aiohttp.client.ClientSession object at 0x7f0110f2c310>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Main Run dask tests\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \u2b50 Run Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::group::Deinitializing micromamba ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Deleting config for root prefix \n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Clearing mamba executable environment variable\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # >>> mamba initialize >>>\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | ...\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | # <<< mamba initialize <<<\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2753  ::endgroup::\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Checking zstd --version\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Cache Paths:\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Archive Path: /tmp/735c6ba5-3540-46c7-bcdc-b6964efc9653/cache.tzst\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec --files-from manifest.txt --use-compress-program zstdmt\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::File Size: 5437507\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Reserving Cache\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:44471/_apis/artifactcache/caches\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \ud83d\udea7  ::warning::Failed to save: {\"error\":\"already exist\"}\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Wed Jun 28 2023 YYY\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2705  Success - Post Setup conda\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[32fd6104-0e0d-49c7-9ea2-b8961f384721/downstream  ] \ud83c\udfc1  Job succeeded\n",
        "stderr": "time=\"2023-06-28T14:54:56+02:00\" level=error msg=\"POST /_apis/artifactcache/caches: already exist\" module=artifactcache\ntime=\"2023-06-28T14:55:30+02:00\" level=error msg=\"POST /_apis/artifactcache/caches: already exist\" module=artifactcache\ntime=\"2023-06-28T14:56:13+02:00\" level=error msg=\"POST /_apis/artifactcache/caches: already exist\" module=artifactcache\ntime=\"2023-06-28T14:57:01+02:00\" level=error msg=\"POST /_apis/artifactcache/caches: already exist\" module=artifactcache\nError: Job '${{ matrix.FRIEND }}-pytest' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-filesystem_spec/.github/workflows/main-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 355.35933470726013
    }
}