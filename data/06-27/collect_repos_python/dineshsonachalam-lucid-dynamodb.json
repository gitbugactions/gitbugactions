{
    "repository": "dineshsonachalam/lucid-dynamodb",
    "stars": 108,
    "language": "python",
    "size": 666,
    "clone_url": "https://github.com/dineshsonachalam/lucid-dynamodb.git",
    "timestamp": "2023-06-28T11:29:50.517450Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [],
        "stdout": "[24048642-c7bf-4fca-8cba-4d08251d08b0/tests] \ud83d\ude80  Start image=crawlergpt:latest\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb] user=0 workdir=\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \u2601  git clone 'https://github.com/sonarsource/sonarcloud-github-action' # ref=master\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests] \u2b50 Run Main actions/checkout@v2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \u2705  Success - Main actions/checkout@v2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests] \u2b50 Run Main Start integration test\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1] user= workdir=\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting virtualenv\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting filelock<4,>=3.12\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting platformdirs<4,>=3.5.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting distlib<1,>=0.3.6\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Installing collected packages: filelock, platformdirs, distlib, virtualenv\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   WARNING: The script virtualenv is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Successfully installed distlib-0.3.6 filelock-3.12.2 platformdirs-3.8.0 virtualenv-20.23.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting boto3>=1.17.78\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading boto3-1.26.162-py3-none-any.whl (135 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting botocore>=1.20.78\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading botocore-1.29.162-py3-none-any.whl (11.0 MB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting semantic-version==2.8.5\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading semantic_version-2.8.5-py2.py3-none-any.whl (15 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting twine==3.4.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading twine-3.4.1-py3-none-any.whl (34 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting pytest==6.2.4\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading pytest-6.2.4-py3-none-any.whl (280 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting pytest-cov==2.12.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading pytest_cov-2.12.1-py2.py3-none-any.whl (20 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting requests==2.25.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading requests-2.25.1-py2.py3-none-any.whl (61 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting s3transfer<0.7.0,>=0.6.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading s3transfer-0.6.1-py3-none-any.whl (79 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting jmespath<2.0.0,>=0.7.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting urllib3<1.27,>=1.25.4\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting python-dateutil<3.0.0,>=2.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting rfc3986>=1.4.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading rfc3986-2.0.0-py2.py3-none-any.whl (31 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting readme-renderer>=21.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading readme_renderer-40.0-py3-none-any.whl (14 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting importlib-metadata>=3.6\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting tqdm>=4.14\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading tqdm-4.65.0-py3-none-any.whl (77 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting pkginfo>=1.4.2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting colorama>=0.4.3\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting keyring>=15.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading keyring-24.2.0-py3-none-any.whl (37 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting iniconfig\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting attrs>=19.2.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting py>=1.8.2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting toml\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting packaging\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting pluggy<1.0.0a1,>=0.12\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading pluggy-0.13.1-py2.py3-none-any.whl (18 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting coverage>=5.2.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading coverage-7.2.7-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting certifi>=2017.4.17\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting idna<3,>=2.5\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading idna-2.10-py2.py3-none-any.whl (58 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting chardet<5,>=3.0.2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading chardet-4.0.0-py2.py3-none-any.whl (178 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting six>=1.5\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting Pygments>=2.5.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting bleach>=2.1.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading bleach-6.0.0-py3-none-any.whl (162 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting docutils>=0.13.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting zipp>=0.5\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting jaraco.classes\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting jeepney>=0.4.2; sys_platform == \"linux\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting importlib-resources; python_version < \"3.9\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting SecretStorage>=3.2; sys_platform == \"linux\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting webencodings\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting more-itertools\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting cryptography>=2.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.3 MB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting cffi>=1.12\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Collecting pycparser\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Installing collected packages: urllib3, six, python-dateutil, jmespath, botocore, s3transfer, boto3, semantic-version, rfc3986, Pygments, webencodings, bleach, docutils, readme-renderer, certifi, idna, chardet, requests, requests-toolbelt, zipp, importlib-metadata, tqdm, pkginfo, colorama, more-itertools, jaraco.classes, jeepney, importlib-resources, pycparser, cffi, cryptography, SecretStorage, keyring, twine, iniconfig, attrs, py, toml, packaging, pluggy, pytest, coverage, pytest-cov\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Successfully installed Pygments-2.15.1 SecretStorage-3.3.3 attrs-23.1.0 bleach-6.0.0 boto3-1.26.162 botocore-1.29.162 certifi-2023.5.7 cffi-1.15.1 chardet-4.0.0 colorama-0.4.6 coverage-7.2.7 cryptography-41.0.1 docutils-0.20.1 idna-2.10 importlib-metadata-6.7.0 importlib-resources-5.12.0 iniconfig-2.0.0 jaraco.classes-3.2.3 jeepney-0.8.0 jmespath-1.0.1 keyring-24.2.0 more-itertools-9.1.0 packaging-23.1 pkginfo-1.9.6 pluggy-0.13.1 py-1.11.0 pycparser-2.21 pytest-6.2.4 pytest-cov-2.12.1 python-dateutil-2.8.2 readme-renderer-40.0 requests-2.25.1 requests-toolbelt-1.0.0 rfc3986-2.0.0 s3transfer-0.6.1 semantic-version-2.8.5 six-1.16.0 toml-0.10.2 tqdm-4.65.0 twine-3.4.1 urllib3-1.26.16 webencodings-0.5.1 zipp-3.15.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | running install\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | running bdist_egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | running egg_info\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating LucidDynamodb.egg-info\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing LucidDynamodb.egg-info/PKG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing dependency_links to LucidDynamodb.egg-info/dependency_links.txt\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing requirements to LucidDynamodb.egg-info/requires.txt\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing top-level names to LucidDynamodb.egg-info/top_level.txt\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing manifest file 'LucidDynamodb.egg-info/SOURCES.txt'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | reading manifest file 'LucidDynamodb.egg-info/SOURCES.txt'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | writing manifest file 'LucidDynamodb.egg-info/SOURCES.txt'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | installing library code to build/bdist.linux-x86_64/egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | running install_lib\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | running build_py\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/lib\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/lib/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb/operations.py -> build/lib/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb/utils.py -> build/lib/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb/exceptions.py -> build/lib/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb/__init__.py -> build/lib/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/lib/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying tests/test_crud.py -> build/lib/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying tests/__init__.py -> build/lib/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/bdist.linux-x86_64\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/bdist.linux-x86_64/egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/bdist.linux-x86_64/egg/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/LucidDynamodb/operations.py -> build/bdist.linux-x86_64/egg/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/LucidDynamodb/utils.py -> build/bdist.linux-x86_64/egg/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/LucidDynamodb/exceptions.py -> build/bdist.linux-x86_64/egg/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/LucidDynamodb/__init__.py -> build/bdist.linux-x86_64/egg/LucidDynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/bdist.linux-x86_64/egg/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/tests/test_crud.py -> build/bdist.linux-x86_64/egg/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying build/lib/tests/__init__.py -> build/bdist.linux-x86_64/egg/tests\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/LucidDynamodb/operations.py to operations.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/LucidDynamodb/utils.py to utils.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/LucidDynamodb/exceptions.py to exceptions.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/LucidDynamodb/__init__.py to __init__.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/tests/test_crud.py to test_crud.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | byte-compiling build/bdist.linux-x86_64/egg/tests/__init__.py to __init__.cpython-38.pyc\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/not-zip-safe -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | copying LucidDynamodb.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating dist\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating 'dist/LucidDynamodb-1.0.129-py3.8.egg' and adding 'build/bdist.linux-x86_64/egg' to it\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | removing 'build/bdist.linux-x86_64/egg' (and everything under it)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Processing LucidDynamodb-1.0.129-py3.8.egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | creating /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages/LucidDynamodb-1.0.129-py3.8.egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Extracting LucidDynamodb-1.0.129-py3.8.egg to /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding LucidDynamodb 1.0.129 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Installed /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages/LucidDynamodb-1.0.129-py3.8.egg\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Processing dependencies for LucidDynamodb==1.0.129\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for botocore==1.29.162\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: botocore 1.29.162\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding botocore 1.29.162 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for boto3==1.26.162\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: boto3 1.26.162\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding boto3 1.26.162 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for python-dateutil==2.8.2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: python-dateutil 2.8.2\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding python-dateutil 2.8.2 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for jmespath==1.0.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: jmespath 1.0.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding jmespath 1.0.1 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for urllib3==1.26.16\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: urllib3 1.26.16\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding urllib3 1.26.16 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for s3transfer==0.6.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: s3transfer 0.6.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding s3transfer 0.6.1 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Searching for six==1.16.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Best match: six 1.16.0\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Adding six 1.16.0 to easy-install.pth file\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Using /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/env/lib/python3.8/site-packages\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Finished processing dependencies for LucidDynamodb==1.0.129\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ============================= test session starts ==============================\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | platform linux -- Python 3.8.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | plugins: cov-2.12.1\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | collected 14 items\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | tests/test_crud.py FxxFxxxxxxxFxF                                        [100%]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | =================================== FAILURES ===================================\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ____________________________ test_create_new_table _____________________________\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | key_schema = [{'AttributeName': 'company_name', 'KeyType': 'HASH'}, {'AttributeName': 'role_id', 'KeyType': 'RANGE'}]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | attribute_definitions = [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'AttributeType': 'S'}]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | provisioned_throughput = {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | global_secondary_indexes = []\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def create_table(self, table_name, key_schema, attribute_definitions, provisioned_throughput, global_secondary_indexes=None):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Create a new table\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             key_schema (list): A key schema specifies the attributes that make up the Partition key,  Sort Key(Optional)) of a table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             attribute_definitions (list): An array of attributes that describe the key schema for the table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             global_secondary_indexes (list, optional): An index with a partition key and a sort key that can be different from those on the base table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             provisioned_throughput (dict): Provisioned throughput settings for this specified table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Table creation is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             if(len(global_secondary_indexes)>0):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 table = self.db.create_table(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     TableName=table_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     KeySchema=key_schema,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     AttributeDefinitions=attribute_definitions,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     GlobalSecondaryIndexes=global_secondary_indexes,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     ProvisionedThroughput=provisioned_throughput\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >               table = self.db.create_table(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     TableName=table_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     KeySchema=key_schema,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     AttributeDefinitions=attribute_definitions,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     ProvisionedThroughput=provisioned_throughput\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:50: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = dynamodb.ServiceResource(), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'AttributeDefinitions': [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'Attri...': 'RANGE'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def do_action(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = action(self, *args, **kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/factory.py:580: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <boto3.resources.action.ServiceAction object at 0x7f45fd86c970>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | parent = dynamodb.ServiceResource(), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'AttributeDefinitions': [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'Attri...': 'RANGE'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'create_table'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | params = {'AttributeDefinitions': [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'Attri...': 'RANGE'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def __call__(self, parent, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Perform the action's request operation after building operation\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         parameters and build any defined resources from the response.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :type parent: :py:class:`~boto3.resources.base.ServiceResource`\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :param parent: The resource instance to which this action is attached.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :rtype: dict or ServiceResource or list(ServiceResource)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :return: The response, either as a raw dict or resource instance(s).\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_name = xform_name(self._action_model.request.operation)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # First, build predefined params and then update with the\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # user-supplied kwargs, which allows overriding the pre-built\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # params if needed.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params = create_request_parameters(parent, self._action_model.request)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params.update(kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'Calling %s:%s with %r',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parent.meta.service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = getattr(parent.meta.client, operation_name)(*args, **params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/action.py:88: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>, args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'AttributeDefinitions': [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'Attri...': 'RANGE'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _api_call(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # We're accepting *args so that we can give a more helpful\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # error message than TypeError: _api_call takes exactly\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # 1 argument.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             raise TypeError(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 f\"{py_operation_name}() only accepts keyword arguments.\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # The \"self\" in this scope is referring to the BaseClient.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       return self._make_api_call(operation_name, kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:530: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'CreateTable'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | api_params = {'AttributeDefinitions': [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'Attri...': 'RANGE'}], 'ProvisionedThroughput': {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _make_api_call(self, operation_name, api_params):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_model = self._service_model.operation_model(operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_name = self._service_model.service_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         history_recorder.record(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'API_CALL',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'service': service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'operation': operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'params': api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             },\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if operation_model.deprecated:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'Warning: %s.%s() is deprecated', service_name, operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_context = {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_region': self.meta.region_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_config': self.meta.config,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'has_streaming_input': operation_model.has_streaming_input,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'auth_type': operation_model.auth_type,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         api_params = self._emit_api_params(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model, api_params, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_dict = self._convert_to_request_dict(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             endpoint_url=endpoint_url,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             headers=additional_headers,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         resolve_checksum_context(request_dict, operation_model, api_params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_id = self._service_model.service_id.hyphenize()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         handler, event_response = self.meta.events.emit_until_response(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'before-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params=request_dict,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             request_signer=self._request_signer,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if event_response is not None:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = event_response\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             apply_request_checksum(request_dict)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = self._make_request(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 operation_model, request_dict, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         self.meta.events.emit(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'after-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http_response=http,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parsed=parsed_response,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if http.status_code >= 300:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_class = self.exceptions.from_code(error_code)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise error_class(parsed_response, operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the CreateTable operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:964: ClientError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | During handling of the above exception, another exception occurred:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     @pytest.mark.xfail(raises=TableAlreadyExists)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def test_create_new_table():\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       table_creation_status = db.create_table(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                                         table_name=table_schema.get(\"TableName\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                                         key_schema=table_schema.get(\"KeySchema\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                                         attribute_definitions=table_schema.get(\"AttributeDefinitions\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                                         global_secondary_indexes=table_schema.get(\"GlobalSecondaryIndexes\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                                         provisioned_throughput=table_schema.get(\"ProvisionedThroughput\")\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | tests/test_crud.py:57: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | key_schema = [{'AttributeName': 'company_name', 'KeyType': 'HASH'}, {'AttributeName': 'role_id', 'KeyType': 'RANGE'}]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | attribute_definitions = [{'AttributeName': 'company_name', 'AttributeType': 'S'}, {'AttributeName': 'role_id', 'AttributeType': 'S'}]\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | provisioned_throughput = {'ReadCapacityUnits': 1, 'WriteCapacityUnits': 1}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | global_secondary_indexes = []\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def create_table(self, table_name, key_schema, attribute_definitions, provisioned_throughput, global_secondary_indexes=None):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Create a new table\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             key_schema (list): A key schema specifies the attributes that make up the Partition key,  Sort Key(Optional)) of a table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             attribute_definitions (list): An array of attributes that describe the key schema for the table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             global_secondary_indexes (list, optional): An index with a partition key and a sort key that can be different from those on the base table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             provisioned_throughput (dict): Provisioned throughput settings for this specified table.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Table creation is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             if(len(global_secondary_indexes)>0):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 table = self.db.create_table(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     TableName=table_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     KeySchema=key_schema,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     AttributeDefinitions=attribute_definitions,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     GlobalSecondaryIndexes=global_secondary_indexes,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     ProvisionedThroughput=provisioned_throughput\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 table = self.db.create_table(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     TableName=table_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     KeySchema=key_schema,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     AttributeDefinitions=attribute_definitions,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     ProvisionedThroughput=provisioned_throughput\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 # Wait until the table exists.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 table.meta.client.get_waiter('table_exists').wait(TableName=table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             return True\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         except ClientError as e:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             if e.response['Error']['Code'] == 'ResourceInUseException':\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 raise TableAlreadyExists(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >               raise UnexpectedError(e)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E               LucidDynamodb.exceptions.UnexpectedError: Unexpected Dynamodb operation -> An error occurred (UnrecognizedClientException) when calling the CreateTable operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:63: UnexpectedError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ________________________________ test_read_item ________________________________\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | key = {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def read_item(self, table_name, key):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Read an Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             key (dict): Partition key,  Sort Key(Optional)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             dict: Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           response = table.get_item(Key=key)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:165: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = dynamodb.Table(name='dev_jobs_test'), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Key': {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def do_action(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = action(self, *args, **kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/factory.py:580: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <boto3.resources.action.ServiceAction object at 0x7f45fd61f070>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | parent = dynamodb.Table(name='dev_jobs_test'), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Key': {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'get_item'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | params = {'Key': {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def __call__(self, parent, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Perform the action's request operation after building operation\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         parameters and build any defined resources from the response.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :type parent: :py:class:`~boto3.resources.base.ServiceResource`\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :param parent: The resource instance to which this action is attached.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :rtype: dict or ServiceResource or list(ServiceResource)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :return: The response, either as a raw dict or resource instance(s).\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_name = xform_name(self._action_model.request.operation)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # First, build predefined params and then update with the\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # user-supplied kwargs, which allows overriding the pre-built\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # params if needed.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params = create_request_parameters(parent, self._action_model.request)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params.update(kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'Calling %s:%s with %r',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parent.meta.service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = getattr(parent.meta.client, operation_name)(*args, **params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/action.py:88: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>, args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Key': {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _api_call(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # We're accepting *args so that we can give a more helpful\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # error message than TypeError: _api_call takes exactly\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # 1 argument.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             raise TypeError(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 f\"{py_operation_name}() only accepts keyword arguments.\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # The \"self\" in this scope is referring to the BaseClient.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       return self._make_api_call(operation_name, kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:530: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'GetItem'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | api_params = {'Key': {'company_name': {'S': 'Google'}, 'role_id': {'S': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _make_api_call(self, operation_name, api_params):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_model = self._service_model.operation_model(operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_name = self._service_model.service_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         history_recorder.record(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'API_CALL',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'service': service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'operation': operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'params': api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             },\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if operation_model.deprecated:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'Warning: %s.%s() is deprecated', service_name, operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_context = {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_region': self.meta.region_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_config': self.meta.config,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'has_streaming_input': operation_model.has_streaming_input,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'auth_type': operation_model.auth_type,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         api_params = self._emit_api_params(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model, api_params, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_dict = self._convert_to_request_dict(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             endpoint_url=endpoint_url,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             headers=additional_headers,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         resolve_checksum_context(request_dict, operation_model, api_params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_id = self._service_model.service_id.hyphenize()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         handler, event_response = self.meta.events.emit_until_response(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'before-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params=request_dict,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             request_signer=self._request_signer,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if event_response is not None:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = event_response\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             apply_request_checksum(request_dict)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = self._make_request(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 operation_model, request_dict, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         self.meta.events.emit(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'after-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http_response=http,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parsed=parsed_response,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if http.status_code >= 300:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_class = self.exceptions.from_code(error_code)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise error_class(parsed_response, operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the GetItem operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:964: ClientError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | During handling of the above exception, another exception occurred:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     @pytest.mark.xfail(raises=ItemNotFound)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def test_read_item():\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       item = db.read_item(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name=table_schema.get(\"TableName\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             key={\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"company_name\": \"Google\",\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"role_id\": ITEM1_PARTITION_KEY\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | tests/test_crud.py:123: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | key = {'company_name': 'Google', 'role_id': 'f21a5554-e83e-43d6-bd6a-5eca30533d29'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def read_item(self, table_name, key):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Read an Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             key (dict): Partition key,  Sort Key(Optional)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             dict: Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             response = table.get_item(Key=key)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             item = response.get('Item')\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             if item is not None:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 return item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 return ItemNotFound(table_name, key)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         except ClientError as e:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise UnexpectedError(e)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           LucidDynamodb.exceptions.UnexpectedError: Unexpected Dynamodb operation -> An error occurred (UnrecognizedClientException) when calling the GetItem operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:172: UnexpectedError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | __________________________ test_read_items_by_filter ___________________________\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | item = {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def create_item(self, table_name ,item):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Create a new Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             item (dict): Item with Partition key,  Sort Key(Optional)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Item creation is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           table.put_item(Item=item)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:120: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = dynamodb.Table(name='dev_jobs_test'), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Item': {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def do_action(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = action(self, *args, **kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/factory.py:580: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <boto3.resources.action.ServiceAction object at 0x7f45fd4e6dc0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | parent = dynamodb.Table(name='dev_jobs_test'), args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Item': {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'put_item'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | params = {'Item': {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def __call__(self, parent, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Perform the action's request operation after building operation\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         parameters and build any defined resources from the response.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :type parent: :py:class:`~boto3.resources.base.ServiceResource`\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :param parent: The resource instance to which this action is attached.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :rtype: dict or ServiceResource or list(ServiceResource)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :return: The response, either as a raw dict or resource instance(s).\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_name = xform_name(self._action_model.request.operation)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # First, build predefined params and then update with the\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # user-supplied kwargs, which allows overriding the pre-built\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # params if needed.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params = create_request_parameters(parent, self._action_model.request)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params.update(kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'Calling %s:%s with %r',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parent.meta.service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = getattr(parent.meta.client, operation_name)(*args, **params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/action.py:88: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>, args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'Item': {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _api_call(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # We're accepting *args so that we can give a more helpful\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # error message than TypeError: _api_call takes exactly\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # 1 argument.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             raise TypeError(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 f\"{py_operation_name}() only accepts keyword arguments.\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # The \"self\" in this scope is referring to the BaseClient.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       return self._make_api_call(operation_name, kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:530: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'PutItem'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | api_params = {'Item': {'benefits': {'SS': ['Internet reimbursements']}, 'company_name': {'S': 'Google'}, 'locations': {'L': [{'S': ...M': {'compensation_and_benefits': {'S': '4.2/5'}, 'overall_rating': {'S': '3/5'}}}, ...}, 'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _make_api_call(self, operation_name, api_params):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_model = self._service_model.operation_model(operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_name = self._service_model.service_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         history_recorder.record(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'API_CALL',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'service': service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'operation': operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'params': api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             },\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if operation_model.deprecated:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'Warning: %s.%s() is deprecated', service_name, operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_context = {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_region': self.meta.region_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_config': self.meta.config,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'has_streaming_input': operation_model.has_streaming_input,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'auth_type': operation_model.auth_type,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         api_params = self._emit_api_params(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model, api_params, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_dict = self._convert_to_request_dict(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             endpoint_url=endpoint_url,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             headers=additional_headers,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         resolve_checksum_context(request_dict, operation_model, api_params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_id = self._service_model.service_id.hyphenize()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         handler, event_response = self.meta.events.emit_until_response(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'before-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params=request_dict,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             request_signer=self._request_signer,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if event_response is not None:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = event_response\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             apply_request_checksum(request_dict)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = self._make_request(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 operation_model, request_dict, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         self.meta.events.emit(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'after-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http_response=http,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parsed=parsed_response,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if http.status_code >= 300:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_class = self.exceptions.from_code(error_code)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise error_class(parsed_response, operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the PutItem operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:964: ClientError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | During handling of the above exception, another exception occurred:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     @pytest.mark.xfail(raises=QueryFilterValidationFailed)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def test_read_items_by_filter():\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       item_creation_status = db.create_item(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name=table_schema.get(\"TableName\"),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             item={\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"company_name\": \"Google\",\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"role_id\": str(uuid.uuid4()),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"role\": \"Software Architect\",\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"salary\": \"$4,80,000\",\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"locations\": [\"Mountain View, California\"],\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"yearly_hike_percent\": 13,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"benefits\": set([\"Internet reimbursements\"]),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 \"overall_review\":{\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     \"overall_rating\" : \"3/5\",\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                     \"compensation_and_benefits\": \"4.2/5\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | tests/test_crud.py:307: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | item = {'benefits': {'Internet reimbursements'}, 'company_name': 'Google', 'locations': ['Mountain View, California'], 'overall_review': {'compensation_and_benefits': '4.2/5', 'overall_rating': '3/5'}, ...}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def create_item(self, table_name ,item):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Create a new Item\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             item (dict): Item with Partition key,  Sort Key(Optional)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Item creation is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table.put_item(Item=item)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             return True\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         except ClientError as e:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise UnexpectedError(e)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           LucidDynamodb.exceptions.UnexpectedError: Unexpected Dynamodb operation -> An error occurred (UnrecognizedClientException) when calling the PutItem operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:123: UnexpectedError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ______________________________ test_delete_table _______________________________\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def delete_table(self, table_name):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Delete a table\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Table deletion is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           table.delete()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:76: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = dynamodb.Table(name='dev_jobs_test'), args = (), kwargs = {}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def do_action(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = action(self, *args, **kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/factory.py:580: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <boto3.resources.action.ServiceAction object at 0x7f45fd5675b0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | parent = dynamodb.Table(name='dev_jobs_test'), args = (), kwargs = {}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'delete_table', params = {'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def __call__(self, parent, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Perform the action's request operation after building operation\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         parameters and build any defined resources from the response.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :type parent: :py:class:`~boto3.resources.base.ServiceResource`\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :param parent: The resource instance to which this action is attached.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :rtype: dict or ServiceResource or list(ServiceResource)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         :return: The response, either as a raw dict or resource instance(s).\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_name = xform_name(self._action_model.request.operation)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # First, build predefined params and then update with the\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # user-supplied kwargs, which allows overriding the pre-built\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # params if needed.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params = create_request_parameters(parent, self._action_model.request)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         params.update(kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'Calling %s:%s with %r',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parent.meta.service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       response = getattr(parent.meta.client, operation_name)(*args, **params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/boto3/resources/action.py:88: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>, args = ()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | kwargs = {'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _api_call(self, *args, **kwargs):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # We're accepting *args so that we can give a more helpful\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # error message than TypeError: _api_call takes exactly\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # 1 argument.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             raise TypeError(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 f\"{py_operation_name}() only accepts keyword arguments.\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         # The \"self\" in this scope is referring to the BaseClient.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       return self._make_api_call(operation_name, kwargs)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:530: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <botocore.client.DynamoDB object at 0x7f45fd8aea90>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | operation_name = 'DeleteTable', api_params = {'TableName': 'dev_jobs_test'}\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def _make_api_call(self, operation_name, api_params):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         operation_model = self._service_model.operation_model(operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_name = self._service_model.service_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         history_recorder.record(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'API_CALL',\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'service': service_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'operation': operation_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'params': api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             },\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if operation_model.deprecated:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             logger.debug(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 'Warning: %s.%s() is deprecated', service_name, operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_context = {\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_region': self.meta.region_name,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'client_config': self.meta.config,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'has_streaming_input': operation_model.has_streaming_input,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'auth_type': operation_model.auth_type,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         }\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         api_params = self._emit_api_params(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         endpoint_url, additional_headers = self._resolve_endpoint_ruleset(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model, api_params, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         request_dict = self._convert_to_request_dict(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             api_params=api_params,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             operation_model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             endpoint_url=endpoint_url,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             headers=additional_headers,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         resolve_checksum_context(request_dict, operation_model, api_params)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         service_id = self._service_model.service_id.hyphenize()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         handler, event_response = self.meta.events.emit_until_response(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'before-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             params=request_dict,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             request_signer=self._request_signer,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if event_response is not None:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = event_response\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             apply_request_checksum(request_dict)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http, parsed_response = self._make_request(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 operation_model, request_dict, request_context\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         self.meta.events.emit(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             'after-call.{service_id}.{operation_name}'.format(\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 service_id=service_id, operation_name=operation_name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             ),\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             http_response=http,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             parsed=parsed_response,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             model=operation_model,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             context=request_context,\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         )\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         if http.status_code >= 300:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_code = parsed_response.get(\"Error\", {}).get(\"Code\")\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             error_class = self.exceptions.from_code(error_code)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >           raise error_class(parsed_response, operation_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E           botocore.exceptions.ClientError: An error occurred (UnrecognizedClientException) when calling the DeleteTable operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | env/lib/python3.8/site-packages/botocore/client.py:964: ClientError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | During handling of the above exception, another exception occurred:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     @pytest.mark.xfail(raises=TableNotFound)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def test_delete_table():\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >       delete_table_status = db.delete_table(table_name=table_schema.get(\"TableName\"))\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | tests/test_crud.py:354: \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | self = <LucidDynamodb.operations.DynamoDb object at 0x7f45fe5234c0>\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | table_name = 'dev_jobs_test'\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     def delete_table(self, table_name):\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"Delete a table\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Args:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table_name (str): Table name\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |     \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         Returns:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             bool: Table deletion is successful or failed\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         \"\"\"\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         try:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table = self.db.Table(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table.delete()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             table.wait_until_not_exists()\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             return True\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |         except ClientError as e:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             if e.response['Error']['Code'] == 'ResourceNotFoundException':\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |                 raise TableNotFound(table_name)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   |             else:\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | >               raise UnexpectedError(e)\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | E               LucidDynamodb.exceptions.UnexpectedError: Unexpected Dynamodb operation -> An error occurred (UnrecognizedClientException) when calling the DeleteTable operation: The security token included in the request is invalid.\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | LucidDynamodb/operations.py:83: UnexpectedError\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/junit/test-results.xml -\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ---------- coverage: platform linux, python 3.8.10-final-0 -----------\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | Coverage XML written to file coverage.xml\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | \n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | =========================== short test summary info ============================\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | FAILED tests/test_crud.py::test_create_new_table - LucidDynamodb.exceptions.U...\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | FAILED tests/test_crud.py::test_read_item - LucidDynamodb.exceptions.Unexpect...\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | FAILED tests/test_crud.py::test_read_items_by_filter - LucidDynamodb.exceptio...\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | FAILED tests/test_crud.py::test_delete_table - LucidDynamodb.exceptions.Unexp...\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   | ======================== 4 failed, 10 xfailed in 4.87s =========================\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests]   \u274c  Failure - Main Start integration test\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests] exitcode '1': failure\n[24048642-c7bf-4fca-8cba-4d08251d08b0/tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'tests' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/dineshsonachalam-lucid-dynamodb/.github/workflows/pypi-deploy-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 85.81887936592102
    }
}