{
    "repository": "markfairbanks/tidypolars",
    "stars": 244,
    "language": "python",
    "size": 700,
    "clone_url": "https://github.com/markfairbanks/tidypolars.git",
    "timestamp": "2023-06-28T17:22:51.959817Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_funs",
                "name": "test_abs",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_agg_stats",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_case_when",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_casting",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_coalesce",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_floor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_lag",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_lead",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_logs",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_if_else",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_is_predicates",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_rep",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_replace_null",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_row_number",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_row_number_group",
                "time": 0.038,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_round",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_funs",
                "name": "test_sqrt",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_filter",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_mutate",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_slice",
                "time": 0.019,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_slice_head",
                "time": 0.018,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_slice_tail",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_summarize",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_groupby",
                "name": "test_group_summarize_across",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lubridate",
                "name": "test_date",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lubridate",
                "name": "test_as_date_fmt",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_lubridate",
                "name": "test_make_date",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_paste",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_paste0",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_c",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_detect_single",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_detect_multiple",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_ends",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_extract",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_length",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_sub",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_remove_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_remove",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_replace_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_replace",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_starts",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_to_lower",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_to_upper",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_stringr",
                "name": "test_str_trim",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_arrange1",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_arrange2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_arrange_across",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_bind_cols_single",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_bind_cols_multiple",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_bind_rows_single",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_bind_rows_auto_align",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_bind_rows_multiple",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_clone",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_count_no_args",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_count_one_arg",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_distinct_empty",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_distinct_select",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_drop",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_drop_null_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_drop_null_select",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_fill",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_filter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_filter_grouped",
                "time": 0.025,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_full_join",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_inner_join",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_left_join",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_mutate",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_mutate_across",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_mutate_constant",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_names",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_ncol",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_nrow",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_longer1",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_longer2",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_wider1",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_wider2",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_wider3",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pivot_wider4",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_print",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_pull",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_relocate_before",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_relocate_after",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_relocate_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_rename_dplyr_kwargs",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_rename_dplyr_strings",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_rename_pandas",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_replace_null",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_set_names",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_select",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_separate",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_slice",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_slice_head",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_slice_tail",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_summarise",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_summarize",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_summarize_grouped",
                "time": 0.022,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_summarize_across",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_to_dict",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_to_polars",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_unite",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tibble",
                "name": "test_funs_in_a_row",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sort() got an unexpected keyword argument 'descending'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_contains_ignore_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_contains_include_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_ends_with_ignore_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_ends_with_include_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_everything",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_starts_with_ignore_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tidyselect",
                "name": "test_starts_with_include_case",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \ud83d\ude80  Start image=crawlergpt:latest\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/markfairbanks-tidypolars] user=0 workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Pre snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Pre snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \ud83e\uddea  Matrix: map[python-version:3.7]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main actions/setup-python@v2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/2cc7dbf9-e342-4cff-8949-4811a405c529/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? false\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::explicit? true\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::evaluating 6 versions\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::matched: 3.7.11\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Successfully setup CPython (3.7.11)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Main actions/setup-python@v2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::set-output:: python-version=3.7.11\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main actions/checkout@v2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Main actions/checkout@v2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/2cc7dbf9-e342-4cff-8949-4811a405c529/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main Install and configure Poetry\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Retrieving Poetry metadata\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | # Welcome to Poetry!\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | This will download and install the latest version of Poetry,\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | a dependency and package manager for Python.\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | /home/runneradmin/.local/bin\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | You can uninstall at any time by executing this script with the --uninstall option,\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | and these changes will be reverted.\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing Poetry (1.5.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing Poetry (1.5.1): Creating environment\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing Poetry (1.5.1): Installing Poetry\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing Poetry (1.5.1): Creating script\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing Poetry (1.5.1): Done\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Poetry (1.5.1) is installed now. Great!\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | environment variable.\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | You can test that everything is set up by executing:\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | `poetry --version`\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u001b[33mDone \u2705\u001b[0m\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Main Install and configure Poetry\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Main snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main Install package\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Creating virtualenv tidypolars-13bzKRMn-py3.7 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing dependencies from lock file\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Package operations: 123 installs, 0 updates, 0 removals\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing typing-extensions (4.4.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing zipp (3.9.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing attrs (21.4.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing importlib-metadata (5.0.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing importlib-resources (5.10.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pkgutil-resolve-name (1.3.10)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pyrsistent (0.18.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing six (1.16.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing traitlets (5.4.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing entrypoints (0.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing fastjsonschema (2.16.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jsonschema (4.16.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-core (4.11.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nest-asyncio (1.5.6)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing parso (0.8.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing ptyprocess (0.7.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pycparser (2.21)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing python-dateutil (2.8.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pyzmq (24.0.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing tornado (6.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing wcwidth (0.2.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing backcall (0.2.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing cffi (1.15.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing decorator (5.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jedi (0.18.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-client (7.3.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing markupsafe (2.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing matplotlib-inline (0.1.6)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nbformat (5.7.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pexpect (4.8.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pickleshare (0.7.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing prompt-toolkit (3.0.31)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pygments (2.13.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pyparsing (3.0.9)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing webencodings (0.5.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing soupsieve (2.3.2.post1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing argon2-cffi-bindings (21.2.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing beautifulsoup4 (4.11.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing bleach (5.0.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing debugpy (1.6.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing defusedxml (0.7.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing idna (3.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing ipython (7.34.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jinja2 (3.1.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyterlab-pygments (0.2.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing lxml (4.9.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing mistune (0.8.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nbclient (0.5.13)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing packaging (21.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pandocfilters (1.5.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing psutil (5.9.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sniffio (1.3.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing tinycss2 (1.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing anyio (3.6.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing argon2-cffi (21.3.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing ipykernel (6.16.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing ipython-genutils (0.2.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nbconvert (6.5.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing prometheus-client (0.14.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing send2trash (1.8.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing smmap (5.0.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing terminado (0.16.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing websocket-client (1.4.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing certifi (2022.9.24)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing charset-normalizer (2.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing gitdb (4.0.9)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-server (1.19.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing notebook (6.4.12)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pytz (2022.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing urllib3 (1.26.12)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing alabaster (0.7.12)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing babel (2.10.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing colorama (0.4.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing docutils (0.17.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing gitpython (3.1.28)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing greenlet (1.1.3.post0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing imagesize (1.4.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-server-mathjax (0.2.6)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyterlab-widgets (1.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing markdown-it-py (1.1.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing requests (2.28.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing snowballstemmer (2.2.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-applehelp (1.0.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-devhelp (1.0.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-htmlhelp (2.0.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-jsmath (1.0.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-qthelp (1.0.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinxcontrib-serializinghtml (1.1.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing widgetsnbextension (3.6.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing ipywidgets (7.7.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing json5 (0.9.10)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing lazy-object-proxy (1.7.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing mdit-py-plugins (0.2.8)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nbdime (3.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing notebook-shim (0.1.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pyyaml (6.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinx (4.5.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sqlalchemy (1.4.41)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing text-unidecode (1.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing typed-ast (1.5.4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing unidecode (1.3.6)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing wrapt (1.14.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing astroid (2.11.7)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing css-html-js-minify (2.5.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing iniconfig (1.1.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-cache (0.4.3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyter-sphinx (0.3.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyterlab-server (2.15.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing myst-parser (0.15.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing nbclassic (0.4.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pluggy (1.0.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing py (1.11.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing python-slugify (6.1.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinx-togglebutton (0.3.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing toml (0.10.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing tomli (2.0.1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing jupyterlab (3.4.8)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing myst-nb (0.13.2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing numpy (1.21.6)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing polars (0.14.18)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing pytest (6.2.5)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinx-autoapi (1.9.0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |   \u2022 Installing sphinx-material (0.0.35)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Installing the current project: tidypolars (0.2.20)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Main Install package\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Main Test with pytest\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ============================= test session starts ==============================\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | platform linux -- Python 3.7.11, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/markfairbanks-tidypolars\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | plugins: anyio-3.6.1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | collected 108 items\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_funs.py ..............F..                                     [ 15%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py FFFFFFF                                            [ 22%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_lubridate.py ...                                              [ 25%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_stringr.py .................                                  [ 40%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py FFF.......F.......F.............FF...........F..... [ 87%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | F....F                                                                   [ 93%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tidyselect.py .......                                         [100%]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | =================================== FAILURES ===================================\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ____________________________ test_row_number_group _____________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_row_number_group():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can get row number by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(x = ['a', 'a', 'b'])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df.mutate(group_row_num = tp.row_number(), by = 'x')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .arrange('x', 'group_row_num')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_funs.py:192: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 group_row_num \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 ---           \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 u32           \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550...\u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 2             \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 1             \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('x', 'group_row_num'), exprs = ['x', 'group_row_num']\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | desc = [False, False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_group_filter _______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_filter():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can filter by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df.filter(col('x') <= col('x').mean(),\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |                       by = 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:10: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 a   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 b   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_group_mutate _______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_mutate():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can mutate by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(2), 'y': ['a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df.mutate(avg_x = col('x').mean(),\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |                       by = 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:21: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2506 avg_x \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2506 ---   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2506 f64   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 a   \u2506 0.0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 1   \u2506 b   \u2506 1.0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _______________________________ test_group_slice _______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_slice():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can slice by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.slice(0, by = 'y').arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:29: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 a   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 b   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ____________________________ test_group_slice_head _____________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_slice_head():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can slice_head by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.slice_head(1, by = 'y').arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:36: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 b   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 a   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ____________________________ test_group_slice_tail _____________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_slice_tail():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can slice_tail by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.slice_tail(1, by = 'y').arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:43: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 b   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 1   \u2506 a   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _____________________________ test_group_summarize _____________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_summarize():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can summarize by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.summarize(avg_x = col('x').mean(), by = col('y')).arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:50: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 y   \u2506 avg_x \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 ---   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 f64   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 2.0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 0.5   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _________________________ test_group_summarize_across __________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_group_summarize_across():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can summarize across by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': range(3, 6), 'z': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             .summarize(col(['x', 'y']).max().prefix('max_'),\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |                        avg_x = col('x').mean(),\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |                        by = [col('z')])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .arrange('z')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_groupby.py:62: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 z   \u2506 max_x \u2506 max_y \u2506 avg_x \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 ...2     \u2506 5     \u2506 2.0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 1     \u2506 4     \u2506 0.5   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('z',), exprs = ['z'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ________________________________ test_arrange1 _________________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_arrange1():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can arrange ascending\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(x = ['a', 'a', 'b'], y = [2, 1, 3])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:9: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 3   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ________________________________ test_arrange2 _________________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_arrange2():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can arrange descending\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': [2, 1, 3]})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:17: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 3   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = (<tidypolars.tibble.DescCol object at 0x7f648d0d6d50>, 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | exprs = [<tidypolars.tibble.DescCol object at 0x7f648d0d6d50>, 'y']\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | desc = [True, False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _____________________________ test_arrange_across ______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_arrange_across():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can arrange across\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': [1, 2, 3], 'z': [1, 2, 3]})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = df.arrange(\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             tp.across(['x']),\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           tp.across(['y', 'z'], tp.desc)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:26: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2506 z   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 i64 \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 1   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 2   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 3   \u2506 3   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ([<polars.internals.expr.expr.Expr object at 0x7f6492f9abd0>], [<tidypolars.tibble.DescCol object at 0x7f6492f9ac50>, <tidypolars.tibble.DescCol object at 0x7f6492f9ac10>])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | exprs = [<polars.internals.expr.expr.Expr object at 0x7f6492f9abd0>, <tidypolars.tibble.DescCol object at 0x7f6492f9ac50>, <tidypolars.tibble.DescCol object at 0x7f6492f9ac10>]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | desc = [False, True, True]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_count_one_arg ______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_count_one_arg():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can count rows (one arg)\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': [1, 1, 1]})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.count('x', sort = True)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:90: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:173: in count\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     out = out.arrange(desc(name))\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 n   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 u32 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = (<tidypolars.tibble.DescCol object at 0x7f6492a10150>,)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | exprs = [<tidypolars.tibble.DescCol object at 0x7f6492a10150>], desc = [True]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _____________________________ test_filter_grouped ______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_filter_grouped():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(x = range(3), y = ['a', 'a', 'b'])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.filter(col('x') <= col('x').mean(), by = 'y').arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:150: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 str \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 a   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 b   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_pivot_wider3 _______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_pivot_wider3():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can pivot cols to wide with values filled\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'id': _repeat(1, 3), 'label': ['x', 'y', 'z'], 'val': range(1, 4)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df.pivot_wider(names_from = 'label', values_from = 'id', values_fill = 0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .select('val', 'x', 'y', 'z').arrange('val')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:270: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 4)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 val \u2506 x   \u2506 y   \u2506 z   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 i64 \u2506 i64 \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ...\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 0   \u2506 1   \u2506 0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 3   \u2506 0   \u2506 0   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('val',), exprs = ['val'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_pivot_wider4 _______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_pivot_wider4():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can pivot cols to wide with values filled - doesn't affect id col\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(id = [None, 2], var = [\"x\", \"y\"], val = [1, 2])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         actual = (\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             df.pivot_wider(names_from = \"var\", values_from = \"val\", values_fill = 0)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             .select('id', 'x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >           .arrange('y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         )\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:281: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 id   \u2506 x   \u2506 y   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 ---  \u2506 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64  \u2506 i64 \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 null \u2506 1   \u2506 0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2    \u2506 0   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('y',), exprs = ['y'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ________________________________ test_separate _________________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_separate():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can separate\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(x = ['a_a', 'b_b', 'c_c'])\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.separate('x', into = ['left', 'right']).arrange('left')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:371: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 left \u2506 right \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 ---  \u2506 ---   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str  \u2506 str   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a    \u2506 a     \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b    \u2506 b     \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 c    \u2506 c     \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('left',), exprs = ['left'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ____________________________ test_summarize_grouped ____________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_summarize_grouped():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Can use summarize by group\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble({'x': range(3), 'y': range(3), 'z': ['a', 'a', 'b']})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       actual = df.summarize(avg_x = col('x').mean(), by = 'z').arrange('z')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:418: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (2, 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 z   \u2506 avg_x \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 ---   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 str \u2506 f64   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 a   \u2506 0.5   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 b   \u2506 2.0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('z',), exprs = ['z'], desc = [False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ______________________________ test_funs_in_a_row ______________________________\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def test_funs_in_a_row():\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"Tests if shallow copy is working properly\"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df = tp.Tibble(x = range(3), y = range(3), z = range(3))\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.distinct()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.drop('x')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.drop_null()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.filter(col('x') < 7)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.head()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.mutate(col('x') * 2)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.relocate('y', before = 'x')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.rename({'x': 'new_x'})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.select('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.slice(1)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.slice_head()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.slice_tail()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         df.tail()\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tests/test_tibble.py:464: \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | self = shape: (3, 3)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 x   \u2506 y   \u2506 z   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 --- \u2506 --- \u2506 --- \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 i64 \u2506 i64 \u2506 i64 \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 0   \u2506 0   \u2506 0   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 1   \u2506 1   \u2506 1   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2502 2   \u2506 2   \u2506 2   \u2502\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | args = ('x', 'y'), exprs = ['x', 'y'], desc = [False, False]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     def arrange(self, *args):\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Arrange/sort rows\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Parameters\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ----------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         *args : str\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |             Columns to sort by\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |     \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         Examples\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         --------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df = tp.Tibble({'x': ['a', 'a', 'b'], 'y': range(3)})\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange in ascending order\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange('x', 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         ...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> # Arrange some columns descending\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         >>> df.arrange(tp.desc('x'), 'y')\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         \"\"\"\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         exprs = _as_list(args)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   |         desc = [True if isinstance(expr, DescCol) else False for expr in exprs]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | >       return super().sort(exprs, descending = desc).pipe(from_polars)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | E       TypeError: sort() got an unexpected keyword argument 'descending'\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | tidypolars/tibble.py:102: TypeError\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ----------------------------- Captured stdout call -----------------------------\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | shape: (3,)\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | Series: '' [i64]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | [\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \t0\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \t1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | \t2\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ]\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/markfairbanks-tidypolars/report.xml -\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | =========================== short test summary info ============================\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_funs.py::test_row_number_group - TypeError: sort() got an u...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_filter - TypeError: sort() got an un...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_mutate - TypeError: sort() got an un...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_slice - TypeError: sort() got an une...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_slice_head - TypeError: sort() got a...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_slice_tail - TypeError: sort() got a...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_summarize - TypeError: sort() got an...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_groupby.py::test_group_summarize_across - TypeError: sort()...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_arrange1 - TypeError: sort() got an unexpec...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_arrange2 - TypeError: sort() got an unexpec...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_arrange_across - TypeError: sort() got an u...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_count_one_arg - TypeError: sort() got an un...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_filter_grouped - TypeError: sort() got an u...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_pivot_wider3 - TypeError: sort() got an une...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_pivot_wider4 - TypeError: sort() got an une...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_separate - TypeError: sort() got an unexpec...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_summarize_grouped - TypeError: sort() got a...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | FAILED tests/test_tibble.py::test_funs_in_a_row - TypeError: sort() got an un...\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   | ======================== 18 failed, 90 passed in 2.41s =========================\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u274c  Failure - Main Test with pytest\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] exitcode '1': failure\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \u2b50 Run Post snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker cp src=/tmp/act-cache/2cc7dbf9-e342-4cff-8949-4811a405c529/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci]   \u2705  Success - Post snok/install-poetry@v1\n[403601f1-bafc-4e8c-9ca0-09e6926d05d6/ci] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'ci' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/markfairbanks-tidypolars/.github/workflows/ci-cd-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 354.00381803512573
    }
}