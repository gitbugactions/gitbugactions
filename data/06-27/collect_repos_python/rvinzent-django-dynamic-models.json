{
    "repository": "rvinzent/django-dynamic-models",
    "stars": 144,
    "language": "python",
    "size": 282,
    "clone_url": "https://github.com/rvinzent/django-dynamic-models.git",
    "timestamp": "2023-06-28T13:20:07.615890Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_factory.TestModelFactory",
                "name": "test_get_model_makes_if_not_exists",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestModelFactory",
                "name": "test_model_has_field_with_field_on_schema",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestModelFactory",
                "name": "test_schema_defines_model_meta",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestModelFactory",
                "name": "test_get_model_registers",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestModelFactory",
                "name": "test_destroy_model_unregisters",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_make_field[django.db.models.IntegerField-IntegerField-options0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_make_field[django.db.models.CharField-CharField-options1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_make_field[django.db.models.TextField-TextField-options2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_make_field[django.db.models.FloatField-FloatField-options3]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_make_field[django.db.models.BooleanField-BooleanField-options4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_options_are_passed_to_field",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_table_relationship[django.db.models.ForeignKey-ForeignKey-options0]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_factory.TestFieldFactory",
                "name": "test_table_relationship[django.db.models.ManyToManyField-ManyToManyField-options1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_is_registered_on_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_table_is_created_on_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_registry_is_updated_on_update",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_table_is_updated_on_update",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_table_is_dropped_on_delete",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_model_is_unregistered_on_delete",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_add_field_creates_column",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_update_field_updates_column",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestModelSchema",
                "name": "test_deleting_field_drops_column",
                "time": 0.013,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestFieldSchema",
                "name": "test_cannot_save_with_prohibited_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestFieldSchema",
                "name": "test_cannot_change_null_to_not_null",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_can_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_can_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_can_update",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_can_delete",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_model_with_foreign_key",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_model_with_many_to_many",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_models.TestDynamicModels",
                "name": "test_model_instances_pass_isinstance_check_across_model_generations",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestModelSchemaEditor",
                "name": "test_create_table",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestModelSchemaEditor",
                "name": "test_update_table_creates_if_not_exists",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestModelSchemaEditor",
                "name": "test_update_table_alters_if_table_exists",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestModelSchemaEditor",
                "name": "test_alter_table",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestModelSchemaEditor",
                "name": "test_drop_table",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestFieldSchemaEditor",
                "name": "test_add_column",
                "time": 0.008,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestFieldSchemaEditor",
                "name": "test_update_column_creates_if_not_exists",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestFieldSchemaEditor",
                "name": "test_update_column_alters_if_exists",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestFieldSchemaEditor",
                "name": "test_alter_column",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_schema_editor.TestFieldSchemaEditor",
                "name": "test_drop_column",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_get_model",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_unregister_model",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_is_registered",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_unregistering_missing_model_raises_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_default_fields_setting",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_default_max_length_setting",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_cache_key_prefix",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_config",
                "name": "test_cache_timeout",
                "time": 0.032,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \ud83d\ude80  Start image=crawlergpt:latest\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models] user=0 workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Pre Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Pre Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \ud83e\uddea  Matrix: map[django-version:2.2 python-version:3.8]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main actions/checkout@v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main actions/checkout@v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main actions/setup-python@v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker cp src=/tmp/act-cache/2ddc5b6c-f445-48b5-91ad-fc944bd9117c/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? false\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::explicit? true\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::matched: 3.8.11\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Successfully setup CPython (3.8.11)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main actions/setup-python@v3\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::set-output:: python-version=3.8.11\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker cp src=/tmp/act-cache/2ddc5b6c-f445-48b5-91ad-fc944bd9117c/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Install and configure Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Retrieving Poetry metadata\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | # Welcome to Poetry!\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | This will download and install the latest version of Poetry,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | a dependency and package manager for Python.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /home/runneradmin/.local/bin\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | and these changes will be reverted.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing Poetry (1.1.13)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing Poetry (1.1.13): Creating environment\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing Poetry (1.1.13): Installing Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing Poetry (1.1.13): Creating script\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing Poetry (1.1.13): Done\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Poetry (1.1.13) is installed now. Great!\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | environment variable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | You can test that everything is set up by executing:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | `poetry --version`\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \u001b[33mDone \u2705\u001b[0m\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Install and configure Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Cache Dependencies\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker cp src=/tmp/act-cache/2ddc5b6c-f445-48b5-91ad-fc944bd9117c/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Resolved Keys:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::[\"poetry-venv-Linux-3.8-f6b81709bd2a309b2e0925eadbf8175e305245e23d782b53472f7cd24babd7ee\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::1.5.0\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42965/_apis/artifactcache/cache?keys=poetry-venv-Linux-3.8-f6b81709bd2a309b2e0925eadbf8175e305245e23d782b53472f7cd24babd7ee&version=25e65b70d167147605b4332eb57b6d34df8e0303b88c4de252efb18cf3ed148a\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Cache not found for input keys: poetry-venv-Linux-3.8-f6b81709bd2a309b2e0925eadbf8175e305245e23d782b53472f7cd24babd7ee\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Cache Dependencies\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Install Dependencies\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Creating virtualenv dynamic-models in /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models/.venv\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing dependencies from lock file\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Package operations: 27 installs, 0 updates, 0 removals\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pyparsing (3.0.9)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing attrs (21.4.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing iniconfig (1.1.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing packaging (21.3)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing py (1.11.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing tomli (2.0.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pluggy (1.0.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing asgiref (3.5.2)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing backports.zoneinfo (0.2.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing coverage (6.4.3)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing mccabe (0.6.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pathspec (0.9.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pycodestyle (2.8.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pyflakes (2.4.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing platformdirs (2.5.2)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing sqlparse (0.4.2)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing typing-extensions (4.3.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pytest (7.1.2)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing mypy-extensions (0.4.3)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing click (8.1.3)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing black (22.6.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing django (4.0.7)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing flake8 (4.0.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing isort (5.10.1)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing psycopg2-binary (2.9.3)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pytest-cov (3.0.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   \u2022 Installing pytest-django (4.5.2)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing the current project: dynamic_models (0.4.0)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Install Dependencies\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Install Django\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Collecting Django==2.2\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   Downloading Django-2.2-py3-none-any.whl (7.4 MB)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Collecting pytz\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Collecting sqlparse\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   Downloading sqlparse-0.4.4-py3-none-any.whl (41 kB)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Installing collected packages: sqlparse, pytz, Django\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Successfully installed Django-2.2 pytz-2023.3 sqlparse-0.4.4\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.8.11/x64/bin/python -m pip install --upgrade pip' command.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Install Django\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Lint\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | No changes detected\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | System check identified some issues:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | WARNINGS:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models.FieldSchema: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \tHINT: Configure the DEFAULT_AUTO_FIELD setting or the DynamicModelsConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models.ModelSchema: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \tHINT: Configure the DEFAULT_AUTO_FIELD setting or the DynamicModelsConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models/.venv/lib/python3.8/site-packages/django/core/management/commands/makemigrations.py:121: RuntimeWarning: Got an error checking a consistent migration history performed for database connection 'default': connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   warnings.warn(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | All done! \u2728 \ud83c\udf70 \u2728\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | 28 files would be left unchanged.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Skipped 10 files\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Main Lint\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Main Test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ============================= test session starts ==============================\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | platform linux -- Python 3.8.11, pytest-7.1.2, pluggy-1.0.0\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django: settings: settings.postgres (from env)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models, configfile: pyproject.toml\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | plugins: django-4.5.2, cov-3.0.0\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | collected 49 items\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_factory.py EEEEEEEEEEEEE                                      [ 26%]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_models.py EEEEEEEEEEEEEEEEEE                                  [ 63%]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_schema_editor.py EEEEEEEEEE                                   [ 83%]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_utils.py EEEE                                                 [ 91%]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_config.py ....                                                [100%]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ==================================== ERRORS ====================================\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ____ ERROR at setup of TestModelFactory.test_get_model_makes_if_not_exists _____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestModelFactory.test_model_has_field_with_field_on_schema _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ______ ERROR at setup of TestModelFactory.test_schema_defines_model_meta _______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _________ ERROR at setup of TestModelFactory.test_get_model_registers __________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ______ ERROR at setup of TestModelFactory.test_destroy_model_unregisters _______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_make_field[django.db.models.IntegerField-IntegerField-options0] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_make_field[django.db.models.CharField-CharField-options1] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_make_field[django.db.models.TextField-TextField-options2] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_make_field[django.db.models.FloatField-FloatField-options3] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_make_field[django.db.models.BooleanField-BooleanField-options4] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____ ERROR at setup of TestFieldFactory.test_options_are_passed_to_field ______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_table_relationship[django.db.models.ForeignKey-ForeignKey-options0] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldFactory.test_table_relationship[django.db.models.ManyToManyField-ManyToManyField-options1] _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____ ERROR at setup of TestModelSchema.test_model_is_registered_on_create _____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___ ERROR at setup of TestModelSchema.test_model_table_is_created_on_create ____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | __ ERROR at setup of TestModelSchema.test_model_registry_is_updated_on_update __\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___ ERROR at setup of TestModelSchema.test_model_table_is_updated_on_update ____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___ ERROR at setup of TestModelSchema.test_model_table_is_dropped_on_delete ____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ____ ERROR at setup of TestModelSchema.test_model_is_unregistered_on_delete ____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______ ERROR at setup of TestModelSchema.test_add_field_creates_column ________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ______ ERROR at setup of TestModelSchema.test_update_field_updates_column ______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ______ ERROR at setup of TestModelSchema.test_deleting_field_drops_column ______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___ ERROR at setup of TestFieldSchema.test_cannot_save_with_prohibited_name ____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ____ ERROR at setup of TestFieldSchema.test_cannot_change_null_to_not_null _____\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____________ ERROR at setup of TestDynamicModels.test_can_create ______________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______________ ERROR at setup of TestDynamicModels.test_can_get _______________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____________ ERROR at setup of TestDynamicModels.test_can_update ______________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____________ ERROR at setup of TestDynamicModels.test_can_delete ______________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______ ERROR at setup of TestDynamicModels.test_model_with_foreign_key ________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______ ERROR at setup of TestDynamicModels.test_model_with_many_to_many _______\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestDynamicModels.test_model_instances_pass_isinstance_check_across_model_generations _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | __________ ERROR at setup of TestModelSchemaEditor.test_create_table ___________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_create_table>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestModelSchemaEditor.test_update_table_creates_if_not_exists _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_update_table_creates_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestModelSchemaEditor.test_update_table_alters_if_table_exists _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_update_table_alters_if_table_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___________ ERROR at setup of TestModelSchemaEditor.test_alter_table ___________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_alter_table>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___________ ERROR at setup of TestModelSchemaEditor.test_drop_table ____________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_drop_table>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___________ ERROR at setup of TestFieldSchemaEditor.test_add_column ____________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_add_column>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldSchemaEditor.test_update_column_creates_if_not_exists _\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_update_column_creates_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ ERROR at setup of TestFieldSchemaEditor.test_update_column_alters_if_exists __\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_update_column_alters_if_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | __________ ERROR at setup of TestFieldSchemaEditor.test_alter_column ___________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_alter_column>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___________ ERROR at setup of TestFieldSchemaEditor.test_drop_column ___________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest '_django_db_marker' for <Function test_drop_column>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(autouse=True)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _django_db_marker(request) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Implement the django_db marker, internal to pytest-django.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         marker = request.node.get_closest_marker(\"django_db\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if marker:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           request.getfixturevalue(\"_django_db_helper\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/plugin.py:465: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: in django_db_setup\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______________________ ERROR at setup of test_get_model _______________________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ___________________ ERROR at setup of test_unregister_model ____________________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _____________________ ERROR at setup of test_is_registered _____________________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _______ ERROR at setup of test_unregistering_missing_model_raises_error ________\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         cursor = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with super()._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:318: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <contextlib._GeneratorContextManager object at 0x7f5c92669e50>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __enter__(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # do not keep args and kwds alive unnecessarily\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # they are only needed for recreation, which is not possible anymore\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         del self.args, self.kwds, self.func\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c94296fa0>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @contextmanager\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _nodb_cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Return a cursor from an alternative connection to be used when there is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         no need to access the main database, specifically for test db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         creation/deletion. This also prevents the production database from\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         being exposed to potential child threads while (or after) the test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         database is destroyed. Refs #10868, #17786, #16969.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn = self.__class__({**self.settings_dict, \"NAME\": None}, alias=NO_DB_ALIAS)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:656: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def cursor(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Create a cursor, opening a connection if necessary.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | name = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def _cursor(self, name=None):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.utils.DatabaseErrorWrapper object at 0x7f5c92782100>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_type = <class 'psycopg2.OperationalError'>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | exc_value = OperationalError('connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | traceback = <traceback object at 0x7f5c9277d980>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def __exit__(self, exc_type, exc_value, traceback):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if exc_type is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             return\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         for dj_exc_type in (\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DataError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             OperationalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             IntegrityError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InternalError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             ProgrammingError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             NotSupportedError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             DatabaseError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             InterfaceError,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             Error,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         ):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             if issubclass(exc_type, db_exc_type):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 dj_exc_value = dj_exc_type(*exc_value.args)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # Only set the 'errors_occurred' flag for errors that may make\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 # the connection unusable.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 if dj_exc_type not in (DataError, IntegrityError):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                     self.wrapper.errors_occurred = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>, {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92669e80>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=postgres'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | During handling of the above exception, another exception occurred:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def ensure_connection(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Guarantee that a connection to the database is established.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if self.connection is None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             with self.wrap_database_errors:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >               self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>,)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(self):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Connect to the database. Assume that the connection is closed.\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Check for invalid configurations.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.check_settings()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # In case the previous connection was closed while in an atomic block\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.in_atomic_block = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.savepoint_ids = []\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.needs_rollback = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Reset parameters defining when to close the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         max_age = self.settings_dict[\"CONN_MAX_AGE\"]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.close_at = None if max_age is None else time.monotonic() + max_age\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.closed_in_transaction = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         self.errors_occurred = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Establish the connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         conn_params = self.get_connection_params()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | args = (<django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>, {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...})\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @functools.wraps(func)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def inner(*args, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not os.environ.get(\"DJANGO_ALLOW_ASYNC_UNSAFE\"):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             # Detect a running event loop in this thread.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             try:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 asyncio.get_running_loop()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             except RuntimeError:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 pass\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             else:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 raise SynchronousOnlyOperation(message)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         # Pass onward.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | self = <django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f5c92782280>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | conn_params = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @async_unsafe\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def get_new_connection(self, conn_params):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | The above exception was the direct cause of the following exception:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | request = <SubRequest 'django_db_setup' for <Function test_get_model_makes_if_not_exists>>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_test_environment = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_blocker = <pytest_django.plugin._DatabaseBlocker object at 0x7f5c95702940>\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_use_migrations = True, django_db_keepdb = False\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | django_db_createdb = False, django_db_modify_db_settings = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     @pytest.fixture(scope=\"session\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def django_db_setup(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         request,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_test_environment: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_blocker,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_use_migrations: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_keepdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_createdb: bool,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         django_db_modify_db_settings: None,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     ) -> None:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"Top level fixture to ensure test databases are available\"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         from django.test.utils import setup_databases, teardown_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         setup_databases_args = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if not django_db_use_migrations:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             _disable_migrations()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if django_db_keepdb and not django_db_createdb:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             setup_databases_args[\"keepdb\"] = True\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         with django_db_blocker.unblock():\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >           db_cfg = setup_databases(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 verbosity=request.config.option.verbose,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 interactive=False,\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |                 **setup_databases_args\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             )\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/pytest_django/fixtures.py:122: \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/test/utils.py:220: in setup_databases\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection.creation.create_test_db(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:63: in create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self._create_test_db(verbosity, autoclobber, keepdb)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/creation.py:199: in _create_test_db\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with self._nodb_cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/contextlib.py:113: in __enter__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return next(self.gen)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:344: in _nodb_cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     with conn.cursor() as cursor:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:284: in cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return self._cursor()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:260: in _cursor\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.ensure_connection()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/utils.py:91: in __exit__\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     raise dj_exc_value.with_traceback(traceback) from exc_value\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:244: in ensure_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connect()\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/base/base.py:225: in connect\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     self.connection = self.get_new_connection(conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/utils/asyncio.py:26: in inner\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     return func(*args, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:203: in get_new_connection\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     connection = Database.connect(**conn_params)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dsn = 'user=postgres password=postgres host=localhost port=5432 dbname=dynamic_models'\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | connection_factory = None, cursor_factory = None\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwargs = {'database': 'dynamic_models', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Create a new database connection.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         The connection parameters can be specified as a string:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         or using a set of keyword arguments:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Or as a mix of both. The basic connection parameters are:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *dbname*: the database name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *database*: the database name (only as keyword argument)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *user*: user name used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *password*: password used to authenticate\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *connection_factory* parameter a different class or connections\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         factory can be specified. It should be a callable object taking a dsn\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         argument.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         used by cursor().\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         Any other keyword parameter will be passed to the underlying client\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         library: the list of supported parameters depends on the library version.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         \"\"\"\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         kwasync = {}\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async'] = kwargs.pop('async')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         if 'async_' in kwargs:\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |             kwasync['async_'] = kwargs.pop('async_')\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       django.db.utils.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 5432 failed: Connection refused\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | .venv/lib/python3.8/site-packages/psycopg2/__init__.py:122: OperationalError\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | =============================== warnings summary ===============================\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_factory.py::TestModelFactory::test_get_model_makes_if_not_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models/.venv/lib/python3.8/site-packages/django/db/backends/postgresql/base.py:323: RuntimeWarning: Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the first PostgreSQL database instead.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   |     warnings.warn(\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models/report.xml -\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ---------- coverage: platform linux, python 3.8.11-final-0 -----------\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | Name                          Stmts   Miss  Cover   Missing\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | -----------------------------------------------------------\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/compat.py          5      2    60%   3-4\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/config.py         15      1    93%   7\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/factory.py        56     33    41%   12-15, 19, 24-25, 28-35, 38-40, 43, 46-49, 52, 59, 65, 70-75, 80, 83-85, 88-90\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/models.py        144     82    43%   20-24, 31-35, 38-41, 44, 48, 52, 56, 60, 64, 68, 71-72, 75, 82-86, 91-95, 98-99, 102-109, 112-119, 134-138, 145-149, 152-155, 158-162, 165-170, 175, 179, 183, 187, 190, 193-198\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/schema.py         45     31    31%   8-9, 12-16, 19-27, 30-33, 36-37, 42-43, 46-50, 53-54, 57-58, 61-62\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | dynamic_models/utils.py          40     25    38%   9-11, 15-16, 20-24, 28-29, 34-36, 41, 44, 47-50, 53-56\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/conftest.py                33      5    85%   37, 42, 47, 52, 57\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_factory.py            44     28    36%   11-14, 17-18, 21-24, 27-28, 31-35, 50-54, 57-59, 71-80\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_models.py            112     83    26%   12-14, 17-20, 23-28, 31-36, 39-41, 44-46, 49-58, 61-66, 69-73, 78-80, 87-95, 100, 106, 109-110, 113-116, 119-122, 125-148, 151-166, 169-172\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_schema_editor.py     101     55    46%   12-13, 20, 27, 31, 34-36, 39-41, 45-49, 53-57, 61-63, 70, 74, 78, 82, 86, 90-93, 97-100, 104-112, 116-124, 128-131\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | tests/test_utils.py              17     12    29%   5-6, 10-12, 16-18, 22-25\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | -----------------------------------------------------------\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | TOTAL                           649    357    45%\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | 8 files skipped due to complete coverage.\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | \n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | =========================== short test summary info ============================\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestModelFactory::test_get_model_makes_if_not_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestModelFactory::test_model_has_field_with_field_on_schema\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestModelFactory::test_schema_defines_model_meta\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestModelFactory::test_get_model_registers - dja...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestModelFactory::test_destroy_model_unregisters\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_make_field[django.db.models.IntegerField-IntegerField-options0]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_make_field[django.db.models.CharField-CharField-options1]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_make_field[django.db.models.TextField-TextField-options2]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_make_field[django.db.models.FloatField-FloatField-options3]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_make_field[django.db.models.BooleanField-BooleanField-options4]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_options_are_passed_to_field\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_table_relationship[django.db.models.ForeignKey-ForeignKey-options0]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_factory.py::TestFieldFactory::test_table_relationship[django.db.models.ManyToManyField-ManyToManyField-options1]\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_is_registered_on_create\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_table_is_created_on_create\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_registry_is_updated_on_update\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_table_is_updated_on_update\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_table_is_dropped_on_delete\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_model_is_unregistered_on_delete\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_add_field_creates_column - ...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_update_field_updates_column\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestModelSchema::test_deleting_field_drops_column\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestFieldSchema::test_cannot_save_with_prohibited_name\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestFieldSchema::test_cannot_change_null_to_not_null\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_can_create - django.db.ut...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_can_get - django.db.utils...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_can_update - django.db.ut...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_can_delete - django.db.ut...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_model_with_foreign_key - ...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_model_with_many_to_many\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_models.py::TestDynamicModels::test_model_instances_pass_isinstance_check_across_model_generations\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestModelSchemaEditor::test_create_table\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestModelSchemaEditor::test_update_table_creates_if_not_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestModelSchemaEditor::test_update_table_alters_if_table_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestModelSchemaEditor::test_alter_table - ...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestModelSchemaEditor::test_drop_table - d...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestFieldSchemaEditor::test_add_column - d...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestFieldSchemaEditor::test_update_column_creates_if_not_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestFieldSchemaEditor::test_update_column_alters_if_exists\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestFieldSchemaEditor::test_alter_column\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_schema_editor.py::TestFieldSchemaEditor::test_drop_column - ...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_utils.py::test_get_model - django.db.utils.OperationalError:...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_utils.py::test_unregister_model - django.db.utils.Operationa...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_utils.py::test_is_registered - django.db.utils.OperationalEr...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | ERROR tests/test_utils.py::test_unregistering_missing_model_raises_error - dj...\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   | =================== 4 passed, 1 warning, 45 errors in 15.02s ===================\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u274c  Failure - Main Test\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] exitcode '1': failure\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \u2b50 Run Post Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker cp src=/tmp/act-cache/2ddc5b6c-f445-48b5-91ad-fc944bd9117c/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test]   \u2705  Success - Post Install Poetry\n[5624715f-e2d4-4d47-83ec-6caecfee0eeb/Build, Lint, and Unit Test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'Build, Lint, and Unit Test' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/rvinzent-django-dynamic-models/.github/workflows/on-push-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 400.2265567779541
    }
}