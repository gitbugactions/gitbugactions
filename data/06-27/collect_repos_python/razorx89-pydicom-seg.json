{
    "repository": "razorx89/pydicom-seg",
    "stars": 54,
    "language": "python",
    "size": 6050,
    "clone_url": "https://github.com/razorx89/pydicom-seg.git",
    "timestamp": "2023-07-01T14:16:01.656218Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_dicom_utils.TestCodeSequence",
                "name": "test_construction",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestDimensionOrganizationSequence",
                "name": "test_empty_sequence",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestDimensionOrganizationSequence",
                "name": "test_add_dimension_without_functional_group_pointer",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestDimensionOrganizationSequence",
                "name": "test_add_dimension_with_functional_group_pointer",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestDimensionOrganizationSequence",
                "name": "test_add_dimension_with_functional_group_pointer_tag_based",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestDimensionOrganizationSequence",
                "name": "test_add_multiple_dimensions_copies_same_organization_uid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestOrientationConversions",
                "name": "test_dcm_to_sitk_conversion",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dicom_utils.TestOrientationConversions",
                "name": "test_sitk_to_dcm_conversion",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_reader.TestReader",
                "name": "test_read_common",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_reader_utils.TestReaderUtils",
                "name": "test_declared_image_spacing",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_reader_utils.TestReaderUtils",
                "name": "test_declared_image_spacing_unequal_xy",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_dataset_is_writable",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_dataset_has_valid_file_meta",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_file_meta_has_information_group_length_computed",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_sop_common",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_enhanced_equipment_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_frame_of_reference_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_gernal_series_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_segmentation_series_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_image_pixel_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_and_common_segmentation_image_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_binary_segmentation_image_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_fractional_segmentation_image_elements[PROBABILITY]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_fractional_segmentation_image_elements[OCCUPANCY]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_mandatory_multi_frame_functional_groups_elements",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_timestamps_exist",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_on_invalid_image_dimensions",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_on_invalid_max_fractional_value[-1]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_on_invalid_max_fractional_value[0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_on_invalid_max_fractional_value[256]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_when_adding_frame_with_wrong_rank",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_when_adding_frame_with_wrong_shape",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_when_adding_frame_with_wrong_data_type[SegmentationType.BINARY-float32]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_when_adding_frame_with_wrong_data_type[SegmentationType.FRACTIONAL-uint8]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frame_increases_number_of_frames",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_binary_frame_modifies_pixel_data",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_fractional_frame_modifies_pixel_data",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frame_with_reference_creates_referenced_series_sequence",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frames_with_different_references_from_same_series",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frames_with_different_references_from_different_series",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_instance_reference_multiple_times",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frame_increases_count_of_per_functional_groups_sequence",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frame_adds_derivation_image_sequence_to_per_frame_functional_group_item",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_adding_frame_adds_referenced_segment_to_per_frame_functional_group_item",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_exception_on_adding_frame_with_non_existing_segment",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_add_dimension_organization",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_add_dimension_organization_duplicate",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_add_multiple_dimension_organizations",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_dataset_has_preemble",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_segmentation_dataset.TestSegmentationDataset",
                "name": "test_dataset_preamble_persisted",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_template.TestTemplate",
                "name": "test_segment_dataset_optional_code_sequences",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_template.TestTemplate",
                "name": "test_pathlib",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_invalid_data_type[int8]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_invalid_data_type[float32]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_invalid_rank",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_invalid_component_count",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_empty_segmentation",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_missing_segment_declaration",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_raises_on_empty_segmentation_after_skipped_missing_segment_declarations",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_full_slice_encoding",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_shared_functional_groups_encoding",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_slice_encoding_with_cropping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_slice_encoding_without_cropping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_multi_class_encoding",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_multi_class_slice_encoding_with_cropping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_skip_empty_slices_multi_class",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_noskip_empty_slices_multi_class",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_skip_empty_slices_between_filled_slices",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_missing_segment",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_frame_of_reference_copied_from_reference_image",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestMultiClassWriter",
                "name": "test_filesystem_path_for_source_image",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestFractionalWriter",
                "name": "test_full_slice_encoding",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestFractionalWriter",
                "name": "test_round_trip",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer.TestFractionalWriter",
                "name": "test_invalid_value_range",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "test setup failure",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer_utils.TestWriterUtils",
                "name": "test_pixel_spacing_ordering",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_writer_utils.TestWriterUtils",
                "name": "test_pixel_spacing_round_trip",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \ud83d\ude80  Start image=crawlergpt:latest\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg] user=0 workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \ud83e\uddea  Matrix: map[python_version:3.7]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \u2b50 Run Main Checkout repository\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2705  Success - Main Checkout repository\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \u2b50 Run Main Install Python\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/42394cc0-5049-400d-a0e9-17edf1de9367/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? false\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::explicit? true\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Successfully setup CPython (3.7.11)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2705  Success - Main Install Python\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2699  ::set-output:: python-version=3.7.11\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \u2b50 Run Main Install dependencies\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pip\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Installing collected packages: pip\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Attempting uninstall: pip\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     Found existing installation: pip 21.2.4\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     Uninstalling pip-21.2.4:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |       Successfully uninstalled pip-21.2.4\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Successfully installed pip-23.1.2\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting poetry\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading poetry-1.5.1-py3-none-any.whl (225 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.2/225.2 kB 7.2 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting backports.cached-property<2.0.0,>=1.0.2 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading backports.cached_property-1.0.2-py3-none-any.whl (6.1 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting build<0.11.0,>=0.10.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading build-0.10.0-py3-none-any.whl (17 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting cachecontrol[filecache]<0.13.0,>=0.12.9 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading CacheControl-0.12.14-py2.py3-none-any.whl (21 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting cleo<3.0.0,>=2.0.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading cleo-2.0.1-py3-none-any.whl (77 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 77.3/77.3 kB 4.8 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting crashtest<0.5.0,>=0.4.1 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading crashtest-0.4.1-py3-none-any.whl (7.6 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting dulwich<0.22.0,>=0.21.2 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading dulwich-0.21.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (508 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 508.4/508.4 kB 4.5 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting filelock<4.0.0,>=3.8.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting html5lib<2.0,>=1.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 112.2/112.2 kB 10.2 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting importlib-metadata>=4.4 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting installer<0.8.0,>=0.7.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading installer-0.7.0-py3-none-any.whl (453 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 453.8/453.8 kB 3.8 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting jsonschema<5.0.0,>=4.10.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading jsonschema-4.17.3-py3-none-any.whl (90 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.4/90.4 kB 3.2 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting keyring<24.0.0,>=23.9.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading keyring-23.13.1-py3-none-any.whl (37 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting lockfile<0.13.0,>=0.12.2 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading lockfile-0.12.2-py2.py3-none-any.whl (13 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting packaging>=20.4 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 3.1 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pexpect<5.0.0,>=4.7.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pexpect-4.8.0-py2.py3-none-any.whl (59 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 59.0/59.0 kB 1.1 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pkginfo<2.0.0,>=1.9.4 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting platformdirs<4.0.0,>=3.0.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting poetry-core==1.6.1 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading poetry_core-1.6.1-py3-none-any.whl (450 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 450.5/450.5 kB 14.7 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting poetry-plugin-export<2.0.0,>=1.4.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading poetry_plugin_export-1.4.0-py3-none-any.whl (10 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pyproject-hooks<2.0.0,>=1.0.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pyproject_hooks-1.0.0-py3-none-any.whl (9.3 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting requests<3.0,>=2.18 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 5.6 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting requests-toolbelt<2,>=0.9.1 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.5/54.5 kB 1.6 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting shellingham<2.0,>=1.5 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading shellingham-1.5.0.post1-py2.py3-none-any.whl (9.4 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting tomli<3.0.0,>=2.0.1 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting tomlkit<1.0.0,>=0.11.4 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting trove-classifiers>=2022.5.19 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading trove_classifiers-2023.5.24-py3-none-any.whl (13 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting urllib3<2.0.0,>=1.26.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 143.1/143.1 kB 5.4 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting virtualenv<21.0.0,>=20.22.0 (from poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 20.6 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting msgpack>=0.5.2 (from cachecontrol[filecache]<0.13.0,>=0.12.9->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading msgpack-1.0.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (299 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 299.7/299.7 kB 3.9 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting rapidfuzz<3.0.0,>=2.2.0 (from cleo<3.0.0,>=2.0.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading rapidfuzz-2.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.0/3.0 MB 10.5 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting typing-extensions (from dulwich<0.22.0,>=0.21.2->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting six>=1.9 (from html5lib<2.0,>=1.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting webencodings (from html5lib<2.0,>=1.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting zipp>=0.5 (from importlib-metadata>=4.4->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting attrs>=17.4.0 (from jsonschema<5.0.0,>=4.10.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 2.0 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting importlib-resources>=1.4.0 (from jsonschema<5.0.0,>=4.10.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading importlib_resources-5.12.0-py3-none-any.whl (36 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pkgutil-resolve-name>=1.3.10 (from jsonschema<5.0.0,>=4.10.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pkgutil_resolve_name-1.3.10-py3-none-any.whl (4.7 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 (from jsonschema<5.0.0,>=4.10.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pyrsistent-0.19.3-py3-none-any.whl (57 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.5/57.5 kB 880.4 kB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting jaraco.classes (from keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting SecretStorage>=3.2 (from keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting jeepney>=0.4.2 (from keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.4/48.4 kB 411.7 kB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting ptyprocess>=0.5 (from pexpect<5.0.0,>=4.7.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading ptyprocess-0.7.0-py2.py3-none-any.whl (13 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting charset-normalizer<4,>=2 (from requests<3.0,>=2.18->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 6.0 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting idna<4,>=2.5 (from requests<3.0,>=2.18->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.4 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting certifi>=2017.4.17 (from requests<3.0,>=2.18->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 6.4 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting distlib<1,>=0.3.6 (from virtualenv<21.0.0,>=20.22.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 7.8 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting cryptography>=2.0 (from SecretStorage>=3.2->keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.3/4.3 MB 13.6 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting more-itertools (from jaraco.classes->keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.2/54.2 kB 5.1 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting cffi>=1.12 (from cryptography>=2.0->SecretStorage>=3.2->keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading cffi-1.15.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (427 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 427.9/427.9 kB 5.6 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Collecting pycparser (from cffi>=1.12->cryptography>=2.0->SecretStorage>=3.2->keyring<24.0.0,>=23.9.0->poetry)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 5.3 MB/s eta 0:00:00\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Installing collected packages: webencodings, trove-classifiers, ptyprocess, msgpack, lockfile, distlib, zipp, urllib3, typing-extensions, tomlkit, tomli, six, shellingham, rapidfuzz, pyrsistent, pycparser, pkgutil-resolve-name, pkginfo, pexpect, packaging, more-itertools, jeepney, installer, idna, filelock, crashtest, charset-normalizer, certifi, backports.cached-property, requests, pyproject-hooks, platformdirs, jaraco.classes, importlib-resources, importlib-metadata, html5lib, dulwich, cleo, cffi, virtualenv, requests-toolbelt, poetry-core, cryptography, cachecontrol, build, attrs, SecretStorage, jsonschema, keyring, poetry-plugin-export, poetry\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Successfully installed SecretStorage-3.3.3 attrs-23.1.0 backports.cached-property-1.0.2 build-0.10.0 cachecontrol-0.12.14 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 cleo-2.0.1 crashtest-0.4.1 cryptography-41.0.1 distlib-0.3.6 dulwich-0.21.5 filelock-3.12.2 html5lib-1.1 idna-3.4 importlib-metadata-6.7.0 importlib-resources-5.12.0 installer-0.7.0 jaraco.classes-3.2.3 jeepney-0.8.0 jsonschema-4.17.3 keyring-23.13.1 lockfile-0.12.2 more-itertools-9.1.0 msgpack-1.0.5 packaging-23.1 pexpect-4.8.0 pkginfo-1.9.6 pkgutil-resolve-name-1.3.10 platformdirs-3.8.0 poetry-1.5.1 poetry-core-1.6.1 poetry-plugin-export-1.4.0 ptyprocess-0.7.0 pycparser-2.21 pyproject-hooks-1.0.0 pyrsistent-0.19.3 rapidfuzz-2.15.1 requests-2.31.0 requests-toolbelt-1.0.0 shellingham-1.5.0.post1 six-1.16.0 tomli-2.0.1 tomlkit-0.11.8 trove-classifiers-2023.5.24 typing-extensions-4.7.0 urllib3-1.26.16 virtualenv-20.23.1 webencodings-0.5.1 zipp-3.15.0\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | [notice] To update, run: pip install --upgrade pip\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Creating virtualenv pydicom-seg-Ul6ljHI_-py3.7 in /home/runneradmin/.cache/pypoetry/virtualenvs\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Installing dependencies from lock file\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Package operations: 54 installs, 0 updates, 0 removals\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing certifi (2020.4.5.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing chardet (3.0.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing idna (2.9)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing markupsafe (2.0.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pyparsing (2.4.7)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pytz (2020.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing six (1.14.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing urllib3 (1.25.11)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing zipp (3.1.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing alabaster (0.7.12)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing appdirs (1.4.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing babel (2.9.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing distlib (0.3.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing docutils (0.16)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing filelock (3.0.12)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing imagesize (1.2.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing importlib-metadata (1.6.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing jinja2 (3.0.3)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing packaging (20.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pygments (2.10.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing requests (2.23.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing snowballstemmer (2.0.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-applehelp (1.0.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-devhelp (1.0.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-htmlhelp (1.0.3)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-jsmath (1.0.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-qthelp (1.0.3)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinxcontrib-serializinghtml (1.1.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing attrs (21.2.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing cfgv (3.2.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing identify (1.6.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing more-itertools (8.3.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing mypy-extensions (0.4.3)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing nodeenv (1.5.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pluggy (0.13.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing py (1.11.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pyrsistent (0.16.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pyyaml (5.4.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinx (2.4.4)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing toml (0.10.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing tomli (2.0.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing typed-ast (1.4.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing typing-extensions (4.5.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing virtualenv (20.4.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing wcwidth (0.1.9)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing coverage (5.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing jsonschema (3.2.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing mypy (1.0.0)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing numpy (1.21.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pre-commit (2.10.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pydicom (2.1.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing pytest (5.4.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing simpleitk (2.0.2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   \u2022 Installing sphinx-rtd-theme (0.4.3)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Installing the current project: pydicom-seg (0.4.1)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2705  Success - Main Install dependencies\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \u2b50 Run Main Run static type checking (mypy)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | Success: no issues found in 9 source files\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u2705  Success - Main Run static type checking (mypy)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \u2b50 Run Main Run test suite (pytest)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ============================= test session starts ==============================\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | platform linux -- Python 3.7.11, pytest-5.4.2, py-1.11.0, pluggy-0.13.1\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | collected 76 items\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_dicom_utils.py ......EE                                       [ 10%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_reader.py .                                                   [ 11%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_reader_utils.py ..                                            [ 14%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_segmentation_dataset.py ..................................... [ 63%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ..                                                                       [ 65%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_template.py FF                                                [ 68%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py EEEEEEEEEEEEEEEEEEEEEE                              [ 97%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer_utils.py ..                                            [100%]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ==================================== ERRORS ====================================\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ___ ERROR at setup of TestOrientationConversions.test_dcm_to_sitk_conversion ___\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_dicom_utils.TestOrientationConversions object at 0x7f0df7a74a10>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcm_path = str(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             pathlib.Path(__file__).parent.parent\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"pydicom_seg\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"externals\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"dcmqi\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"data\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"segmentations\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"ct-3slice\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"01.dcm\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >       self.dcm = pydicom.dcmread(dcm_path)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_dicom_utils.py:76: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | fp = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/data/segmentations/ct-3slice/01.dcm'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | defer_size = None, stop_before_pixels = False, force = False\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | specific_tags = None\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def dcmread(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp: Union[str, \"os.PathLike[AnyStr]\", BinaryIO],\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         defer_size: Optional[Union[str, int]] = None,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         stop_before_pixels: bool = False,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         force: bool = False,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         specific_tags: Optional[List[Union[int, str, Tuple[int]]]] = None\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     ) -> Union[FileDataset, DicomDir]:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Read and parse a DICOM dataset stored in the DICOM File Format.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read a DICOM dataset stored in accordance with the :dcm:`DICOM File\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Format <part10/chapter_7.html>`. If the dataset is not stored in\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         accordance with the File Format (i.e. the preamble and prefix are missing,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         there are missing required Type 1 *File Meta Information Group* elements\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         or the entire *File Meta Information* is missing) then you will have to\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         set `force` to ``True``.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Parameters\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         ----------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp : str or PathLike or file-like\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Either a file-like object, or a string containing the file name. If a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             file-like object, the caller is responsible for closing it.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         defer_size : int or str or None, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``None`` (default), all elements are read into memory. If specified,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             then if a data element's stored value is larger than `defer_size`, the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             value is not read into memory until it is accessed in code. Specify an\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             integer (bytes), or a string value with units, e.g. \"512 KB\", \"2 MB\".\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         stop_before_pixels : bool, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``False`` (default), the full file will be read and parsed. Set\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             ``True`` to stop before reading (7FE0,0010) *Pixel Data* (and all\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             subsequent elements).\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         force : bool, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``False`` (default), raises an\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             :class:`~pydicom.errors.InvalidDicomError` if the file is\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             missing the *File Meta Information* header. Set to ``True`` to force\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             reading even if no *File Meta Information* header is found.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         specific_tags : list of (int or str or 2-tuple of int), optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If not ``None``, only the tags in the list are returned. The list\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             elements can be tags or tag names. Note that the element (0008,0005)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             *Specific Character Set* is always returned if present - this ensures\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             correct decoding of returned text values.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         -------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         FileDataset or DicomDir\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             An instance of :class:`~pydicom.dataset.FileDataset` that represents\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             a parsed DICOM file, unless the dataset is a *Media Storage Directory*\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             instance in which case it will be a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             :class:`~pydicom.dicomdir.DicomDir`.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Raises\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         ------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         InvalidDicomError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If `force` is ``True`` and the file is not a valid DICOM file.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         TypeError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If `fp` is ``None`` or of an unsupported type.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         See Also\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         --------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         pydicom.dataset.FileDataset\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Data class that is returned.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         pydicom.filereader.read_partial\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Only read part of a DICOM file, stopping on given conditions.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Examples\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         --------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read and return a dataset stored in accordance with the DICOM File Format:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds = pydicom.dcmread(\"rtplan.dcm\")\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read and return a dataset not in accordance with the DICOM File Format:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds = pydicom.dcmread(\"rtplan.dcm\", force=True)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Use within a context manager:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> with pydicom.dcmread(\"rtplan.dcm\") as ds:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>>     ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Open file if not already a file object\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         caller_owns_file = True\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp = path_from_pathlike(fp)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if isinstance(fp, str):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             # caller provided a file name; we own the file handle\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             caller_owns_file = False\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             logger.debug(\"Reading file '{0}'\".format(fp))\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           fp = open(fp, 'rb')\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/data/segmentations/ct-3slice/01.dcm'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pydicom/filereader.py:861: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ___ ERROR at setup of TestOrientationConversions.test_sitk_to_dcm_conversion ___\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_dicom_utils.TestOrientationConversions object at 0x7f0deb2a8bd0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcm_path = str(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             pathlib.Path(__file__).parent.parent\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"pydicom_seg\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"externals\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"dcmqi\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"data\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"segmentations\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"ct-3slice\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"01.dcm\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >       self.dcm = pydicom.dcmread(dcm_path)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_dicom_utils.py:76: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | fp = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/data/segmentations/ct-3slice/01.dcm'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | defer_size = None, stop_before_pixels = False, force = False\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | specific_tags = None\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def dcmread(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp: Union[str, \"os.PathLike[AnyStr]\", BinaryIO],\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         defer_size: Optional[Union[str, int]] = None,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         stop_before_pixels: bool = False,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         force: bool = False,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         specific_tags: Optional[List[Union[int, str, Tuple[int]]]] = None\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     ) -> Union[FileDataset, DicomDir]:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Read and parse a DICOM dataset stored in the DICOM File Format.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read a DICOM dataset stored in accordance with the :dcm:`DICOM File\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Format <part10/chapter_7.html>`. If the dataset is not stored in\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         accordance with the File Format (i.e. the preamble and prefix are missing,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         there are missing required Type 1 *File Meta Information Group* elements\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         or the entire *File Meta Information* is missing) then you will have to\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         set `force` to ``True``.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Parameters\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         ----------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp : str or PathLike or file-like\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Either a file-like object, or a string containing the file name. If a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             file-like object, the caller is responsible for closing it.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         defer_size : int or str or None, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``None`` (default), all elements are read into memory. If specified,\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             then if a data element's stored value is larger than `defer_size`, the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             value is not read into memory until it is accessed in code. Specify an\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             integer (bytes), or a string value with units, e.g. \"512 KB\", \"2 MB\".\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         stop_before_pixels : bool, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``False`` (default), the full file will be read and parsed. Set\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             ``True`` to stop before reading (7FE0,0010) *Pixel Data* (and all\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             subsequent elements).\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         force : bool, optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If ``False`` (default), raises an\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             :class:`~pydicom.errors.InvalidDicomError` if the file is\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             missing the *File Meta Information* header. Set to ``True`` to force\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             reading even if no *File Meta Information* header is found.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         specific_tags : list of (int or str or 2-tuple of int), optional\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If not ``None``, only the tags in the list are returned. The list\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             elements can be tags or tag names. Note that the element (0008,0005)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             *Specific Character Set* is always returned if present - this ensures\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             correct decoding of returned text values.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         -------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         FileDataset or DicomDir\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             An instance of :class:`~pydicom.dataset.FileDataset` that represents\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             a parsed DICOM file, unless the dataset is a *Media Storage Directory*\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             instance in which case it will be a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             :class:`~pydicom.dicomdir.DicomDir`.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Raises\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         ------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         InvalidDicomError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If `force` is ``True`` and the file is not a valid DICOM file.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         TypeError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             If `fp` is ``None`` or of an unsupported type.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         See Also\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         --------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         pydicom.dataset.FileDataset\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Data class that is returned.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         pydicom.filereader.read_partial\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             Only read part of a DICOM file, stopping on given conditions.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Examples\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         --------\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read and return a dataset stored in accordance with the DICOM File Format:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds = pydicom.dcmread(\"rtplan.dcm\")\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Read and return a dataset not in accordance with the DICOM File Format:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds = pydicom.dcmread(\"rtplan.dcm\", force=True)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Use within a context manager:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>> with pydicom.dcmread(\"rtplan.dcm\") as ds:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         >>>     ds.PatientName\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Open file if not already a file object\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         caller_owns_file = True\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         fp = path_from_pathlike(fp)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if isinstance(fp, str):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             # caller provided a file name; we own the file handle\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             caller_owns_file = False\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             logger.debug(\"Reading file '{0}'\".format(fp))\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           fp = open(fp, 'rb')\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/data/segmentations/ct-3slice/01.dcm'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pydicom/filereader.py:861: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_raises_on_invalid_data_type[int8] _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0deb29d490>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_raises_on_invalid_data_type[float32] _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df4b3c0d0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ______ ERROR at setup of TestMultiClassWriter.test_raises_on_invalid_rank ______\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0deb2a1e50>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_raises_on_invalid_component_count _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df7a26b10>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ___ ERROR at setup of TestMultiClassWriter.test_raises_on_empty_segmentation ___\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df79fd910>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_raises_on_missing_segment_declaration _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0defe057d0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_raises_on_empty_segmentation_after_skipped_missing_segment_declarations _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0deb29e690>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _______ ERROR at setup of TestMultiClassWriter.test_full_slice_encoding ________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0defe18810>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_shared_functional_groups_encoding _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df9ccf710>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ___ ERROR at setup of TestMultiClassWriter.test_slice_encoding_with_cropping ___\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df7a1a110>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_slice_encoding_without_cropping __\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df7a55a90>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _______ ERROR at setup of TestMultiClassWriter.test_multi_class_encoding _______\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0deb29df50>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_multi_class_slice_encoding_with_cropping _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0defe05310>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | __ ERROR at setup of TestMultiClassWriter.test_skip_empty_slices_multi_class ___\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df7a29950>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_noskip_empty_slices_multi_class __\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df9ce9e10>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_skip_empty_slices_between_filled_slices _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0e013a1490>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _________ ERROR at setup of TestMultiClassWriter.test_missing_segment __________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0df7a2a610>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_frame_of_reference_copied_from_reference_image _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0dfa035490>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ ERROR at setup of TestMultiClassWriter.test_filesystem_path_for_source_image _\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestMultiClassWriter object at 0x7f0deb2a1a90>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:25: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _______ ERROR at setup of TestFractionalWriter.test_full_slice_encoding ________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestFractionalWriter object at 0x7f0dfa019f50>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:275: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ____________ ERROR at setup of TestFractionalWriter.test_round_trip ____________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestFractionalWriter object at 0x7f0defe183d0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:275: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _______ ERROR at setup of TestFractionalWriter.test_invalid_value_range ________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_writer.TestFractionalWriter object at 0x7f0dfa01da50>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def setup(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         self.template = from_dcmqi_metainfo(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             os.path.join(\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 os.path.dirname(os.path.dirname(__file__)),\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"pydicom_seg\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"externals\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"dcmqi\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"doc\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 \"examples\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >               \"seg-example_multiple_segments_single_input_file.json\",\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_writer.py:275: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | =================================== FAILURES ===================================\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | __________ TestTemplate.test_segment_dataset_optional_code_sequences ___________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_template.TestTemplate object at 0x7f0df9d8f2d0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def test_segment_dataset_optional_code_sequences(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         path = (\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             pathlib.Path(__file__).parent.parent\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"pydicom_seg\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"externals\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"dcmqi\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"doc\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"examples\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"seg-example_multiple_segments_single_input_file.json\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >       with path.open() as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_template.py:18: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1208: in open\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     opener=self._opener)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json')\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | name = '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | flags = 524288, mode = 438\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def _opener(self, name, flags, mode=0o666):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # A stub for the opener argument to built-in open()\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >       return self._accessor.open(self, flags, mode)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/pathlib.py:1063: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | __________________________ TestTemplate.test_pathlib ___________________________\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | self = <test_template.TestTemplate object at 0x7f0deb234ed0>\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def test_pathlib(self) -> None:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         path = (\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             pathlib.Path(__file__).parent.parent\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"pydicom_seg\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"externals\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"dcmqi\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"doc\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"examples\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             / \"seg-example_multiple_segments_single_input_file.json\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         )\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >       from_dcmqi_metainfo(path)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | tests/test_template.py:74: \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | metainfo = PosixPath('/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json')\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     def from_dcmqi_metainfo(metainfo: Union[dict, FSPath]) -> pydicom.Dataset:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"Converts a `metainfo.json` file from the dcmqi project to a\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         `pydicom.Dataset` with the matching DICOM data elements set from JSON.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Those JSON files can be easilly created using the segmentation editor\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         tool from QIICR/dcmqi:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         http://qiicr.org/dcmqi/#/seg\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         When converting the JSON to a DICOM dataset, the validity of the provided\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         JSON document is ensured using the official JSON schema files from the\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         dcmqi project.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Args:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             metainfo: Either a `str` for a file path to read from or a `dict`\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |                 with the JSON already imported or constructed in source code.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         Returns:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             A `pydicom.Dataset` containg all values from the JSON document and\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |             some defaults if the elements were not available.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         # Add convienence loader of JSON dictionary\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |         if not isinstance(metainfo, dict):\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | >           with open(metainfo) as ifile:\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | E           FileNotFoundError: [Errno 2] No such file or directory: '/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/pydicom_seg/externals/dcmqi/doc/examples/seg-example_multiple_segments_single_input_file.json'\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | pydicom_seg/template.py:130: FileNotFoundError\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | =============================== warnings summary ===============================\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/_pytest/junitxml.py:417\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/_pytest/junitxml.py:417: PytestDeprecationWarning: The 'junit_family' default value will change to 'xunit2' in pytest 6.0.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Add 'junit_family=xunit1' to your pytest.ini file to keep the current format in future versions of pytest and silence this warning.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     _issue_warning_captured(deprecated.JUNIT_XML_DEFAULT_FAMILY, config.hook, 2)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:121\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:121: DeprecationWarning: pkg_resources is deprecated as an API\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     warnings.warn(\"pkg_resources is deprecated as an API\", DeprecationWarning)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     declare_namespace(pkg)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/SimpleITK/extra.py:427\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |   /home/runneradmin/.cache/pypoetry/virtualenvs/pydicom-seg-Ul6ljHI_-py3.7/lib/python3.7/site-packages/SimpleITK/extra.py:427: DeprecationWarning: invalid escape sequence \\s\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   |     \"\"\"\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | \n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | -- Docs: https://docs.pytest.org/en/latest/warnings.html\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/report.xml -\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | =========================== short test summary info ============================\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | FAILED tests/test_template.py::TestTemplate::test_segment_dataset_optional_code_sequences\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | FAILED tests/test_template.py::TestTemplate::test_pathlib - FileNotFoundError...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_dicom_utils.py::TestOrientationConversions::test_dcm_to_sitk_conversion\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_dicom_utils.py::TestOrientationConversions::test_sitk_to_dcm_conversion\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_invalid_data_type[int8]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_invalid_data_type[float32]\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_invalid_rank\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_invalid_component_count\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_empty_segmentation\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_missing_segment_declaration\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_raises_on_empty_segmentation_after_skipped_missing_segment_declarations\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_full_slice_encoding - ...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_shared_functional_groups_encoding\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_slice_encoding_with_cropping\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_slice_encoding_without_cropping\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_multi_class_encoding\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_multi_class_slice_encoding_with_cropping\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_skip_empty_slices_multi_class\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_noskip_empty_slices_multi_class\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_skip_empty_slices_between_filled_slices\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_missing_segment - File...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_frame_of_reference_copied_from_reference_image\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestMultiClassWriter::test_filesystem_path_for_source_image\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestFractionalWriter::test_full_slice_encoding - ...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestFractionalWriter::test_round_trip - FileNotFo...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ERROR tests/test_writer.py::TestFractionalWriter::test_invalid_value_range - ...\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   | ============= 2 failed, 50 passed, 9 warnings, 24 errors in 3.31s ==============\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test]   \u274c  Failure - Main Run test suite (pytest)\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] exitcode '1': failure\n[3fc09236-94ba-43c1-8212-3c6999cd3a30/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/razorx89-pydicom-seg/.github/workflows/ci-crawler.yaml",
            "type": "pytest"
        },
        "workflow_name": "3fc09236-94ba-43c1-8212-3c6999cd3a30",
        "build_tool": "pytest",
        "elapsed_time": 256.0669023990631
    }
}