{
    "repository": "PWZER/swagger-ui-py",
    "stars": 58,
    "language": "python",
    "size": 57051,
    "clone_url": "https://github.com/PWZER/swagger-ui-py.git",
    "timestamp": "2023-06-28T13:19:37.487136Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs0-auto]",
                "time": 0.672,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs0-None]",
                "time": 0.362,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs1-auto]",
                "time": 0.37,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs1-None]",
                "time": 0.358,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs2-auto]",
                "time": 0.357,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs2-None]",
                "time": 0.353,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs3-auto]",
                "time": 0.354,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs3-None]",
                "time": 0.359,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs4-auto]",
                "time": 0.349,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.aiohttp_test",
                "name": "test_aiohttp[kwargs4-None]",
                "time": 0.351,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs0-auto]",
                "time": 0.358,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs0-None]",
                "time": 0.261,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs1-auto]",
                "time": 0.471,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs1-None]",
                "time": 0.256,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs2-auto]",
                "time": 0.35,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs2-None]",
                "time": 0.25,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs3-auto]",
                "time": 0.451,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs3-None]",
                "time": 0.252,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs4-auto]",
                "time": 0.349,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.bottle_test",
                "name": "test_bottle[kwargs4-None]",
                "time": 0.249,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs0-auto]",
                "time": 0.399,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs0-None]",
                "time": 0.316,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs1-auto]",
                "time": 0.596,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs1-None]",
                "time": 0.291,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs2-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs2-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs3-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs3-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs4-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.chalice_test",
                "name": "test_chalice[kwargs4-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs0-auto]",
                "time": 0.452,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs0-None]",
                "time": 0.253,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs1-auto]",
                "time": 0.471,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs1-None]",
                "time": 0.261,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs2-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs2-None]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs3-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs3-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs4-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.falcon_test",
                "name": "test_falcon[kwargs4-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs0-auto]",
                "time": 0.712,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs0-None]",
                "time": 0.263,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs1-auto]",
                "time": 0.364,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs1-None]",
                "time": 0.266,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs2-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs2-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs3-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs3-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs4-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.flask_test",
                "name": "test_flask[kwargs4-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs0-auto]",
                "time": 0.565,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs0-None]",
                "time": 0.483,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs1-auto]",
                "time": 0.749,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs1-None]",
                "time": 0.604,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs2-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs2-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs3-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs3-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs4-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.quart_test",
                "name": "test_quart[kwargs4-None]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs0-auto]",
                "time": 1.701,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs0-None]",
                "time": 0.939,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs1-auto]",
                "time": 1.074,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs1-None]",
                "time": 0.758,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs2-auto]",
                "time": 1.116,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs2-None]",
                "time": 0.59,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs3-auto]",
                "time": 0.888,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs3-None]",
                "time": 0.99,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs4-auto]",
                "time": 1.714,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.sanic_test",
                "name": "test_sanic[kwargs4-None]",
                "time": 0.963,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs0-auto]",
                "time": 1.272,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs0-None]",
                "time": 0.414,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs1-auto]",
                "time": 1.079,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs1-None]",
                "time": 0.382,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs2-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs2-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs3-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs3-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs4-auto]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.starlette_test",
                "name": "test_starlette[kwargs4-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs0-auto]",
                "time": 1.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs0-None]",
                "time": 0.258,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs1-auto]",
                "time": 1.064,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs1-None]",
                "time": 0.268,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs2-auto]",
                "time": 0.959,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs2-None]",
                "time": 0.257,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs3-auto]",
                "time": 1.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs3-None]",
                "time": 0.254,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs4-auto]",
                "time": 1.057,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.tornado_test",
                "name": "test_tornado[kwargs4-None]",
                "time": 0.256,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \ud83d\ude80  Start image=crawlergpt:latest\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py] user=0 workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \ud83e\uddea  Matrix: map[python-version:3.7]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main actions/checkout@v3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2705  Success - Main actions/checkout@v3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main Set up Python 3.7\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker cp src=/tmp/act-cache/97111810-0573-45fe-83ea-c2476285ff7c/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2753  ::group::Installed versions\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? false\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::explicit? true\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::evaluating 6 versions\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::matched: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Successfully set up CPython (3.7.11)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2753  ::endgroup::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2705  Success - Main Set up Python 3.7\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-output:: python-version=3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main python setup.py install\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | running install\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | running bdist_egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | running egg_info\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating swagger_ui_py.egg-info\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing swagger_ui_py.egg-info/PKG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing dependency_links to swagger_ui_py.egg-info/dependency_links.txt\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing requirements to swagger_ui_py.egg-info/requires.txt\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing top-level names to swagger_ui_py.egg-info/top_level.txt\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing manifest file 'swagger_ui_py.egg-info/SOURCES.txt'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | reading manifest file 'swagger_ui_py.egg-info/SOURCES.txt'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | writing manifest file 'swagger_ui_py.egg-info/SOURCES.txt'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | installing library code to build/bdist.linux-x86_64/egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | running install_lib\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | running build_py\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/lib\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/lib/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/utils.py -> build/lib/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/core.py -> build/lib/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/__init__.py -> build/lib/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/falcon.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/bottle.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/flask.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/sanic.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/quart.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/chalice.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/starlette.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/tornado.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/__init__.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/handlers/aiohttp.py -> build/lib/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui.css.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-bundle.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-es-bundle.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-standalone-preset.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-bundle.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui.css -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/favicon-16x16.png -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-es-bundle.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-es-bundle.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-es-bundle-core.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-es-bundle.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-es-bundle-core.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/favicon-32x32.png -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/LICENSE -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-initializer.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-bundle.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor.css -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor.css.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/index.css -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-standalone-preset.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-standalone-preset.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-bundle.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/oauth2-redirect.html -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-editor-es-bundle-core.js -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-standalone-preset.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/static/swagger-ui-es-bundle-core.js.map -> build/lib/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/lib/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/templates/editor.html -> build/lib/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui/templates/doc.html -> build/lib/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/utils.py -> build/bdist.linux-x86_64/egg/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui.css.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-bundle.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-es-bundle.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-standalone-preset.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-bundle.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui.css -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/favicon-16x16.png -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-es-bundle.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-es-bundle.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-es-bundle-core.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-es-bundle.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-es-bundle-core.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/favicon-32x32.png -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/LICENSE -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-initializer.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-bundle.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor.css -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor.css.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/index.css -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-standalone-preset.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-standalone-preset.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-bundle.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/oauth2-redirect.html -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-editor-es-bundle-core.js -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-standalone-preset.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/static/swagger-ui-es-bundle-core.js.map -> build/bdist.linux-x86_64/egg/swagger_ui/static\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/core.py -> build/bdist.linux-x86_64/egg/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/falcon.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/bottle.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/flask.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/sanic.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/quart.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/chalice.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/starlette.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/tornado.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/__init__.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/handlers/aiohttp.py -> build/bdist.linux-x86_64/egg/swagger_ui/handlers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/__init__.py -> build/bdist.linux-x86_64/egg/swagger_ui\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/templates/editor.html -> build/bdist.linux-x86_64/egg/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying build/lib/swagger_ui/templates/doc.html -> build/bdist.linux-x86_64/egg/swagger_ui/templates\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/utils.py to utils.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/core.py to core.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/falcon.py to falcon.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/bottle.py to bottle.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/flask.py to flask.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/sanic.py to sanic.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/quart.py to quart.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/chalice.py to chalice.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/starlette.py to starlette.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/tornado.py to tornado.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/__init__.py to __init__.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/handlers/aiohttp.py to aiohttp.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | byte-compiling build/bdist.linux-x86_64/egg/swagger_ui/__init__.py to __init__.cpython-37.pyc\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui_py.egg-info/PKG-INFO -> build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui_py.egg-info/SOURCES.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui_py.egg-info/dependency_links.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui_py.egg-info/requires.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | copying swagger_ui_py.egg-info/top_level.txt -> build/bdist.linux-x86_64/egg/EGG-INFO\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/setuptools/dist.py:454: UserWarning: Normalizing '22.07.13' to '22.7.13'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   warnings.warn(tmpl.format(**locals()))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | zip_safe flag not set; analyzing archive contents...\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | swagger_ui.__pycache__.utils.cpython-37: module references __file__\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | swagger_ui.handlers.__pycache__.__init__.cpython-37: module references __path__\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | swagger_ui.handlers.__pycache__.chalice.cpython-37: module references __file__\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating dist\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating 'dist/swagger_ui_py-22.7.13-py3.7.egg' and adding 'build/bdist.linux-x86_64/egg' to it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | removing 'build/bdist.linux-x86_64/egg' (and everything under it)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Processing swagger_ui_py-22.7.13-py3.7.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | creating /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/swagger_ui_py-22.7.13-py3.7.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Extracting swagger_ui_py-22.7.13-py3.7.egg to /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Adding swagger-ui-py 22.7.13 to easy-install.pth file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installed /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/swagger_ui_py-22.7.13-py3.7.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Processing dependencies for swagger-ui-py==22.7.13\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Searching for PyYaml>=5.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Reading https://pypi.org/simple/PyYaml/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Downloading https://files.pythonhosted.org/packages/eb/5f/6e6fe6904e1a9c67bc2ca5629a69e7a5a0b17f079da838bab98a1e548b25/PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl#sha256=231710d57adfd809ef5d34183b8ed1eeae3f76459c18fb4a0b373ad56bedcdd9\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Best match: PyYAML 6.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Processing PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installing PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl to /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Adding PyYAML 6.0 to easy-install.pth file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installed /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/PyYAML-6.0-py3.7-linux-x86_64.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Searching for jinja2>=2.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Reading https://pypi.org/simple/jinja2/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Downloading https://files.pythonhosted.org/packages/bc/c3/f068337a370801f372f2f8f6bad74a5c140f6fda3d9de154052708dd3c65/Jinja2-3.1.2-py3-none-any.whl#sha256=6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Best match: Jinja2 3.1.2\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Processing Jinja2-3.1.2-py3-none-any.whl\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installing Jinja2-3.1.2-py3-none-any.whl to /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Adding Jinja2 3.1.2 to easy-install.pth file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installed /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/Jinja2-3.1.2-py3.7.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Searching for MarkupSafe>=2.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Reading https://pypi.org/simple/MarkupSafe/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Downloading https://files.pythonhosted.org/packages/e5/dd/49576e803c0d974671e44fa78049217fcc68af3662a24f831525ed30e6c7/MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl#sha256=9402b03f1a1b4dc4c19845e5c749e3ab82d5078d16a2a4c2cd2df62d57bb0707\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Best match: MarkupSafe 2.1.3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Processing MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installing MarkupSafe-2.1.3-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl to /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Adding MarkupSafe 2.1.3 to easy-install.pth file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installed /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/MarkupSafe-2.1.3-py3.7-linux-x86_64.egg\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Finished processing dependencies for swagger-ui-py==22.7.13\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2705  Success - Main python setup.py install\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main pip install flake8 isort -r test/requirements.txt\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting flake8\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading flake8-5.0.4-py2.py3-none-any.whl (61 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting isort\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading isort-5.11.5-py3-none-any.whl (104 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting pytest\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting uvicorn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading uvicorn-0.22.0-py3-none-any.whl (58 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting tornado\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading tornado-6.2-cp37-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (423 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting flask\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading Flask-2.2.5-py3-none-any.whl (101 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting falcon\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading falcon-3.1.1-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting aiohttp\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading aiohttp-3.8.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (948 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting bottle\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading bottle-0.12.25-py3-none-any.whl (90 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting sanic\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading sanic-23.3.0-py3-none-any.whl (200 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting quart\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading quart-0.18.4-py3-none-any.whl (100 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting starlette\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading starlette-0.28.0-py3-none-any.whl (68 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting chalice\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading chalice-1.29.0-py3-none-any.whl (264 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting mccabe<0.8.0,>=0.7.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting pyflakes<2.6.0,>=2.5.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading pyflakes-2.5.0-py2.py3-none-any.whl (66 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting importlib-metadata<4.3,>=1.1.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting pycodestyle<2.10.0,>=2.9.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading pycodestyle-2.9.1-py2.py3-none-any.whl (41 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting iniconfig\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting tomli>=1.0.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting exceptiongroup>=1.0.0rc8\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting packaging\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting pluggy<2.0,>=0.12\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting idna<4,>=2.5\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting certifi>=2017.4.17\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting charset-normalizer<4,>=2\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting urllib3<3,>=1.21.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting typing-extensions\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting click>=7.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting h11>=0.8\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting itsdangerous>=2.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading itsdangerous-2.1.2-py3-none-any.whl (15 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting Werkzeug>=2.2.2\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading Werkzeug-2.2.3-py3-none-any.whl (233 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Requirement already satisfied: Jinja2>=3.0 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/Jinja2-3.1.2-py3.7.egg (from flask->-r test/requirements.txt (line 5)) (3.1.2)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting aiosignal>=1.1.2\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting asynctest==0.13.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading asynctest-0.13.0-py3-none-any.whl (26 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting yarl<2.0,>=1.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading yarl-1.9.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (236 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting async-timeout<5.0,>=4.0.0a3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting multidict<7.0,>=4.5\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading multidict-6.0.4-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (94 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting frozenlist>=1.1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading frozenlist-1.3.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (148 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting attrs>=17.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting websockets>=10.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading websockets-11.0.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (129 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting ujson>=1.35\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading ujson-5.7.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (52 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting tracerite>=1.0.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading tracerite-1.1.0-py3-none-any.whl (12 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting sanic-routing>=22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading sanic_routing-22.8.0-py3-none-any.whl (25 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting httptools>=0.0.10\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading httptools-0.5.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (404 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting html5tagger>=1.2.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading html5tagger-1.3.0-py3-none-any.whl (10 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting uvloop>=0.15.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading uvloop-0.17.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.2 MB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting aiofiles>=0.6.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading aiofiles-23.1.0-py3-none-any.whl (14 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting hypercorn>=0.11.2\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading Hypercorn-0.14.3-py3-none-any.whl (57 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting blinker<1.6\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading blinker-1.5-py2.py3-none-any.whl (12 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Requirement already satisfied: markupsafe in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/MarkupSafe-2.1.3-py3.7-linux-x86_64.egg (from quart->-r test/requirements.txt (line 10)) (2.1.3)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting anyio<5,>=3.4.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading anyio-3.7.0-py3-none-any.whl (80 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting six<2.0.0,>=1.10.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting inquirer<3.0.0,>=2.7.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading inquirer-2.10.1-py3-none-any.whl (17 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Requirement already satisfied: pip<23.2,>=9 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from chalice->-r test/requirements.txt (line 12)) (21.2.4)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from chalice->-r test/requirements.txt (line 12)) (47.1.0)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting jmespath<2.0.0,>=0.9.3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting wheel\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting botocore<2.0.0,>=1.14.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading botocore-1.29.162-py3-none-any.whl (11.0 MB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Requirement already satisfied: pyyaml<7.0.0,>=5.3.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/PyYAML-6.0-py3.7-linux-x86_64.egg (from chalice->-r test/requirements.txt (line 12)) (6.0)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting sniffio>=1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting urllib3<3,>=1.21.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading urllib3-1.26.16-py2.py3-none-any.whl (143 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting python-dateutil<3.0.0,>=2.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting toml\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting priority\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading priority-2.0.0-py3-none-any.whl (8.9 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting wsproto>=0.14.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading wsproto-1.2.0-py3-none-any.whl (24 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting h2>=3.1.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading h2-4.1.0-py3-none-any.whl (57 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting hyperframe<7,>=6.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading hyperframe-6.0.1-py3-none-any.whl (12 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting hpack<5,>=4.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading hpack-4.0.0-py3-none-any.whl (32 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting zipp>=0.5\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting blessed>=1.19.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading blessed-1.20.0-py2.py3-none-any.whl (58 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting python-editor>=1.0.4\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading python_editor-1.0.4-py3-none-any.whl (4.9 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting readchar>=3.0.6\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading readchar-4.0.5-py3-none-any.whl (8.5 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Collecting wcwidth>=0.1.4\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   Downloading wcwidth-0.2.6-py2.py3-none-any.whl (29 kB)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Installing collected packages: typing-extensions, zipp, wcwidth, six, hyperframe, hpack, h11, wsproto, urllib3, toml, sniffio, readchar, python-editor, python-dateutil, priority, multidict, jmespath, importlib-metadata, idna, html5tagger, h2, frozenlist, exceptiongroup, blessed, yarl, wheel, Werkzeug, websockets, uvloop, ujson, tracerite, tomli, sanic-routing, pyflakes, pycodestyle, pluggy, packaging, mccabe, itsdangerous, inquirer, iniconfig, hypercorn, httptools, click, charset-normalizer, certifi, botocore, blinker, attrs, asynctest, async-timeout, anyio, aiosignal, aiofiles, uvicorn, tornado, starlette, sanic, requests, quart, pytest, isort, flask, flake8, falcon, chalice, bottle, aiohttp\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Successfully installed Werkzeug-2.2.3 aiofiles-23.1.0 aiohttp-3.8.4 aiosignal-1.3.1 anyio-3.7.0 async-timeout-4.0.2 asynctest-0.13.0 attrs-23.1.0 blessed-1.20.0 blinker-1.5 botocore-1.29.162 bottle-0.12.25 certifi-2023.5.7 chalice-1.29.0 charset-normalizer-3.1.0 click-8.1.3 exceptiongroup-1.1.1 falcon-3.1.1 flake8-5.0.4 flask-2.2.5 frozenlist-1.3.3 h11-0.14.0 h2-4.1.0 hpack-4.0.0 html5tagger-1.3.0 httptools-0.5.0 hypercorn-0.14.3 hyperframe-6.0.1 idna-3.4 importlib-metadata-4.2.0 iniconfig-2.0.0 inquirer-2.10.1 isort-5.11.5 itsdangerous-2.1.2 jmespath-1.0.1 mccabe-0.7.0 multidict-6.0.4 packaging-23.1 pluggy-1.2.0 priority-2.0.0 pycodestyle-2.9.1 pyflakes-2.5.0 pytest-7.4.0 python-dateutil-2.8.2 python-editor-1.0.4 quart-0.18.4 readchar-4.0.5 requests-2.31.0 sanic-23.3.0 sanic-routing-22.8.0 six-1.16.0 sniffio-1.3.0 starlette-0.28.0 toml-0.10.2 tomli-2.0.1 tornado-6.2 tracerite-1.1.0 typing-extensions-4.6.3 ujson-5.7.0 urllib3-1.26.16 uvicorn-0.22.0 uvloop-0.17.0 wcwidth-0.2.6 websockets-11.0.3 wheel-0.40.0 wsproto-1.2.0 yarl-1.9.2 zipp-3.15.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.7.11/x64/bin/python -m pip install --upgrade pip' command.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2705  Success - Main pip install flake8 isort -r test/requirements.txt\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main flake8\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u2705  Success - Main flake8\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \u2b50 Run Main pytest --junitxml=report.xml -s test/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ============================= test session starts ==============================\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | plugins: anyio-3.7.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | collected 90 items\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/aiohttp_test.py .======== Running on http://localhost:53945 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .======== Running on http://localhost:41753 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ======== Running on http://localhost:38947 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .======== Running on http://localhost:59889 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ..======== Running on http://localhost:55855 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ======== Running on http://localhost:33925 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .======== Running on http://localhost:45637 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .======== Running on http://localhost:44511 ========\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .FF\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/bottle_test.py ........FF\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/chalice_test.py ..........\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/falcon_test.py ..........\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/flask_test.py  * Serving Flask app 'flask_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: off\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | . * Serving Flask app 'flask_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: off\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | . * Serving Flask app 'flask_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: off\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | . * Serving Flask app 'flask_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: off\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .......\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/quart_test.py [2023-06-28 13:23:53 +0000] [379] [INFO] Running on http://127.0.0.1:41815 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Serving Quart app 'quart_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Environment: production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Please use an ASGI server (e.g. Hypercorn) directly in production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Running on http://localhost:41815 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52516 GET /hello/world 1.1 200 14 3228\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52524 GET /api/doc 1.1 308 249 1396\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52524 GET /api/doc/ 1.1 200 1173 12163\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52534 GET /api/doc/ 1.1 200 1173 1349\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52538 GET /api/doc/static/LICENSE 1.1 200 11358 7746\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [379] [INFO] 127.0.0.1:52544 GET /api/doc/swagger.json 1.1 200 458 8645\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .[2023-06-28 13:23:54 +0000] [390] [INFO] Running on http://127.0.0.1:35955 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Serving Quart app 'quart_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Environment: production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Please use an ASGI server (e.g. Hypercorn) directly in production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Running on http://localhost:35955 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35838 GET /hello/world 1.1 200 14 3154\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35848 GET /api/doc 1.1 308 249 1727\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35848 GET /api/doc/ 1.1 200 1173 15260\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35850 GET /api/doc/ 1.1 200 1173 3265\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35862 GET /api/doc/static/LICENSE 1.1 200 11358 12546\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:54 +0000] [390] [INFO] 127.0.0.1:35870 GET /api/doc/swagger.json 1.1 200 458 13059\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .[2023-06-28 13:23:55 +0000] [401] [INFO] Running on http://127.0.0.1:45787 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Serving Quart app 'quart_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Environment: production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Please use an ASGI server (e.g. Hypercorn) directly in production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Running on http://localhost:45787 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55084 GET /hello/world 1.1 200 14 3731\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55098 GET /api/doc 1.1 308 249 2211\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55098 GET /api/doc/ 1.1 200 1173 22113\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55102 GET /api/doc/ 1.1 200 1173 2656\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55118 GET /api/doc/static/LICENSE 1.1 200 11358 11413\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55132 GET /api/doc/editor 1.1 308 263 2183\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55132 GET /api/doc/editor/ 1.1 200 3613 6607\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [401] [INFO] 127.0.0.1:55146 GET /api/doc/swagger.json 1.1 200 458 10260\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .[2023-06-28 13:23:55 +0000] [412] [INFO] Running on http://127.0.0.1:34927 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Serving Quart app 'quart_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Environment: production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Please use an ASGI server (e.g. Hypercorn) directly in production\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Debug mode: False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |  * Running on http://localhost:34927 (CTRL + C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47720 GET /hello/world 1.1 200 14 4597\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47730 GET /api/doc 1.1 308 249 2760\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47730 GET /api/doc/ 1.1 200 1173 19253\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47738 GET /api/doc/ 1.1 200 1173 2918\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47742 GET /api/doc/static/LICENSE 1.1 200 11358 54333\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47758 GET /api/doc/editor 1.1 308 263 2629\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47758 GET /api/doc/editor/ 1.1 200 3613 5075\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:55 +0000] [412] [INFO] 127.0.0.1:47760 GET /api/doc/swagger.json 1.1 200 458 29279\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .......\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py [2023-06-28 13:23:56 +0000] [423] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] Goin' Fast @ http://localhost:41187\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:56 +0000] [423] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:57 +0000] [423] [INFO] Killing Sanic-Server-0-0 [433]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:57 +0000] [423] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:57 +0000] [423] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:23:58 +0000] [437] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] Goin' Fast @ http://localhost:39171\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] Killing Sanic-Server-0-0 [447]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:58 +0000] [437] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:23:59 +0000] [451] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] Goin' Fast @ http://localhost:59995\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:23:59 +0000] [451] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [451] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [451] [INFO] Killing Sanic-Server-0-0 [461]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [451] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:00 +0000] [465] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] Goin' Fast @ http://localhost:36903\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:00 +0000] [465] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:01 +0000] [465] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:01 +0000] [465] [INFO] Killing Sanic-Server-0-0 [475]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:01 +0000] [465] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:02 +0000] [479] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] Goin' Fast @ http://localhost:59511\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] Killing Sanic-Server-0-0 [489]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:02 +0000] [479] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:03 +0000] [493] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] Goin' Fast @ http://localhost:55147\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] Killing Sanic-Server-0-0 [503]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:03 +0000] [493] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:04 +0000] [507] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] Goin' Fast @ http://localhost:46313\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] Killing Sanic-Server-0-0 [517]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:04 +0000] [507] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:05 +0000] [521] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] Goin' Fast @ http://localhost:56749\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] Killing Sanic-Server-0-0 [531]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:05 +0000] [521] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:07 +0000] [535] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] Goin' Fast @ http://localhost:48939\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:07 +0000] [535] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [535] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [535] [INFO] Killing Sanic-Server-0-0 [545]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [535] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F[2023-06-28 13:24:08 +0000] [549] [INFO] Sanic v23.3.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] Goin' Fast @ http://localhost:34463\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] mode: production, single worker\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] server: sanic, HTTP/1.1\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] python: 3.7.11\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] platform: Linux-5.4.0-146-generic-x86_64-with-debian-bullseye-sid\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:08 +0000] [549] [INFO] packages: sanic-routing==22.8.0\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1499, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return cls._app_registry[name]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | KeyError: 'sanic_test'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | Traceback (most recent call last):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/serve.py\", line 55, in worker_serve\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     app = app_loader.load()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/worker/loader.py\", line 61, in load\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return self.factory()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sanic/app.py\", line 1506, in get_app\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     f\"Sanic app name '{name}' not found.\\n\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | sanic.exceptions.SanicException: Sanic app name 'sanic_test' not found.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | App instantiation must occur outside if __name__ == '__main__' block or by using an AppLoader.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | See https://sanic.dev/en/guide/deployment/app-loader.html for more details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:09 +0000] [549] [ERROR] Not all workers acknowledged a successful startup. Shutting down.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | One of your worker processes terminated before startup was completed. Please solve any errors experienced during startup. If you do not see an exception traceback in your error logs, try running Sanic in in a single process using --single-process or single_process=True. Once you are confident that the server is able to start without errors you can switch back to multiprocess mode.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:09 +0000] [549] [INFO] Killing Sanic-Server-0-0 [559]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | [2023-06-28 13:24:09 +0000] [549] [INFO] Server Stopped\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | F\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/starlette_test.py INFO:     Started server process [563]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application startup.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application startup complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Uvicorn running on http://localhost:39261 (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:54084 - \"GET /hello/world HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:54092 - \"GET /api/doc HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:54102 - \"GET /api/doc/ HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:54104 - \"GET /LICENSE HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:54108 - \"GET /api/doc/swagger.json HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .INFO:     Shutting down\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application shutdown.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application shutdown complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Finished server process [563]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Started server process [571]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application startup.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application startup complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Uvicorn running on http://localhost:38975 (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:36434 - \"GET /hello/world HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:36440 - \"GET /api/doc HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:36442 - \"GET /api/doc/ HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:36446 - \"GET /LICENSE HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:36456 - \"GET /api/doc/swagger.json HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .INFO:     Shutting down\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Started server process [577]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application startup.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application shutdown.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application shutdown complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Finished server process [571]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application startup complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Uvicorn running on http://localhost:42163 (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53280 - \"GET /hello/world HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53294 - \"GET /api/doc HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53304 - \"GET /api/doc/ HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53306 - \"GET /LICENSE HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53308 - \"GET /api/doc/editor HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:53322 - \"GET /api/doc/swagger.json HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .INFO:     Shutting down\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application shutdown.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application shutdown complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Finished server process [577]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Started server process [585]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application startup.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application startup complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Uvicorn running on http://localhost:40083 (Press CTRL+C to quit)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45910 - \"GET /hello/world HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45912 - \"GET /api/doc HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45924 - \"GET /api/doc/ HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45936 - \"GET /LICENSE HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45944 - \"GET /api/doc/editor HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     127.0.0.1:45960 - \"GET /api/doc/swagger.json HTTP/1.1\" 200 OK\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | .......\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/tornado_test.py INFO:     Shutting down\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Waiting for application shutdown.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Application shutdown complete.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | INFO:     Finished server process [585]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ........FF\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | =================================== FAILURES ===================================\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_aiohttp[kwargs4-auto] __________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39095, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_aiohttp(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/aiohttp_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39095, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_aiohttp[kwargs4-None] __________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 42781, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_aiohttp(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/aiohttp_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 42781, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_bottle[kwargs4-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39869, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_bottle(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/bottle_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39869, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_bottle[kwargs4-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 37731, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_bottle(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/bottle_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 37731, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs0-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ceaa990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ceb0990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ceaadd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ceb0990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 41187, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': '/api/doc'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ceaadd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs0-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7cc06fd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd75c50>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9870>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc065d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd75c50>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9870>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39171, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': '/api/doc'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc065d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs1-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7cc29990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd0c690>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd96d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc29590>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd0c690>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd96d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 59995, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'editor': True, 'url_prefix': '/api/doc'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc29590>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs1-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ca9b450>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ca9b490>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce335d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ca9b490>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 36903, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'editor': True, 'url_prefix': '/api/doc'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce335d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs2-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ceadbd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ceb0fd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d0e3bb0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cd58810>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ceb0fd0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d0e3bb0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 59511, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cd58810>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs2-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ce33a90>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cc29990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce33110>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cc29990>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 55147, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce33110>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs3-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ca23590>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ca23250>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9870>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce63ed0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7ca23250>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9870>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 46313, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': ''}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce63ed0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs3-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7ce33690>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd58250>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd96d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce332d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cd58250>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd96d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 56749, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'url_prefix': ''}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ce332d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs4-auto] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7cc2d810>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cf79d90>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9940>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc2d790>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cf79d90>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7cfd9940>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 48939, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7cc2d790>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ___________________________ test_sanic[kwargs4-None] ___________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5b7cccb0d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | method = 'GET', url = '/hello/world', body = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | redirect = False, assert_same_host = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | release_conn = False, chunked = False, body_pos = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | response_kw = {'decode_content': False, 'preload_content': False}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/hello/world', query=None, fragment=None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | destination_scheme = None, conn = None, release_this_conn = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | http_tunnel_required = False, err = None, clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         headers=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         retries=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         redirect=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert_same_host=True,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         timeout=_Default,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         pool_timeout=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_conn=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos=None,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         **response_kw\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         Get a connection from the pool and perform an HTTP request. This is the\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         lowest level call for making a request, so you'll need to specify all\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the raw details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            More commonly, it's appropriate to use a convenience method provided\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            by :class:`.RequestMethods`, such as :meth:`request`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         .. note::\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `release_conn` will only behave as expected if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` because we want to make\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            `preload_content=False` the default behaviour someday soon without\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |            breaking backwards compatibility.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param method:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param url:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             The URL to perform the request on.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param body:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param headers:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Dictionary of custom headers to send, such as User-Agent,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             these headers completely replace any pool-specific headers.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param retries:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Configure the number of retries to allow before raising a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass ``None`` to retry until you receive a response. Pass a\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             over different types of retries.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Pass an integer number to retry connection errors that many times,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             but no other types of errors. Pass zero to never retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``False``, then retries are disabled and any exception is raised\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the redirect response will be returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param redirect:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, automatically handle redirects (status codes 301, 302,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             will disable redirect, too.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param assert_same_host:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If ``True``, will make sure that the host of the pool requests is\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             consistent else will raise HostChangedError. When ``False``, you can\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             use the pool on an HTTP proxy and request foreign hosts.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If specified, overrides the default timeout for this one\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request. It may be a float (in seconds) or an instance of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :class:`urllib3.util.Timeout`.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param pool_timeout:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If set and the pool is set to block=True, then this method will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             connection is available within the time period.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param release_conn:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If False, then the urlopen call will not release the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool once a response is received (but will release if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             you read the entire contents of the response such as when\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             `preload_content=True`). This is useful if you're not preloading\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             the response's content immediately. You will need to call\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             back into the pool. If None, it takes the value of\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             ``response_kw.get('preload_content', True)``.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param chunked:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             If True, urllib3 will send the body using chunked transfer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             content-length form. Defaults to False.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param int body_pos:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Position to seek to in file-like body in the event of a retry or\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             redirect. Typically this won't need to be set because urllib3 will\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             auto-populate the value when needed.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param \\\\**response_kw:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             Additional parameters are passed to\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             :meth:`urllib3.response.HTTPResponse.from_httplib`\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         parsed_url = parse_url(url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         destination_scheme = parsed_url.scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if headers is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = self.headers\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not isinstance(retries, Retry):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if release_conn is None:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             release_conn = response_kw.get(\"preload_content\", True)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Check host\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if assert_same_host and not self.is_same_host(url):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise HostChangedError(self, url, retries)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Ensure that the URL we're connecting to is properly encoded\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url.startswith(\"/\"):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(_encode_target(url))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url = six.ensure_str(parsed_url.url)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         conn = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Track whether `conn` needs to be released before\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # returning/raising/recursing. Update this variable if necessary, and\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # leave `release_conn` constant throughout the function. That way, if\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # the function recurses, the original value of `release_conn` will be\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # passed down into the recursive call, and its value will be respected.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # See issue #651 [1] for details.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         #\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         release_this_conn = release_conn\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         http_tunnel_required = connection_requires_http_tunnel(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             self.proxy, self.proxy_config, destination_scheme\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # have to copy the headers dict so we can safely change it without those\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # changes being reflected in anyone else's copy.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if not http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers = headers.copy()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             headers.update(self.proxy_headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Must keep the exception bound to a separate variable or else Python 3\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # complains about UnboundLocalError.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         err = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Keep track of whether we cleanly exited the except block. This\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # ensures we do proper cleanup in finally.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         clean_exit = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Rewind body position, if needed. Record current position\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # for future rewinds in the event of a redirect/retry.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         body_pos = set_file_position(body, body_pos)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Request a connection from the queue.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout_obj = self._get_timeout(timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self._get_conn(timeout=pool_timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn.timeout = timeout_obj.connect_timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             is_new_proxy_conn = self.proxy is not None and not getattr(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn, \"sock\", None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             if is_new_proxy_conn and http_tunnel_required:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 self._prepare_proxy(conn)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             # Make the request on the httplib connection object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             httplib_response = self._make_request(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 conn,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout_obj,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cbfd0d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               ConnectionResetError: [Errno 104] Connection reset by peer\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ConnectionResetError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ca29b10>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:497: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:799: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/util/retry.py:550: in increment\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise six.reraise(type(error), error, _stacktrace)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/packages/six.py:769: in reraise\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     raise value.with_traceback(tb)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:721: in urlopen\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:466: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     six.raise_from(e, None)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/connectionpool.py:461: in _make_request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     httplib_response = conn.getresponse()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:1373: in getresponse\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     response.begin()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:319: in begin\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     version, status, reason = self._read_status()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/http/client.py:280: in _read_status\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <socket.SocketIO object at 0x7f5b7cbfd0d0>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | b = <memory at 0x7f5b7d2b0600>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def readinto(self, b):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         the number of bytes read.  If the socket is non-blocking and no bytes\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         are available, None is returned.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         If *b* is non-empty, a 0 return value indicates that the connection\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         was shutdown at the other end.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkClosed()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self._checkReadable()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if self._timeout_occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise OSError(\"cannot read from timed out object\")\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         while True:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >               return self._sock.recv_into(b)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E               urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/socket.py:589: ProtocolError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | During handling of the above exception, another exception occurred:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 34463, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_sanic(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/sanic_test.py:30: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:68: in send_requests\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:73: in get\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return request(\"get\", url, params=params, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/api.py:59: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     return session.request(method=method, url=url, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     resp = self.send(prep, **send_kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:703: in send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     r = adapter.send(request, **kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | self = <requests.adapters.HTTPAdapter object at 0x7f5b7ca29b10>\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | request = <PreparedRequest [GET]>, stream = False\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | cert = None, proxies = OrderedDict()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     ):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param stream: (optional) Whether to stream the request content.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param timeout: (optional) How long to wait for the server to send\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             read timeout) <timeouts>` tuple.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :type timeout: float or tuple or urllib3 Timeout object\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             we verify the server's TLS certificate, or a string, in which case it\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             must be a path to a CA bundle to use\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         :rtype: requests.Response\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         \"\"\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             conn = self.get_connection(request.url, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except LocationValueError as e:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             raise InvalidURL(e, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.cert_verify(conn, request.url, verify, cert)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url = self.request_url(request, proxies)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         self.add_headers(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             request,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             stream=stream,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             verify=verify,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             cert=cert,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             proxies=proxies,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if isinstance(timeout, tuple):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 connect, read = timeout\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             except ValueError:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 raise ValueError(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                     f\"or a single float to set both timeouts to the same value.\"\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         elif isinstance(timeout, TimeoutSauce):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             pass\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         else:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         try:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             resp = conn.urlopen(\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 method=request.method,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 url=url,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 body=request.body,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 headers=request.headers,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 redirect=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 assert_same_host=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 preload_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 decode_content=False,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 retries=self.max_retries,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 timeout=timeout,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |                 chunked=chunked,\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             )\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         except (ProtocolError, OSError) as err:\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >           raise ConnectionError(err, request=request)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/adapters.py:501: ConnectionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_tornado[kwargs4-auto] __________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39779, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_tornado(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/tornado_test.py:35: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 39779, mode = 'auto'\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | __________________________ test_tornado[kwargs4-None] __________________________\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 48693, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('mode', mode_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     @pytest.mark.parametrize('kwargs', kwargs_list)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def test_tornado(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc = Process(target=server_process, args=(port, mode), kwargs=kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         proc.start()\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       send_requests(port, mode, kwargs)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/tornado_test.py:35: \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | port = 48693, mode = None\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | kwargs = {'config_path': '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/test/conf/test3.yaml', 'config_rel_url': '/swagger.json', 'url_prefix': '/'}\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     def send_requests(port, mode, kwargs):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert wait_port_listen(port), 'port: {} not listen!'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         url_prefix = 'http://localhost:{}{}'.format(port, kwargs['url_prefix'])\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if url_prefix.endswith('/'):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             url_prefix = url_prefix[:-1]\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         server_url = 'http://localhost:{}/hello/world'.format(port)\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 1: test server\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(server_url).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 2: test root\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix).status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 3: test static file\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         assert requests.get(url_prefix + '/static/LICENSE').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 4: test editor\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         if kwargs.get('editor', False):\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |             assert requests.get(url_prefix + '/editor').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |     \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   |         # Step 5: test swagger.json\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | >       assert requests.get(url_prefix + '/swagger.json').status_code == 200\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | E       AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | \n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | test/common.py:82: AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/report.xml -\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | =========================== short test summary info ============================\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/aiohttp_test.py::test_aiohttp[kwargs4-auto] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/aiohttp_test.py::test_aiohttp[kwargs4-None] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/bottle_test.py::test_bottle[kwargs4-auto] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/bottle_test.py::test_bottle[kwargs4-None] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs0-auto] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs0-None] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs1-auto] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs1-None] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs2-auto] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs2-None] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs3-auto] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs3-None] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs4-auto] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/sanic_test.py::test_sanic[kwargs4-None] - requests.exceptions.ConnectionError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/tornado_test.py::test_tornado[kwargs4-auto] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | FAILED test/tornado_test.py::test_tornado[kwargs4-None] - AssertionError\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   | ======================== 16 failed, 74 passed in 38.21s ========================\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest]   \u274c  Failure - Main pytest --junitxml=report.xml -s test/\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.41/containers/68d4fc65a6148e2d05d19119593008f1253fdc84a41f3241dabffdbc1386c856/archive?path=%2Fvar%2Frun%2Fact%2Fworkflow%2Fpathcmd.txt\": context canceled\n[cc635e69-9997-4811-96de-ec964b45cfae/lint-and-pytest] \ud83c\udfc1  Job succeeded\n",
        "stderr": "Error: context canceled\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/PWZER-swagger-ui-py/.github/workflows/lint-and-pytest-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 609.7716686725616
    }
}