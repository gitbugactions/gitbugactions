{
    "repository": "python-poetry/cleo",
    "stars": 1086,
    "language": "python",
    "size": 1232,
    "clone_url": "https://github.com/python-poetry/cleo.git",
    "timestamp": "2023-06-28T10:23:42.952435Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_application",
                "name": "test_name_version_getters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_name_version_setter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_long_version",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_help",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_all",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_add",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_has_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_silent_help",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_get_namespaces",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_namespace",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_namespace_with_sub_namespaces",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_ambiguous_namespace",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_invalid_namespace",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_unique_name_but_namespace_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_ambiguous_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_find_ambiguous_command_hidden",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_set_catch_exceptions",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_auto_exit",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_runs_the_list_command_without_arguments",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_runs_help_command_if_required",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_runs_help_command_with_command",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_removes_all_output_if_quiet",
                "time": 0.054,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_verbosity",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_version",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_help",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_input",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_namespaced_with_input",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_input_and_non_interactive[cmd0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_application",
                "name": "test_run_with_input_and_non_interactive[cmd1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_ansi_colors[--options0- ]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_ansi_colors[red-yellow-options1-\\x1b[31;43m \\x1b[39;49m]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_ansi_colors[red-yellow-options2-\\x1b[31;43;4m \\x1b[39;49;24m]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_true_color_support[#fff-#000-options0-\\x1b[38;2;255;255;255;48;2;0;0;0m \\x1b[39;49m]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "True color not supported",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_true_color_support[#ffffff-#000000-options1-\\x1b[38;2;255;255;255;48;2;0;0;0m \\x1b[39;49m]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "True color not supported",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_degrade_true_colors[#f00-#ff0-options0-\\x1b[31;43m \\x1b[39;49m]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_color",
                "name": "test_degrade_true_colors[#c0392b-#f1c40f-options1-\\x1b[31;43m \\x1b[39;49m]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_helpers",
                "name": "test_argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_helpers",
                "name": "test_option",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_size",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_columns_env[314-None-314]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_columns_env[200-40-40]",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_columns_env[random-40-40]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_columns_env[random-None-80]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_lines_env[314-None-314]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_lines_env[200-40-40]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_lines_env[random-40-40]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_terminal",
                "name": "test_lines_env[random-None-25]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[0.1-< 1 sec]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[1.0-1 sec]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[2.0-2 secs]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[59.0-59 secs]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[60.0-1 min]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[120.0-2 mins]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[3600.0-1 hr]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[7200.0-2 hrs]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[129600.0-1 day]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[129601.0-2 days]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_format_time[700000.0-9 days]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_find_similar_names[-expected0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_find_similar_names[hellp-expected1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_find_similar_names[bar2-expected2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_find_similar_names[bar1-expected3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_utils",
                "name": "test_find_similar_names[foo-expected4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.test_command",
                "name": "test_set_application",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.test_command",
                "name": "test_with_signature",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.test_command",
                "name": "test_signature_inheritance",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.test_command",
                "name": "test_overwrite",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.test_command",
                "name": "test_explicit_multiple_argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.completion.test_completions_command",
                "name": "test_invalid_shell",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.completion.test_completions_command",
                "name": "test_bash",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.completion.test_completions_command",
                "name": "test_zsh",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands.completion.test_completions_command",
                "name": "test_fish",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event",
                "name": "test_is_propagation_not_stopped",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event",
                "name": "test_stop_propagation_and_is_propagation_stopped",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_initial_state",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_add_listener",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_get_listeners_sorts_by_priority",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_get_all_listeners_sorts_by_priority",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_get_listener_priority",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_dispatch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.events.test_event_dispatcher",
                "name": "test_stop_event_propagation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[foo<error>bar</error> baz-2-fo\\no\\x1b[31;1mb\\x1b[39;22m\\n\\x1b[31;1mar\\x1b[39;22m\\nba\\nz]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[pre <error>foo bar baz</error> post-2-pr\\ne \\x1b[31;1m\\x1b[39;22m\\n\\x1b[31;1mfo\\x1b[39;22m\\n\\x1b[31;1mo \\x1b[39;22m\\n\\x1b[31;1mba\\x1b[39;22m\\n\\x1b[31;1mr \\x1b[39;22m\\n\\x1b[31;1mba\\x1b[39;22m\\n\\x1b[31;1mz\\x1b[39;22m \\npo\\nst]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[pre <error>foo bar baz</error> post-3-pre\\x1b[31;1m\\x1b[39;22m\\n\\x1b[31;1mfoo\\x1b[39;22m\\n\\x1b[31;1mbar\\x1b[39;22m\\n\\x1b[31;1mbaz\\x1b[39;22m\\npos\\nt]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[pre <error>foo bar baz</error> post-4-pre \\x1b[31;1m\\x1b[39;22m\\n\\x1b[31;1mfoo \\x1b[39;22m\\n\\x1b[31;1mbar \\x1b[39;22m\\n\\x1b[31;1mbaz\\x1b[39;22m \\npost]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[pre <error>foo bar baz</error> post-5-pre \\x1b[31;1mf\\x1b[39;22m\\n\\x1b[31;1moo ba\\x1b[39;22m\\n\\x1b[31;1mr baz\\x1b[39;22m\\npost]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[Lorem <error>ipsum</error> dolor <info>sit</info> amet-4-Lore\\nm \\x1b[31;1mip\\x1b[39;22m\\n\\x1b[31;1msum\\x1b[39;22m \\ndolo\\nr \\x1b[34msi\\x1b[39m\\n\\x1b[34mt\\x1b[39m am\\net]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[Lorem <error>ipsum</error> dolor <info>sit</info> amet-8-Lorem \\x1b[31;1mip\\x1b[39;22m\\n\\x1b[31;1msum\\x1b[39;22m dolo\\nr \\x1b[34msit\\x1b[39m am\\net]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap[Lorem <error>ipsum</error> dolor <info>sit</info>, <error>amet</error> et <info>laudantium</info> architecto-18-Lorem \\x1b[31;1mipsum\\x1b[39;22m dolor \\x1b[34m\\x1b[39m\\n\\x1b[34msit\\x1b[39m, \\x1b[31;1mamet\\x1b[39;22m et \\x1b[34mlauda\\x1b[39m\\n\\x1b[34mntium\\x1b[39m architecto]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap_undecorated[foo<error>bar</error> baz-2-fo\\nob\\nar\\nba\\nz]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap_undecorated[pre <error>foo bar baz</error> post-2-pr\\ne \\nfo\\no \\nba\\nr \\nba\\nz \\npo\\nst]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap_undecorated[pre <error>foo bar baz</error> post-3-pre\\nfoo\\nbar\\nbaz\\npos\\nt]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap_undecorated[pre <error>foo bar baz</error> post-4-pre \\nfoo \\nbar \\nbaz \\npost]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.formatters.test_formatter",
                "name": "test_format_and_wrap_undecorated[pre <error>foo bar baz</error> post-5-pre f\\noo ba\\nr baz\\npost]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argument",
                "name": "test_optional_non_list_argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argument",
                "name": "test_required_non_list_argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argument",
                "name": "test_list_argument",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argument",
                "name": "test_required_arguments_do_not_support_default_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argument",
                "name": "test_list_arguments_do_not_support_non_list_default_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_it_uses_argv_by_default",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_arguments",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args0-options0-expected_options0]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args1-options1-expected_options1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args2-options2-expected_options2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args3-options3-expected_options3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args4-options4-expected_options4]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args5-options5-expected_options5]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args6-options6-expected_options6]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args7-options7-expected_options7]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args8-options8-expected_options8]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args9-options9-expected_options9]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args10-options10-expected_options10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args11-options11-expected_options11]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args12-options12-expected_options12]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args13-options13-expected_options13]",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args14-options14-expected_options14]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args15-options15-expected_options15]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_argv_input",
                "name": "test_parse_options[args16-options16-expected_options16]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_create",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_dashed_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_fail_if_name_is_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_fail_if_default_value_provided_for_flag",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_fail_if_wrong_default_value_for_list_option",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_shortcut",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_dashed_shortcut",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_multiple_shortcuts",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_fail_if_shortcut_is_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_optional_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_optional_value_with_default",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_required_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_required_value_with_default",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_list",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_option",
                "name": "test_multi_valued_with_default",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-tokens0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[foo-tokens1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[  foo  bar  -tokens2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\"quoted\"-tokens3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create['quoted'-tokens4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create['a\\rb\\nc\\td'-tokens5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create['a'\\r'b'\\n'c'\\t'd'-tokens6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\"quoted 'twice'\"-tokens7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create['quoted \"twice\"'-tokens8]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\\\\'escaped\\\\'-tokens9]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\\\\\"escaped\\\\\"-tokens10]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\\\\'escaped more\\\\'-tokens11]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\\\\\"escaped more\\\\\"-tokens12]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a-tokens13]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-azc-tokens14]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-awithavalue-tokens15]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a\"foo bar\"-tokens16]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a\"foo bar\"\"foo bar\"-tokens17]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a'foo bar'-tokens18]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a'foo bar''foo bar'-tokens19]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[-a'foo bar'\"foo bar\"-tokens20]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option-tokens21]",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option=foo-tokens22]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option=\"foo bar\"-tokens23]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option=\"foo bar\"\"another\"-tokens24]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option='foo bar'-tokens25]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option='foo bar''another'-tokens26]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[--long-option='foo bar'\"another\"-tokens27]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[foo -a -ffoo --long bar-tokens28]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.inputs.test_token_parser",
                "name": "test_create[\\\\' \\\\\"-tokens29]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_clear_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_clear_with_number_of_lines",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_clear_with_number_of_lines_and_multiple_sections",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_clear_preserves_empty_lines",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_overwrite",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_overwrite_multiple_lines",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_add_multiple_sections",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.io.outputs.test_section_output",
                "name": "test_multiple_sections_output",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.loaders.test_factory_command_loader",
                "name": "test_has",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.loaders.test_factory_command_loader",
                "name": "test_get",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.loaders.test_factory_command_loader",
                "name": "test_get_invalid_command_raises_error",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.loaders.test_factory_command_loader",
                "name": "test_names",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.testers.test_application_tester",
                "name": "test_execute",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.testers.test_application_tester",
                "name": "test_execute_namespace_command",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.testers.test_command_tester",
                "name": "test_execute",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.testers.test_command_tester",
                "name": "test_execute_namespace_command",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_choice_question",
                "name": "test_ask_choice",
                "time": 0.061,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[-True-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[-False-False]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[y-True-True]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[yes-True-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[n-False-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask[no-False-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_confirmation_question",
                "name": "test_ask_with_custom_answer",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_better_error_message",
                "time": 0.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_debug_better_error_message",
                "time": 0.028,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_debug_better_error_message_recursion_error",
                "time": 0.82,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_very_verbose_better_error_message",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_debug_better_error_message_recursion_error_with_multiple_duplicated_frames",
                "time": 0.39,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_can_ignore_given_files",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_shows_ignored_files_if_in_debug_mode",
                "time": 0.036,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_supports_solutions",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_render_falls_back_on_ascii_symbols",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_empty_source_file_do_not_break_highlighter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_doctrings_are_corrrectly_rendered",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_simple_render",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_simple_render_supports_solutions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_exception_trace",
                "name": "test_simple_render_aborts_if_no_message",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_multiple_start",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_advance",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_advance_with_step",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_advance_multiple_times",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_advance_over_max",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_format",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_customizations",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_display_without_start",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_display_with_quiet_verbosity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_finish_without_start",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_percent",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_overwrite_with_shorter_line",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_set_current_progress",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_multibyte_support",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_clear",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_percent_not_hundred_before_complete",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_non_decorated_output",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_multiline_format",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_regress",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_regress_with_steps",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_regress_multiple_times",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_regress_below_min",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_overwrite_with_section_output",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_overwrite_multiple_progress_bars_with_section_outputs",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_bar",
                "name": "test_min_and_max_seconds_between_redraws",
                "time": 3.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_indicator",
                "name": "test_default_indicator",
                "time": 0.814,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_progress_indicator",
                "name": "test_explicit_format",
                "time": 0.844,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_question",
                "name": "test_ask",
                "time": 0.067,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_question",
                "name": "test_ask_hidden_response",
                "time": 0.003,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "`stty` is required to test hidden response functionality",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_question",
                "name": "test_ask_and_validate",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_question",
                "name": "test_no_interaction",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_question",
                "name": "test_ask_question_with_special_characters",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers0-rows0-default-+---------------+--------------------------+------------------+\\n| ISBN          | Title                    | Author           |\\n+---------------+--------------------------+------------------+\\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\\n| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens  |\\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\\n| 9782070409341 | Le P\\xe8re Goriot           | Honor\\xe9 de Balzac |\\n+---------------+--------------------------+------------------+\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers1-rows1-compact- ISBN          Title                    Author           \\n 99921-58-10-7 Divine Comedy            Dante Alighieri  \\n 9971-5-0210-0 A Tale of Two Cities     Charles Dickens  \\n 960-425-059-0 The Lord of the Rings    J. R. R. Tolkien \\n 80-902734-1-6 And Then There Were None Agatha Christie  \\n 9782070409341 Le P\\xe8re Goriot           Honor\\xe9 de Balzac \\n]",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers2-rows2-borderless- =============== ========================== ================== \\n  ISBN            Title                      Author            \\n =============== ========================== ================== \\n  99921-58-10-7   Divine Comedy              Dante Alighieri   \\n  9971-5-0210-0   A Tale of Two Cities       Charles Dickens   \\n  960-425-059-0   The Lord of the Rings      J. R. R. Tolkien  \\n  80-902734-1-6   And Then There Were None   Agatha Christie   \\n  9782070409341   Le P\\xe8re Goriot             Honor\\xe9 de Balzac  \\n =============== ========================== ================== \\n]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers3-rows3-box-\\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n\\u2502 ISBN          \\u2502 Title                    \\u2502 Author           \\u2502\\n\\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n\\u2502 99921-58-10-7 \\u2502 Divine Comedy            \\u2502 Dante Alighieri  \\u2502\\n\\u2502 9971-5-0210-0 \\u2502 A Tale of Two Cities     \\u2502 Charles Dickens  \\u2502\\n\\u2502 960-425-059-0 \\u2502 The Lord of the Rings    \\u2502 J. R. R. Tolkien \\u2502\\n\\u2502 80-902734-1-6 \\u2502 And Then There Were None \\u2502 Agatha Christie  \\u2502\\n\\u2502 9782070409341 \\u2502 Le P\\xe8re Goriot           \\u2502 Honor\\xe9 de Balzac \\u2502\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers4-rows4-box-double-\\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2564\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2564\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n\\u2551 ISBN          \\u2502 Title                    \\u2502 Author           \\u2551\\n\\u2560\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u256a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u256a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2563\\n\\u2551 99921-58-10-7 \\u2502 Divine Comedy            \\u2502 Dante Alighieri  \\u2551\\n\\u2551 9971-5-0210-0 \\u2502 A Tale of Two Cities     \\u2502 Charles Dickens  \\u2551\\n\\u255f\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2562\\n\\u2551 960-425-059-0 \\u2502 The Lord of the Rings    \\u2502 J. R. R. Tolkien \\u2551\\n\\u2551 80-902734-1-6 \\u2502 And Then There Were None \\u2502 Agatha Christie  \\u2551\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2567\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2567\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers5-rows5-default-+---------------+--------------------------+------------------+\\n| ISBN          | Title                    |                  |\\n+---------------+--------------------------+------------------+\\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\\n| 9971-5-0210-0 |                          |                  |\\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\\n+---------------+--------------------------+------------------+\\n]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers6-rows6-default-+---------------+--------------------------+------------------+\\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\\n| 9971-5-0210-0 |                          |                  |\\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\\n+---------------+--------------------------+------------------+\\n]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers7-rows7-default-+------+-------+\\n| ISBN | Title |\\n+------+-------+\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers8-rows8-default-]",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers9-rows9-default-+---------------+----------------------------+-----------------+\\n| ISBN          | Title                      | Author          |\\n+---------------+----------------------------+-----------------+\\n| 99921-58-10-7 | Divine                     | Dante Alighieri |\\n|               | Comedy                     |                 |\\n| 9971-5-0210-2 | Harry Potter               | Rowling         |\\n|               | and the Chamber of Secrets | Joanne K.       |\\n| 9971-5-0210-2 | Harry Potter               | Rowling         |\\n|               | and the Chamber of Secrets | Joanne K.       |\\n| 960-425-059-0 | The Lord of the Rings      | J. R. R.        |\\n|               |                            | Tolkien         |\\n+---------------+----------------------------+-----------------+\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers10-rows10-default-+---------------+----------------------+-----------------+\\n| ISBN          | Title                | Author          |\\n+---------------+----------------------+-----------------+\\n| 99921-58-10-7 | Divine Comedy        | Dante Alighieri |\\n| 9971-5-0210-0 | A Tale of Two Cities | Charles Dickens |\\n+---------------+----------------------+-----------------+\\n]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers11-rows11-default-+----------------+----------------+-----------------+\\n| ISBN           | Title          | Author          |\\n+----------------+----------------+-----------------+\\n| 99921-58-10-7  | Divine Comedy  | Dante Alighieri |\\n+----------------+----------------+-----------------+\\n| Divine Comedy(Dante Alighieri)                    |\\n+----------------+----------------+-----------------+\\n| Arduino: A Quick-Start Guide    | Mark Schmidt    |\\n+----------------+----------------+-----------------+\\n| 9971-5-0210-0  | A Tale of                        |\\n|                | Two Cities                       |\\n+----------------+----------------+-----------------+\\n]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers12-rows12-default-+---------------+----------------------+-----------------+\\n| ISBN          | Title                | Author          |\\n+---------------+----------------------+-----------------+\\n| 9971-5-0210-0 | Divine Comedy        | Dante Alighieri |\\n|               | A Tale of Two Cities | Charles Dickens |\\n|               | The Lord of          | J. R.           |\\n|               | the Rings            | R. Tolkien      |\\n+---------------+----------------------+-----------------+\\n| 80-902734-1-6 | And Then             | Agatha Christie |\\n| 80-902734-1-7 | There                | Test            |\\n|               | Were None            |                 |\\n+---------------+----------------------+-----------------+\\n]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers13-rows13-default-+------------------+---------+-----------------+\\n| ISBN             | Title   | Author          |\\n+------------------+---------+-----------------+\\n| 9971-5-0210-0              | Dante Alighieri |\\n|                            | Charles Dickens |\\n+------------------+---------+-----------------+\\n| Dante Alighieri  | 9971-5-0210-0             |\\n| J. R. R. Tolkien |                           |\\n| J. R. R          |                           |\\n+------------------+---------+-----------------+\\n]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers14-rows14-default-+-----------------+-------+-----------------+\\n| ISBN            | Title | Author          |\\n+-----------------+-------+-----------------+\\n| 9971                    | Dante Alighieri |\\n| -5-                     | Charles Dickens |\\n| 021                     |                 |\\n| 0-0                     |                 |\\n+-----------------+-------+-----------------+\\n| Dante Alighieri | 9971                    |\\n| Charles Dickens | -5-                     |\\n|                 | 021                     |\\n|                 | 0-0                     |\\n+-----------------+-------+-----------------+\\n| 9971                    | Dante           |\\n| -5-                     | Alighieri       |\\n| 021                     |                 |\\n| 0-0                     |                 |\\n+-----------------+-------+-----------------+\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers15-rows15-default-+-----------------+-------+-----------------+\\n| ISBN            | Title | Author          |\\n+-----------------+-------+-----------------+\\n| 9971                    | Dante Alighieri |\\n| -5-                     | Charles Dickens |\\n| 021                     |                 |\\n| 0-0                     |                 |\\n| Dante Alighieri | 9971                    |\\n| Charles Dickens | -5-                     |\\n|                 | 021                     |\\n|                 | 0-0                     |\\n+-----------------+-------+-----------------+\\n]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers16-rows16-default-+---------------+-----------------+\\n| ISBN          | Author          |\\n+---------------+-----------------+\\n| 9971-5-0210-0 | Dante Alighieri |\\n|               |-----------------|\\n|               | Charles Dickens |\\n+---------------+-----------------+\\n]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers17-rows17-default-+------+-------+--------+\\n| Main title            |\\n+------+-------+--------+\\n| ISBN | Title | Author |\\n+------+-------+--------+\\n]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_render[headers18-rows18-default-+---+--+--+---+--+---+--+---+--+\\n| 1       | 2    | 3    | 4    |\\n+---+--+--+---+--+---+--+---+--+\\n]",
                "time": 0.023,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_column_style",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.ui.test_table",
                "name": "test_style_for_side_effects",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \ud83d\ude80  Start image=crawlergpt:latest\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo] user=0 workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \ud83e\uddea  Matrix: map[image:ubuntu-latest os:Ubuntu python-version:3.7]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main actions/checkout@v3\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main actions/checkout@v3\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Set up Python 3.7\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker cp src=/tmp/act-cache/ce1c9fed-98e2-450f-bc8f-058f0d3faf02/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2753  ::group::Installed versions\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? false\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::explicit? true\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::evaluating 6 versions\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::matched: 3.7.11\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Successfully set up CPython (3.7.11)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2753  ::endgroup::\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Set up Python 3.7\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-output:: python-version=3.7.11\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Get full python version\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/full-python-version.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Get full python version\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::set-output:: version=3-7-11-final-0\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Install Poetry\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Retrieving Poetry metadata\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | # Welcome to Poetry!\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | This will download and install the latest version of Poetry,\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | a dependency and package manager for Python.\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | /home/runneradmin/.local/bin\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | You can uninstall at any time by executing this script with the --uninstall option,\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | and these changes will be reverted.\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing Poetry (1.5.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing Poetry (1.5.1): Creating environment\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing Poetry (1.5.1): Installing Poetry\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing Poetry (1.5.1): Creating script\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing Poetry (1.5.1): Done\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Poetry (1.5.1) is installed now. Great!\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | environment variable.\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | You can test that everything is set up by executing:\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | `poetry --version`\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Install Poetry\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Update PATH\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Update PATH\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Setup Poetry\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Setup Poetry\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Set up cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker cp src=/tmp/act-cache/ce1c9fed-98e2-450f-bc8f-058f0d3faf02/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Resolved Keys:\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::[\"venv-Linux-3-7-11-final-0-0bd665d613c0aba9ae1d90fa634f31573ce222392f30e966c168aceb897ec838\"]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::1.5.0\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46461/_apis/artifactcache/cache?keys=venv-Linux-3-7-11-final-0-0bd665d613c0aba9ae1d90fa634f31573ce222392f30e966c168aceb897ec838&version=25e65b70d167147605b4332eb57b6d34df8e0303b88c4de252efb18cf3ed148a\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Cache not found for input keys: venv-Linux-3-7-11-final-0-0bd665d613c0aba9ae1d90fa634f31573ce222392f30e966c168aceb897ec838\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Set up cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Install dependencies\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/9.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Creating virtualenv cleo in /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo/.venv\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing dependencies from lock file\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Package operations: 53 installs, 1 update, 0 removals\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing certifi (2023.5.7)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing charset-normalizer (3.1.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing idna (3.4)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing markupsafe (2.1.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pytz (2023.3)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing typing-extensions (4.5.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing urllib3 (2.0.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing zipp (3.15.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing alabaster (0.7.13)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing babel (2.12.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing docutils (0.18.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing imagesize (1.4.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing importlib-metadata (6.6.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing jinja2 (3.1.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing packaging (23.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pygments (2.15.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing requests (2.30.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing snowballstemmer (2.2.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-applehelp (1.0.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-devhelp (1.0.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-htmlhelp (2.0.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-jsmath (1.0.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-qthelp (1.0.3)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-serializinghtml (1.1.5)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing click (8.1.3)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing distlib (0.3.6)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing exceptiongroup (1.1.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing filelock (3.12.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing iniconfig (2.0.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing platformdirs (3.5.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pluggy (1.0.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Updating setuptools (67.8.0 -> 67.7.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinx (5.3.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing tomli (2.0.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing cfgv (3.3.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing click-default-group (1.2.2)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing coverage (7.2.5)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing identify (2.5.24)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing incremental (22.10.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing mypy-extensions (1.0.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing nodeenv (1.8.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pytest (7.3.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pyyaml (6.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinxcontrib-jquery (4.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing typed-ast (1.5.4)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing virtualenv (20.23.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing crashtest (0.4.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing mypy (1.3.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pre-commit (2.21.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pytest-cov (4.1.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing pytest-mock (3.10.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing rapidfuzz (3.0.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing sphinx-rtd-theme (1.2.1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   |   \u2022 Installing towncrier (22.12.0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing the current project: cleo (2.1.0.dev0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Install dependencies\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Run typechecking\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/10.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Success: no issues found in 129 source files\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Run typechecking\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Main Run tests\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/11.sh] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | ..................................ss.................................... [ 28%]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | ........................................................................ [ 56%]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | ........................................................................ [ 84%]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | ...............s........................                                 [100%]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo/report.xml -\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | 253 passed, 3 skipped in 8.14s\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing dependencies from lock file\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | No dependencies to install or update\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | \n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Installing the current project: cleo (2.1.0.dev0)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Main Run tests\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Post Set up cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/save/index.js] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::1.5.0\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Search path '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo/.venv'\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Matched: .venv\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Cache Paths:\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::[\".venv\"]\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Archive Path: /tmp/919ba38c-7d26-48e3-93a5-fd95611e40b2/cache.tzst\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo --files-from manifest.txt --use-compress-program zstdmt\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::File Size: 40647637\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Reserving Cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46461/_apis/artifactcache/caches\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Upload cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46461/_apis/artifactcache/caches/1\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Awaiting all uploads\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Uploading chunk of size 33554432 bytes at offset 0 with content range: bytes 0-33554431/*\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Uploading chunk of size 7093205 bytes at offset 33554432 with content range: bytes 33554432-40647636/*\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Commiting cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Cache Size: ~39 MB (40647637 B)\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:46461/_apis/artifactcache/caches/1\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Cache saved successfully\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   | Cache saved with key: venv-Linux-3-7-11-final-0-0bd665d613c0aba9ae1d90fa634f31573ce222392f30e966c168aceb897ec838\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Post Set up cache\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \u2b50 Run Post Set up Python 3.7\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7]   \u2705  Success - Post Set up Python 3.7\n[0d90b0e7-60c9-4e1d-a421-dddda8e2a3d4/Ubuntu / 3.7] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/python-poetry-cleo/.github/workflows/tests-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 261.2767858505249
    }
}