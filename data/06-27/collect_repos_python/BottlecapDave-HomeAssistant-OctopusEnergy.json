{
    "repository": "BottlecapDave/HomeAssistant-OctopusEnergy",
    "stars": 226,
    "language": "python",
    "size": 1234,
    "clone_url": "https://github.com/BottlecapDave/HomeAssistant-OctopusEnergy.git",
    "timestamp": "2023-06-28T17:16:55.821561Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.integration.api_client.test_get_account",
                "name": "test_when_get_account_is_called_then_electricity_and_gas_points_returned",
                "time": 0.365,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_account",
                "name": "test_when_get_account_is_called_and_not_found_then_none_returned",
                "time": 0.617,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-None]",
                "time": 1.244,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-None]",
                "time": 0.97,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-None]",
                "time": 1.16,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-None]",
                "time": 0.449,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-None]",
                "time": 0.37,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-10]",
                "time": 0.54,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-10]",
                "time": 0.405,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-10]",
                "time": 0.536,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-10]",
                "time": 1.908,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-10]",
                "time": 1.376,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[None]",
                "time": 5.527,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[35]",
                "time": 0.413,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[None]",
                "time": 0.39,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[15]",
                "time": 0.484,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[None]",
                "time": 0.655,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[15]",
                "time": 0.393,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: object of type 'NoneType' has no len()",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-None]",
                "time": 0.619,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-10]",
                "time": 1.155,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_for_non_existent_tariff_then_none_is_returned[E-2R-NOT-A-TARIFF-A]",
                "time": 0.452,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_for_non_existent_tariff_then_none_is_returned[E-1R-NOT-A-TARIFF-A]",
                "time": 0.364,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_rates",
                "name": "test_when_get_electricity_rates_is_called_for_non_existent_tariff_then_none_is_returned[NOT-A-TARIFF]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-SUPER-GREEN-24M-21-07-30-A-24.0135]",
                "time": 0.535,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-GO-18-06-12-A-25.0005]",
                "time": 0.45,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-VAR-21-09-29-A-37.29243]",
                "time": 0.406,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-18-02-21-A-21.0]",
                "time": 0.381,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-FLEX-22-11-25-D-46.956]",
                "time": 0.377,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C]",
                "time": 0.595,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_non_existent_tariff_then_none_is_returned[E-1R-NOT-A-TARIFF-A]",
                "time": 0.573,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_electricity_standing_charge",
                "name": "test_when_get_electricity_standing_charge_is_called_for_non_existent_tariff_then_none_is_returned[NOT-A-TARIFF]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-None]",
                "time": 0.416,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-2]",
                "time": 0.373,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-None]",
                "time": 0.62,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-2]",
                "time": 0.6,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_for_non_existent_tariff_then_none_is_returned[G-1R-NOT-A-TARIFF-A]",
                "time": 0.433,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_rates",
                "name": "test_when_get_gas_rates_is_called_for_non_existent_tariff_then_none_is_returned[NOT-A-TARIFF]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_standing_charge",
                "name": "test_when_get_gas_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A]",
                "time": 0.92,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_standing_charge",
                "name": "test_when_get_gas_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C]",
                "time": 0.584,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_standing_charge",
                "name": "test_when_get_gas_standing_charge_is_called_for_non_existent_tariff_then_none_is_returned[G-1R-NOT-A-TARIFF-A]",
                "time": 0.46,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_gas_standing_charge",
                "name": "test_when_get_gas_standing_charge_is_called_for_non_existent_tariff_then_none_is_returned[NOT-A-TARIFF]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_intelligent_dispatches",
                "name": "test_when_get_intelligent_dispatches_is_called_for_account_on_different_tariff_then_results_are_returned",
                "time": 0.289,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.api_client.test_get_saving_sessions",
                "name": "test_when_get_saving_sessions_is_called_then_events_are_returned",
                "time": 0.296,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: 'NoneType' object is not subscriptable",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.coordinators.test_fetch_consumption_and_rates",
                "name": "test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-True]",
                "time": 1.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 912 == 48\n +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.coordinators.test_fetch_consumption_and_rates",
                "name": "test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-False]",
                "time": 0.914,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.coordinators.test_fetch_consumption_and_rates",
                "name": "test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-True]",
                "time": 1.236,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AssertionError: assert 912 == 48\n +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.coordinators.test_fetch_consumption_and_rates",
                "name": "test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-False]",
                "time": 0.883,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.electricity.test_calculate_electricity_consumption_and_cost",
                "name": "test_when_calculate_electricity_cost_uses_real_data_then_calculation_returned",
                "time": 0.999,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.gas.test_calculate_gas_consumption_and_cost",
                "name": "test_when_calculate_gas_cost_using_real_data_then_calculation_returned[m\\xb3]",
                "time": 1.491,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.integration.gas.test_calculate_gas_consumption_and_cost",
                "name": "test_when_calculate_gas_cost_using_real_data_then_calculation_returned[kWh]",
                "time": 0.98,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert None is not None",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \ud83d\ude80  Start image=crawlergpt:latest\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \ud83d\ude80  Start image=crawlergpt:latest\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy] user=0 workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy] user=0 workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2601  git clone 'https://github.com/asdf-vm/actions' # ref=v1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2601  git clone 'https://github.com/home-assistant/actions' # ref=master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \u2b50 Run Main Checkout\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2705  Success - Main Checkout\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \u2b50 Run Main asdf_install\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker cp src=/tmp/act-cache/7c228897-1c86-4d1b-a170-e7c1ccb80e45/act/asdf-vm-actions-install@v1/ dst=/var/run/act/actions/asdf-vm-actions-install@v1/\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/asdf-vm-actions-install@v1/] user=0 workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Pre home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2705  Success - Pre home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2601  git clone 'https://github.com/hacs/action' # ref=main\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Main actions/checkout@v2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2705  Success - Main actions/checkout@v2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Main home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker cp src=/tmp/act-cache/7c228897-1c86-4d1b-a170-e7c1ccb80e45/act/home-assistant-actions-hassfest@master/ dst=/var/run/act/actions/home-assistant-actions-hassfest@master/\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/home-assistant-actions-hassfest@master/] user=0 workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/asdf-vm-actions-install@v1/install/main.js] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Main echo \"::add-matcher::/var/run/act/actions/home-assistant-actions-hassfest@master/hassfest/problem-matcher.json\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-0.sh] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2753 add-matcher /var/run/act/actions/home-assistant-actions-hassfest@master/hassfest/problem-matcher.json\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2705  Success - Main echo \"::add-matcher::/var/run/act/actions/home-assistant-actions-hassfest@master/hassfest/problem-matcher.json\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Cloning asdf into ASDF_DIR: /home/runneradmin/.asdf\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [command]/usr/bin/git clone --depth 1 --branch master https://github.com/asdf-vm/asdf.git /home/runneradmin/.asdf\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Cloning into '/home/runneradmin/.asdf'...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Main docker build /var/run/act/actions/home-assistant-actions-hassfest@master/hassfest -f /var/run/act/actions/home-assistant-actions-hassfest@master/hassfest/Dockerfile -t hassfest\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [command]/home/runneradmin/.asdf/bin/asdf plugin-list\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | No plugins installed\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installing nodejs plugin...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [command]/home/runneradmin/.asdf/bin/asdf plugin-add nodejs\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | initializing plugin repository...Cloning into '/home/runneradmin/.asdf/repository'...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/1-composite-1.sh] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installing python plugin...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [command]/home/runneradmin/.asdf/bin/asdf plugin-add python\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [command]/home/runneradmin/.asdf/bin/asdf install\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Cloning node-build...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Downloading node-v18.15.0-linux-x64.tar.gz...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | -> https://nodejs.org/dist/v18.15.0/node-v18.15.0-linux-x64.tar.gz\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installing node-v18.15.0-linux-x64...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installed node-v18.15.0-linux-x64 to /home/runneradmin/.asdf/installs/nodejs/18.15.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Downloading python-build...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Cloning into '/home/runneradmin/.asdf/plugins/python/pyenv'...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | python-build 3.11.3 /home/runneradmin/.asdf/installs/python/3.11.3\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Downloading Python-3.11.3.tar.xz...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | -> https://www.python.org/ftp/python/3.11.3/Python-3.11.3.tar.xz\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installing Python-3.11.3...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   | Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%7D&memory=0&memswap=0&networkmode=default&rm=1&shmsize=0&t=hassfest&target=&ulimits=null&version=1\": dial unix /var/run/docker.sock: connect: permission denied\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u274c  Failure - Main docker build /var/run/act/actions/home-assistant-actions-hassfest@master/hassfest -f /var/run/act/actions/home-assistant-actions-hassfest@master/hassfest/Dockerfile -t hassfest\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] exitcode '1': failure\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u274c  Failure - Main home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] exitcode '1': failure\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \u2b50 Run Post home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker cp src=/tmp/act-cache/7c228897-1c86-4d1b-a170-e7c1ccb80e45/act/home-assistant-actions-hassfest@master/ dst=/var/run/act/actions/home-assistant-actions-hassfest@master/\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/home-assistant-actions-hassfest@master/] user=0 workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate]   \u2705  Success - Post home-assistant/actions/hassfest@master\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/validate] \ud83c\udfc1  Job failed\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installed Python-3.11.3 to /home/runneradmin/.asdf/installs/python/3.11.3\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2705  Success - Main asdf_install\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2699  ::set-env:: ASDF_DIR=/home/runneradmin/.asdf\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2699  ::set-env:: ASDF_DATA_DIR=/home/runneradmin/.asdf\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2699  ::add-path:: /home/runneradmin/.asdf/bin\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2699  ::add-path:: /home/runneradmin/.asdf/shims\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \u2b50 Run Main Install Python modules\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pytest\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 5.5 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pytest-socket\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pytest_socket-0.6.0-py3-none-any.whl (9.2 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pytest-asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pytest_asyncio-0.21.0-py3-none-any.whl (13 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting mock\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading mock-5.0.2-py3-none-any.whl (30 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting homeassistant\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading homeassistant-2023.6.3-py3-none-any.whl (25.5 MB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 25.5/25.5 MB 20.2 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting psutil-home-assistant\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading psutil_home_assistant-0.0.1-py3-none-any.whl (6.3 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting sqlalchemy\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading SQLAlchemy-2.0.17-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.8 MB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.8/2.8 MB 24.4 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting fnvhash\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading fnvhash-0.1.0.tar.gz (1.9 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting fnv_hash_fast\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading fnv_hash_fast-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux_2_5_x86_64.manylinux1_x86_64.manylinux2014_x86_64.whl (80 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 80.2/80.2 kB 974.3 kB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting iniconfig\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting packaging\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.5 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pluggy<2.0,>=0.12\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting aiohttp==3.8.4\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading aiohttp-3.8.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.0/1.0 MB 14.3 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting astral==2.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading astral-2.2-py2.py3-none-any.whl (30 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting async-timeout==4.0.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting attrs==22.2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading attrs-22.2.0-py3-none-any.whl (60 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 60.0/60.0 kB 3.4 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting atomicwrites-homeassistant==1.4.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading atomicwrites_homeassistant-1.4.1-py2.py3-none-any.whl (7.1 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting awesomeversion==22.9.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading awesomeversion-22.9.0-py3-none-any.whl (12 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting bcrypt==4.0.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading bcrypt-4.0.1-cp36-abi3-manylinux_2_28_x86_64.whl (593 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 593.7/593.7 kB 8.6 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting certifi>=2021.5.30\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 3.5 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting ciso8601==2.3.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading ciso8601-2.3.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (39 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting httpx==0.24.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading httpx-0.24.1-py3-none-any.whl (75 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 75.4/75.4 kB 12.8 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting home-assistant-bluetooth==1.10.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading home_assistant_bluetooth-1.10.0.tar.gz (10 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Installing build dependencies: started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Installing build dependencies: finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Getting requirements to build wheel: started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Getting requirements to build wheel: finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (pyproject.toml): started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting ifaddr==0.2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading ifaddr-0.2.0-py3-none-any.whl (12 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting jinja2==3.1.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 1.6 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting lru-dict==1.1.8\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading lru-dict-1.1.8.tar.gz (10 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting PyJWT==2.7.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading PyJWT-2.7.0-py3-none-any.whl (22 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting cryptography==40.0.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading cryptography-40.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (3.7 MB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.7/3.7 MB 10.1 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pyOpenSSL==23.1.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pyOpenSSL-23.1.0-py3-none-any.whl (57 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.7/57.7 kB 1.4 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting orjson==3.8.12\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading orjson-3.8.12-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (137 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 137.2/137.2 kB 1.1 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Requirement already satisfied: pip<23.2,>=21.0 in /home/runneradmin/.asdf/installs/python/3.11.3/lib/python3.11/site-packages (from homeassistant->-r requirements.test.txt (line 5)) (22.3.1)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting python-slugify==4.0.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading python-slugify-4.0.1.tar.gz (11 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Preparing metadata (setup.py): finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pyyaml==6.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading PyYAML-6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (757 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 757.9/757.9 kB 5.8 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting requests==2.31.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 2.5 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting typing-extensions<5.0,>=4.6.3\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting ulid-transform==0.7.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading ulid_transform-0.7.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (160 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 160.6/160.6 kB 6.1 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting voluptuous==0.13.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading voluptuous-0.13.1-py3-none-any.whl (29 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting voluptuous-serialize==2.6.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading voluptuous_serialize-2.6.0-py3-none-any.whl (6.8 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting yarl==1.9.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading yarl-1.9.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (282 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 282.8/282.8 kB 3.2 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting charset-normalizer<4.0,>=2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading charset_normalizer-3.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (197 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 197.3/197.3 kB 5.9 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting multidict<7.0,>=4.5\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading multidict-6.0.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (117 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 117.4/117.4 kB 809.6 kB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting frozenlist>=1.1.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading frozenlist-1.3.3-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (154 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 154.3/154.3 kB 4.0 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting aiosignal>=1.1.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pytz\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 6.0 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting cffi>=1.12\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading cffi-1.15.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (462 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 462.6/462.6 kB 4.6 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting httpcore<0.18.0,>=0.15.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading httpcore-0.17.2-py3-none-any.whl (72 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 72.5/72.5 kB 896.1 kB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting idna\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 451.8 kB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting sniffio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting MarkupSafe>=2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading MarkupSafe-2.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (28 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting text-unidecode>=1.3\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading text_unidecode-1.3-py2.py3-none-any.whl (78 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 78.2/78.2 kB 5.0 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting urllib3<3,>=1.21.1\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 2.9 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting psutil\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading psutil-5.9.5-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (282 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 282.1/282.1 kB 3.2 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting greenlet!=0.4.17\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading greenlet-2.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (618 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 618.8/618.8 kB 4.4 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting pycparser\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 1.6 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting h11<0.15,>=0.13\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 1.7 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Collecting anyio<5.0,>=3.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Downloading anyio-3.7.0-py3-none-any.whl (80 kB)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 80.9/80.9 kB 1.4 MB/s eta 0:00:00\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Building wheels for collected packages: home-assistant-bluetooth\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Building wheel for home-assistant-bluetooth (pyproject.toml): started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Building wheel for home-assistant-bluetooth (pyproject.toml): finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Created wheel for home-assistant-bluetooth: filename=home_assistant_bluetooth-1.10.0-cp311-cp311-manylinux_2_31_x86_64.whl size=319353 sha256=41ef3f77cdbdb5dec4b3a5bcd8720b0e005d04ffaaaa82b232e53f8082b51fc8\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/03/a4/47/b423bde845e247f1f8ee39e40149e3500b2b2f4c70217f91de\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Successfully built home-assistant-bluetooth\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Installing collected packages: voluptuous, text-unidecode, pytz, lru-dict, ifaddr, fnvhash, ciso8601, voluptuous-serialize, urllib3, ulid-transform, typing-extensions, sniffio, pyyaml, python-slugify, PyJWT, pycparser, psutil, pluggy, packaging, orjson, multidict, mock, MarkupSafe, iniconfig, idna, home-assistant-bluetooth, h11, greenlet, frozenlist, fnv_hash_fast, charset-normalizer, certifi, bcrypt, awesomeversion, attrs, atomicwrites-homeassistant, async-timeout, astral, yarl, sqlalchemy, requests, pytest, psutil-home-assistant, jinja2, cffi, anyio, aiosignal, pytest-socket, pytest-asyncio, httpcore, cryptography, aiohttp, pyOpenSSL, httpx, homeassistant\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   DEPRECATION: lru-dict is being installed using the legacy 'setup.py install' method, because it does not have a 'pyproject.toml' and the 'wheel' package is not installed. pip 23.1 will enforce this behaviour change. A possible replacement is to enable the '--use-pep517' option. Discussion can be found at https://github.com/pypa/pip/issues/8559\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for lru-dict: started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for lru-dict: finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   DEPRECATION: fnvhash is being installed using the legacy 'setup.py install' method, because it does not have a 'pyproject.toml' and the 'wheel' package is not installed. pip 23.1 will enforce this behaviour change. A possible replacement is to enable the '--use-pep517' option. Discussion can be found at https://github.com/pypa/pip/issues/8559\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for fnvhash: started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for fnvhash: finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   DEPRECATION: python-slugify is being installed using the legacy 'setup.py install' method, because it does not have a 'pyproject.toml' and the 'wheel' package is not installed. pip 23.1 will enforce this behaviour change. A possible replacement is to enable the '--use-pep517' option. Discussion can be found at https://github.com/pypa/pip/issues/8559\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for python-slugify: started\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   Running setup.py install for python-slugify: finished with status 'done'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Successfully installed MarkupSafe-2.1.3 PyJWT-2.7.0 aiohttp-3.8.4 aiosignal-1.3.1 anyio-3.7.0 astral-2.2 async-timeout-4.0.2 atomicwrites-homeassistant-1.4.1 attrs-22.2.0 awesomeversion-22.9.0 bcrypt-4.0.1 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 ciso8601-2.3.0 cryptography-40.0.2 fnv_hash_fast-0.3.1 fnvhash-0.1.0 frozenlist-1.3.3 greenlet-2.0.2 h11-0.14.0 home-assistant-bluetooth-1.10.0 homeassistant-2023.6.3 httpcore-0.17.2 httpx-0.24.1 idna-3.4 ifaddr-0.2.0 iniconfig-2.0.0 jinja2-3.1.2 lru-dict-1.1.8 mock-5.0.2 multidict-6.0.4 orjson-3.8.12 packaging-23.1 pluggy-1.2.0 psutil-5.9.5 psutil-home-assistant-0.0.1 pyOpenSSL-23.1.0 pycparser-2.21 pytest-7.4.0 pytest-asyncio-0.21.0 pytest-socket-0.6.0 python-slugify-4.0.1 pytz-2023.3 pyyaml-6.0 requests-2.31.0 sniffio-1.3.0 sqlalchemy-2.0.17 text-unidecode-1.3 typing-extensions-4.6.3 ulid-transform-0.7.2 urllib3-2.0.3 voluptuous-0.13.1 voluptuous-serialize-2.6.0 yarl-1.9.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [notice] A new release of pip available: 22.3.1 -> 23.1.2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | [notice] To update, run: pip3 install --upgrade pip\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | Reshimming asdf python...\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2705  Success - Main Install Python modules\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \u2b50 Run Main Unit tests suite\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ============================= test session starts ==============================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | platform linux -- Python 3.11.3, pytest-7.4.0, pluggy-1.2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | plugins: socket-0.6.0, anyio-3.7.0, asyncio-0.21.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | asyncio: mode=Mode.STRICT\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | collected 335 items\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/coordinators/test_previous_consumption_and_rates.py ......... [  2%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ......                                                                   [  4%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/electricity/test_calculate_electricity_consumption_and_cost.py . [  4%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | .......                                                                  [  6%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/electricity/test_get_rate_information.py ..                   [  7%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/gas/test_calculate_gas_consumption_and_cost.py ..........     [ 10%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/gas/test_m3_kwh_conversion.py ..                              [ 11%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/intelligent/test_adjust_intelligent_rates.py .....            [ 12%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/intelligent/test_clean_previous_dispatches.py .               [ 12%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/intelligent/test_is_in_planned_dispatch.py .................. [ 18%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ......                                                                   [ 20%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/intelligent/test_is_intelligent_tariff.py ..                  [ 20%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/saving_sessions/test_current_saving_sessions_event.py ....    [ 21%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/saving_sessions/test_get_next_saving_sessions_event.py ..     [ 22%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/statistics/test_consumption_build_consumption_statistics.py . [ 22%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ..                                                                       [ 23%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/statistics/test_consumption_build_cost_statistics.py ...      [ 24%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/target_rates/test_calculate_continuous_times.py ............. [ 28%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ........................................................................ [ 49%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ...............................................................          [ 68%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/target_rates/test_calculate_intermittent_times.py ........... [ 71%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ........................................................................ [ 93%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ....                                                                     [ 94%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/target_rates/test_get_target_rate_info.py .......             [ 96%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/utils/test_get_active_tariff_code.py ....                     [ 97%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/utils/test_get_off_peak_cost.py ...                           [ 98%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/utils/test_rates_to_thirty_minute_increments.py .             [ 98%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/unit/utils/test_tariff_parts.py ....                               [100%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | =============================== warnings summary ===============================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | <frozen abc>:106\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   <frozen abc>:106: DeprecationWarning: Inheritance class HomeAssistantApplication from web.Application is discouraged\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy/report.xml -\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ======================== 335 passed, 1 warning in 3.95s ========================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u2705  Success - Main Unit tests suite\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \u2b50 Run Main Integration tests suite\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ============================= test session starts ==============================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | platform linux -- Python 3.11.3, pytest-7.4.0, pluggy-1.2.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | plugins: socket-0.6.0, anyio-3.7.0, asyncio-0.21.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | asyncio: mode=Mode.STRICT\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | collected 50 items\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_account.py F.                      [  4%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py FFFFFFFFFFFFF [ 30%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FFFFF...                                                                 [ 46%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py FFF [ 52%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FFF..                                                                    [ 62%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_rates.py FFFF..                [ 74%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_standing_charge.py FF..        [ 82%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_intelligent_dispatches.py .        [ 84%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_saving_sessions.py F               [ 86%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/coordinators/test_fetch_consumption_and_rates.py FFFF  [ 94%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/electricity/test_calculate_electricity_consumption_and_cost.py F [ 96%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |                                                                          [ 96%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/gas/test_calculate_gas_consumption_and_cost.py FF      [100%]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | =================================== FAILURES ===================================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ___ test_when_get_account_is_called_then_electricity_and_gas_points_returned ___\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_account_is_called_then_electricity_and_gas_points_returned():\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         account_id = context[\"account_id\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         account = await client.async_get_account(account_id)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert account is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_account.py:18: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ------------------------------ Captured log call -------------------------------\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ERROR    custom_components.octopus_energy.api_client:api_client.py:254 Failed to retrieve auth token\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ERROR    custom_components.octopus_energy.api_client:api_client.py:355 Failed to retrieve account\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SUPER-GREEN-24M-21-07-30-A', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-GO-18-06-12-A', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-GO-18-06-12-A', is_smart_meter = False, price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-VAR-21-09-29-A', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-VAR-21-09-29-A', is_smart_meter = False, price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-18-02-21-A', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-18-02-21-A', is_smart_meter = False, price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-FLEX-22-11-25-D', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-FLEX-22-11-25-D', is_smart_meter = False, price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SUPER-GREEN-24M-21-07-30-A', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-GO-18-06-12-A', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-GO-18-06-12-A', is_smart_meter = False, price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-VAR-21-09-29-A', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-VAR-21-09-29-A', is_smart_meter = False, price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-18-02-21-A', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-18-02-21-A', is_smart_meter = False, price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-FLEX-22-11-25-D', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 10),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:65: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-FLEX-22-11-25-D', is_smart_meter = False, price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (35),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_flux_rates = [{\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-28T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 44.969,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 47.21745,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T15:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T04:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T15:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 19.2724,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 20.23602,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T04:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-26T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"E-1R-FLUX-IMPORT-23-02-14-E\",\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             False,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             price_cap,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2023-03-27T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2023-03-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             expected_flux_rates\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:104: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-FLUX-IMPORT-23-02-14-E', is_smart_meter = False, price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2023, 3, 27, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2023, 3, 28, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = [{'valid_from': datetime.datetime(2023, 3, 27, 18, 0, tzinfo=datetime.timezone.utc), 'valid_to': datetime.datetime(202...etime.datetime(2023, 3, 27, 1, 0, tzinfo=datetime.timezone.utc), 'value_exc_vat': 32.1207, 'value_inc_vat': 33.726735}]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[35] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 35\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (35),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_flux_rates = [{\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-28T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 44.969,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 47.21745,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T15:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T04:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T15:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 19.2724,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 20.23602,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-27T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T04:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         },\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_exc_vat\": 32.1207,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"value_inc_vat\": 33.726735,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_from\": datetime.strptime(\"2023-03-26T18:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"valid_to\": datetime.strptime(\"2023-03-27T01:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       await async_assert_electricity_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             \"E-1R-FLUX-IMPORT-23-02-14-E\",\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             False,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             price_cap,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2023-03-27T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2023-03-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             expected_flux_rates\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:104: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-FLUX-IMPORT-23-02-14-E', is_smart_meter = False, price_cap = 35\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2023, 3, 27, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2023, 3, 28, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = [{'valid_from': datetime.datetime(2023, 3, 27, 18, 0, tzinfo=datetime.timezone.utc), 'valid_to': datetime.datetime(202...etime.datetime(2023, 3, 27, 1, 0, tzinfo=datetime.timezone.utc), 'value_exc_vat': 32.1207, 'value_inc_vat': 33.726735}]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[(None), (15)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff = \"E-2R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       data = await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:117: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-2R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[15] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 15\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[(None), (15)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff = \"E-2R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       data = await async_assert_electricity_data(tariff, False, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:117: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-2R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 15\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[(None), (15)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff = \"E-2R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       data = await async_assert_electricity_data(tariff, True, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:141: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-2R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[15] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 15\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"price_cap\",[(None), (15)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments(price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff = \"E-2R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       data = await async_assert_electricity_data(tariff, True, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:141: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-2R-SUPER-GREEN-24M-21-07-30-A', is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | price_cap = 15\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_from = datetime.datetime(2022, 12, 1, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | period_to = datetime.datetime(2022, 12, 2, 0, 0, tzinfo=datetime.timezone.utc)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | expected_rates = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_assert_electricity_data(tariff, is_smart_meter, price_cap, period_from = default_period_from, period_to = default_period_to, expected_rates = None):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, is_smart_meter, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert len(data) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:22: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SILVER-FLEX-22-11-25-C', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[(\"E-1R-SILVER-FLEX-22-11-25-C\", None), (\"E-1R-SILVER-FLEX-22-11-25-C\", 10)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, False, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:177: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-10] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SILVER-FLEX-22-11-25-C', price_cap = 10\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[(\"E-1R-SILVER-FLEX-22-11-25-C\", None), (\"E-1R-SILVER-FLEX-22-11-25-C\", 10)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_electricity_rates(tariff, False, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_rates.py:177: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-SUPER-GREEN-24M-21-07-30-A-24.0135] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SUPER-GREEN-24M-21-07-30-A', expected_value_inc_vat = 24.0135\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,expected_value_inc_vat\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 24.0135),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 25.0005),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 37.29243),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 21.0),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 46.956)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff, expected_value_inc_vat):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:30: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-GO-18-06-12-A-25.0005] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-GO-18-06-12-A', expected_value_inc_vat = 25.0005\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,expected_value_inc_vat\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 24.0135),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 25.0005),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 37.29243),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 21.0),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 46.956)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff, expected_value_inc_vat):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:30: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-VAR-21-09-29-A-37.29243] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-VAR-21-09-29-A', expected_value_inc_vat = 37.29243\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,expected_value_inc_vat\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 24.0135),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 25.0005),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 37.29243),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 21.0),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 46.956)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff, expected_value_inc_vat):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:30: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-18-02-21-A-21.0] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-18-02-21-A', expected_value_inc_vat = 21.0\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,expected_value_inc_vat\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 24.0135),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 25.0005),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 37.29243),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 21.0),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 46.956)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff, expected_value_inc_vat):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:30: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-FLEX-22-11-25-D-46.956] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-AGILE-FLEX-22-11-25-D', expected_value_inc_vat = 46.956\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,expected_value_inc_vat\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-SUPER-GREEN-24M-21-07-30-A\", 24.0135),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-GO-18-06-12-A\", 25.0005),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-VAR-21-09-29-A\", 37.29243),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-18-02-21-A\", 21.0),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"E-1R-AGILE-FLEX-22-11-25-D\", 46.956)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff, expected_value_inc_vat):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:30: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_electricity_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'E-1R-SILVER-FLEX-22-11-25-C'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff\",[(\"E-1R-SILVER-FLEX-22-11-25-C\")])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_electricity_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned(tariff):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_electricity_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_electricity_standing_charge.py:50: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SUPER-GREEN-24M-21-07-30-A', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[(\"G-1R-SUPER-GREEN-24M-21-07-30-A\", None), (\"G-1R-SUPER-GREEN-24M-21-07-30-A\", 2)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], None, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_gas_rates(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_rates.py:24: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-2] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SUPER-GREEN-24M-21-07-30-A', price_cap = 2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[(\"G-1R-SUPER-GREEN-24M-21-07-30-A\", None), (\"G-1R-SUPER-GREEN-24M-21-07-30-A\", 2)])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], None, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_gas_rates(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_rates.py:24: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-None] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SILVER-FLEX-22-11-25-C', price_cap = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"G-1R-SILVER-FLEX-22-11-25-C\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"G-1R-SILVER-FLEX-22-11-25-C\", 2),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], None, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_gas_rates(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_rates.py:62: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-2] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SILVER-FLEX-22-11-25-C', price_cap = 2\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff,price_cap\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"G-1R-SILVER-FLEX-22-11-25-C\", None),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         (\"G-1R-SILVER-FLEX-22-11-25-C\", 2),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned(tariff, price_cap):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"], None, price_cap)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         data = await client.async_get_gas_rates(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert data is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_rates.py:62: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SUPER-GREEN-24M-21-07-30-A'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff\",[(\"G-1R-SUPER-GREEN-24M-21-07-30-A\")])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_standing_charge_is_called_for_existent_tariff_then_rates_are_returned(tariff):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_gas_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_standing_charge.py:24: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_get_gas_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tariff = 'G-1R-SILVER-FLEX-22-11-25-C'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"tariff\",[(\"G-1R-SILVER-FLEX-22-11-25-C\")])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_gas_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned(tariff):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from = now().replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to = (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         expected_tracker = await async_get_tracker_tariff(context[\"api_key\"], tariff, now())\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         assert expected_tracker is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         result = await client.async_get_gas_standing_charge(tariff, period_from, period_to)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E       assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_gas_standing_charge.py:44: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _______ test_when_get_saving_sessions_is_called_then_events_are_returned _______\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_get_saving_sessions_is_called_then_events_are_returned():\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         account_id = context[\"account_id\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >       savings = await client.async_get_saving_sessions(account_id)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/api_client/test_get_saving_sessions.py:15: \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | self = <custom_components.octopus_energy.api_client.OctopusEnergyApiClient object at 0x7f73f85ea1d0>\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | account_id = ''\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def async_get_saving_sessions(self, account_id):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       \"\"\"Get the user's seasons savings\"\"\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       await self.async_refresh_token()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       async with aiohttp.ClientSession() as client:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         url = f'{self._base_url}/v1/graphql/'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Get account response\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         payload = { \"query\": saving_session_query.format(account_id=account_id) }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         headers = { \"Authorization\": f\"JWT {self._graphql_token}\" }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         async with client.post(url, json=payload, headers=headers) as account_response:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           response_body = await self.__async_read_response__(account_response, url)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           if (response_body is not None and \"data\" in response_body):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             return {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >             \"points\": int(response_body[\"data\"][\"octoPoints\"][\"account\"][\"currentPointsInWallet\"]),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |               \"events\": list(map(lambda ev: {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |                 \"start\": as_utc(parse_datetime(ev[\"startAt\"])),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |                 \"end\": as_utc(parse_datetime(ev[\"endAt\"]))\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |               }, response_body[\"data\"][\"savingSessions\"][\"account\"][\"joinedEvents\"]))\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E           TypeError: 'NoneType' object is not subscriptable\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | custom_components/octopus_energy/api_client.py:373: TypeError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ------------------------------ Captured log call -------------------------------\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ERROR    custom_components.octopus_energy.api_client:api_client.py:254 Failed to retrieve auth token\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-True] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | minutes = 0, previous_data_available = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"minutes,previous_data_available\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned(minutes, previous_data_available):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"electricity_mpan\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"electricity_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"E-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       previous_data = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       if previous_data_available == True:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Make our previous data for the previous period\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data = {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"consumption\": create_consumption_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"rates\": create_rate_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             [1, 2]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"standing_charge\": 10.1,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       minutesStr = f'{minutes}'.zfill(2)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-02-12T00:{minutesStr}:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_smart_meter\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       assert \"consumption\" in result\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert len(result[\"consumption\"]) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     AssertionError: assert 912 == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E      +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/coordinators/test_fetch_consumption_and_rates.py:66: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-False] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | minutes = 0, previous_data_available = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"minutes,previous_data_available\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned(minutes, previous_data_available):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"electricity_mpan\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"electricity_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"E-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       previous_data = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       if previous_data_available == True:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Make our previous data for the previous period\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data = {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"consumption\": create_consumption_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"rates\": create_rate_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             [1, 2]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"standing_charge\": 10.1,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       minutesStr = f'{minutes}'.zfill(2)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-02-12T00:{minutesStr}:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_smart_meter\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/coordinators/test_fetch_consumption_and_rates.py:63: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-True] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | minutes = 30, previous_data_available = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"minutes,previous_data_available\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned(minutes, previous_data_available):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"electricity_mpan\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"electricity_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"E-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       previous_data = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       if previous_data_available == True:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Make our previous data for the previous period\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data = {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"consumption\": create_consumption_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"rates\": create_rate_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             [1, 2]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"standing_charge\": 10.1,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       minutesStr = f'{minutes}'.zfill(2)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-02-12T00:{minutesStr}:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_smart_meter\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       assert \"consumption\" in result\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert len(result[\"consumption\"]) == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     AssertionError: assert 912 == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E      +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/coordinators/test_fetch_consumption_and_rates.py:66: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-False] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | minutes = 30, previous_data_available = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"minutes,previous_data_available\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (0, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, True),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (30, False),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned(minutes, previous_data_available):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"electricity_mpan\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"electricity_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"E-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       previous_data = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       if previous_data_available == True:\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         # Make our previous data for the previous period\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data = {\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"consumption\": create_consumption_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"rates\": create_rate_data(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-09T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |             [1, 2]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           ),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |           \"standing_charge\": 10.1,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         }\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       minutesStr = f'{minutes}'.zfill(2)\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-02-12T00:{minutesStr}:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Act\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         previous_data,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_smart_meter\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Assert\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/coordinators/test_fetch_consumption_and_rates.py:63: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_calculate_electricity_cost_uses_real_data_then_calculation_returned _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_calculate_electricity_cost_uses_real_data_then_calculation_returned():\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"E-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       latest_date = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_smart_meter = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Retrieve real consumption data so we can make sure our calculation works with the result\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-03-02T00:00:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"electricity_mpan\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"electricity_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       consumption_and_rates_result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         None,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_smart_meter\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert consumption_and_rates_result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/electricity/test_calculate_electricity_consumption_and_cost.py:40: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_calculate_gas_cost_using_real_data_then_calculation_returned[m\\xb3] _\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | consumption_units = 'm\u00b3'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"consumption_units\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (\"m\u00b3\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (\"kWh\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_calculate_gas_cost_using_real_data_then_calculation_returned(consumption_units):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"G-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       latest_date = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Retrieve real consumption data so we can make sure our calculation works with the result\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-03-02T00:00:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"gas_mprn\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"gas_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       consumption_and_rates_result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         None,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert consumption_and_rates_result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/gas/test_calculate_gas_consumption_and_cost.py:42: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | _ test_when_calculate_gas_cost_using_real_data_then_calculation_returned[kWh] __\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | consumption_units = 'kWh'\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.asyncio\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     @pytest.mark.parametrize(\"consumption_units\",[\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (\"m\u00b3\"),\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       (\"kWh\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     ])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     async def test_when_calculate_gas_cost_using_real_data_then_calculation_returned(consumption_units):\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Arrange\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       context = get_test_context()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       client = OctopusEnergyApiClient(context[\"api_key\"])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_from = datetime.strptime(\"2022-02-28T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       period_to = datetime.strptime(\"2022-03-01T00:00:00Z\", \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       tariff_code = \"G-1R-SUPER-GREEN-24M-21-07-30-A\"\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       latest_date = None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       # Retrieve real consumption data so we can make sure our calculation works with the result\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       current_utc_timestamp = datetime.strptime(f'2022-03-02T00:00:00Z', \"%Y-%m-%dT%H:%M:%S%z\")\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_identifier = context[\"gas_mprn\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       sensor_serial_number = context[\"gas_serial_number\"]\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       is_electricity = False\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       consumption_and_rates_result = await async_fetch_consumption_and_rates(\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         None,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         current_utc_timestamp,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         client,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_from,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         period_to,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_identifier,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         sensor_serial_number,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         is_electricity,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         tariff_code,\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |         True\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |       )\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |     \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | >     assert consumption_and_rates_result is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | E     assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | tests/integration/gas/test_calculate_gas_consumption_and_cost.py:42: AssertionError\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | =============================== warnings summary ===============================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | <frozen abc>:106\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |   <frozen abc>:106: DeprecationWarning: Inheritance class HomeAssistantApplication from web.Application is discouraged\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | \n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy/report.xml -\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | =========================== short test summary info ============================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_account.py::test_when_get_account_is_called_then_electricity_and_gas_points_returned - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-SUPER-GREEN-24M-21-07-30-A-10] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-GO-18-06-12-A-10] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-VAR-21-09-29-A-10] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-18-02-21-A-10] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tariff_then_data_is_returned_in_thirty_minute_increments[E-1R-AGILE-FLEX-22-11-25-D-10] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_flux_tariff_then_data_is_returned_in_thirty_minute_increments[35] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_duel_rate_tariff_dumb_meter_then_data_is_returned_in_thirty_minute_increments[15] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[None] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_duel_rate_tariff_smart_meter_then_data_is_returned_in_thirty_minute_increments[15] - TypeError: object of type 'NoneType' has no len()\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-None] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_rates.py::test_when_get_electricity_rates_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C-10] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-SUPER-GREEN-24M-21-07-30-A-24.0135] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-GO-18-06-12-A-25.0005] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-VAR-21-09-29-A-37.29243] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-18-02-21-A-21.0] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[E-1R-AGILE-FLEX-22-11-25-D-46.956] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_electricity_standing_charge.py::test_when_get_electricity_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[E-1R-SILVER-FLEX-22-11-25-C] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_rates.py::test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-None] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_rates.py::test_when_get_gas_rates_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A-2] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_rates.py::test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-None] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_rates.py::test_when_get_gas_rates_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C-2] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_standing_charge.py::test_when_get_gas_standing_charge_is_called_for_existent_tariff_then_rates_are_returned[G-1R-SUPER-GREEN-24M-21-07-30-A] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_gas_standing_charge.py::test_when_get_gas_standing_charge_is_called_with_tracker_tariff_then_rates_are_returned[G-1R-SILVER-FLEX-22-11-25-C] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/api_client/test_get_saving_sessions.py::test_when_get_saving_sessions_is_called_then_events_are_returned - TypeError: 'NoneType' object is not subscriptable\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/coordinators/test_fetch_consumption_and_rates.py::test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-True] - AssertionError: assert 912 == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |  +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/coordinators/test_fetch_consumption_and_rates.py::test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[0-False] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/coordinators/test_fetch_consumption_and_rates.py::test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-True] - AssertionError: assert 912 == 48\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   |  +  where 912 = len([{'consumption': 1, 'interval_end': datetime.datetime(2022, 2, 9, 0, 30, tzinfo=datetime.timezone.utc), 'interval_star...nfo=datetime.timezone.utc), 'interval_start': datetime.datetime(2022, 2, 9, 2, 30, tzinfo=datetime.timezone.utc)}, ...])\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/coordinators/test_fetch_consumption_and_rates.py::test_when_now_is_at_30_minute_mark_and_electricity_sensor_then_requested_data_returned[30-False] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/electricity/test_calculate_electricity_consumption_and_cost.py::test_when_calculate_electricity_cost_uses_real_data_then_calculation_returned - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/gas/test_calculate_gas_consumption_and_cost.py::test_when_calculate_gas_cost_using_real_data_then_calculation_returned[m\\xb3] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | FAILED tests/integration/gas/test_calculate_gas_consumption_and_cost.py::test_when_calculate_gas_cost_using_real_data_then_calculation_returned[kWh] - assert None is not None\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   | ================== 39 failed, 11 passed, 1 warning in 38.01s ===================\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ]   \u274c  Failure - Main Integration tests suite\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] exitcode '1': failure\n[5ae64f32-6a2b-488d-9f1d-a537ede5a435/Test    ] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'Test' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/BottlecapDave-HomeAssistant-OctopusEnergy/.github/workflows/main-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 586.6522829532623
    }
}