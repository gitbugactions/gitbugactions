{
    "repository": "isidentical/refactor",
    "stars": 410,
    "language": "python",
    "size": 301,
    "clone_url": "https://github.com/isidentical/refactor.git",
    "timestamp": "2023-06-28T17:09:18.878979Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node6]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node7]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node8]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node9]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node10]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_erase_invalid[invalid_node11]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertAfterBottom]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertBeforeTop]",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertAfter]",
                "time": 0.074,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertBefore]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertAfterThenBefore]",
                "time": 0.077,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertBeforeThenAfterBothReversed]",
                "time": 0.104,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_actions",
                "name": "test_rules[TestInsertAfterBeforeRepeat]",
                "time": 0.103,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_with_encoding[\\n            print(normal)\\n            print('\\U0001f680 \\U0001f680 \\U0001f680')\\n            print(\\n                '\\U0001f680 \\U0001f680 \\U0001f680 $$ '\\n                ' $$ \\U0001f680 \\U0001f680 \\U0001f680'\\n            )\\n            print('\\u5929 \\u5c0f \\u672b')\\n            \\u672b = '\\U0001f680 \\U0001f680 \\U0001f680' * 4\\n        ]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[\\n]",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[\\n\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[\\n\\n\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[\\t\\n \\n \\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\n\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\nxx\\n\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\r\\nxx\\r\\n\\r\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\r\\n\\nx\\r\\n\\r\\n\\r\\n]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_split_lines_variations[x\\n\\r\\n\\nx\\r\\n\\r\\r]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_unparser_base",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_unparser_functions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_precise_unparser",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_precise_unparser_indented_literals",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast",
                "name": "test_precise_unparser_comments",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_full_node_change",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_nested_full_node",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_double_nested_full_node",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_field_addition",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_double_field_addition",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_field_removal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_double_field_removal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_field_change",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_multiple_field_change",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_sequence_diff",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_nested_sequence_diff",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_sequence_size_reduction",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_sequence_size_increase",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_sequence_weird",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_sequence_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_ast_delta",
                "name": "test_no_delta",
                "time": 0.15,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_change",
                "name": "test_change_compute_diff",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_negate",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_apply_condition[True-foo]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_apply_condition[False-not foo]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator0-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator1-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator2-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator3-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator4-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator5-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator6-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator7-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator8-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_truthy[operator9-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node0-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node1-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node2-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node3-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node4-True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node5-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node6-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_is_contextful[node7-False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_pascal_to_snake[-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_pascal_to_snake[rule-rule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_pascal_to_snake[Rule-rule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_pascal_to_snake[SomeRule-some_rule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_pascal_to_snake[LiteralToConstantRule-literal_to_constant_rule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[--]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[ - -]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[x--x]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[ x- -x]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[  x-  -x]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[   x-   -x]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[    -    -]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[x    --x    ]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_indent[  x    -  -x    ]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_find_closest",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_get_positions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_common",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[ReplaceNexts]",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[ReplacePlaceholders]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[PropagateConstants]",
                "time": 0.047,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[TypingAutoImporter]",
                "time": 0.062,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[TypingAutoImporterBefore]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[MakeFunctionAsync]",
                "time": 0.033,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[OnlyKeywordArgumentDefaultNotSetCheckRule]",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[InternalizeFunctions]",
                "time": 0.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[RemoveDeadCode]",
                "time": 0.142,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[RenameImportAndDownstream]",
                "time": 0.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[AssertEncoder]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[PropagateAndDelete]",
                "time": 0.056,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[FoldMyConstants]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_complete_rules",
                "name": "test_complete_rules[AtomicTryBlock]",
                "time": 0.053,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_representative",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_ancestry",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_scope",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_scope_definitions",
                "time": 0.026,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_custom_unparser",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_dependency_resolver",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_context",
                "name": "test_dependency_resolver_recursion",
                "time": 0.02,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_apply_simple[2 + 2 == 4-2 + 2 == 5-<lambda>-replacement0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_apply_simple[2       + 2 == 4-2       + 2 == 5-<lambda>-replacement1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_apply_simple[2 + 2 == 4 # :)-2 + 2 == 5 # :)-<lambda>-replacement2]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_apply_new_statement[\\n                import x # comments\\n                print(x.y) # comments here\\n                def something(x, y):\\n                    return x + y # comments\\n            -\\n                import x # comments\\n                import x\\n                print(x.y) # comments here\\n                def something(x, y):\\n                    return x + y # comments\\n            -<lambda>]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[1+1-1 - 1-PlusToMinusRule]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[print(1 + 1)-print(1 - 1)-PlusToMinusRule]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[print(1 + 1, some_other_stuff) and 2 + 2-print(1 - 1, some_other_stuff) and 2 - 2-PlusToMinusRule]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[\\n                print(\\n                    1 +\\n                    2\\n                )\\n            -\\n                print(\\n                    1 - 2\\n                )\\n            -PlusToMinusRule]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[print(x, y, placeholder, z)-print(x, y, 42, z)-PlaceholderReplacer]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[1*1-1*1-PlusToMinusRule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_simple[print(no,change,style)-print(no,change,style)-PlusToMinusRule]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_file",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_deterministic",
                "time": 0.024,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_invalid_code",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_invalid_generated_code",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_invalid_generated_code_debug_mode",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_core",
                "name": "test_session_run_deterministic_for_on_off_rules",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_position_provider",
                "name": "test_position_provider_for_definitions",
                "time": 0.063,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validation",
                "name": "test_valid_inputs",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validation",
                "name": "test_invalid_inputs[invalid_options0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_validation",
                "name": "test_invalid_inputs[invalid_options1]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_warning",
                "name": "test_import_warning[1-1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_warning",
                "name": "test_import_warning[2-1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_warning",
                "name": "test_import_no_warning[0]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[b9421228-083b-4b38-9fd6-472bde930a27/test] \ud83d\ude80  Start image=crawlergpt:latest\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor] user=0 workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.9]\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \u2b50 Run Main actions/checkout@v3\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2705  Success - Main actions/checkout@v3\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \u2b50 Run Main actions/setup-python@v4\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/d43bfbf5-2ba3-4c4a-8a49-c9eaeaad86e1/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2753  ::group::Installed versions\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? false\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::explicit? true\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::matched: 3.9.6\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Successfully set up CPython (3.9.6)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2753  ::endgroup::\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::implicitDescendants 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::matchDirectories 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Search path '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/requirements-dev.txt\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Found 1 files to hash.\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::OS Name: Ubuntu, Version: 20.04\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/pip cache dir\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | /home/runneradmin/.cache/pip\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::global cache directory path is /home/runneradmin/.cache/pip\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Resolved Keys:\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::[\"setup-python-Linux-20.04-Ubuntu-python-3.9.6-pip-dcbc511ffaa82d2bc22dab25e0ef591caea3093cbbaad145e667deb459ec43e0\",\"setup-python-Linux-20.04-Ubuntu-python-3.9.6-pip\"]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::1.5.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:36363/_apis/artifactcache/cache?keys=setup-python-Linux-20.04-Ubuntu-python-3.9.6-pip-dcbc511ffaa82d2bc22dab25e0ef591caea3093cbbaad145e667deb459ec43e0%252Csetup-python-Linux-20.04-Ubuntu-python-3.9.6-pip&version=79a244514713d0ea96d5d8aab70186082a897848df6e845ec8308965d2f82f4f\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | pip cache is not found\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2705  Success - Main actions/setup-python@v4\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib/pkgconfig\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-output:: python-version=3.9.6\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.9.6/x64/bin/python\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::set-output:: cache-hit=false\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \u2b50 Run Main Install dependencies\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting pytest\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting pluggy<2.0,>=0.12\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting tomli>=1.0.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting exceptiongroup>=1.0.0rc8\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting iniconfig\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Collecting packaging\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Installing collected packages: tomli, pluggy, packaging, iniconfig, exceptiongroup, pytest\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Successfully installed exceptiongroup-1.1.1 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 tomli-2.0.1\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Obtaining file:///tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Installing build dependencies: started\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Installing build dependencies: finished with status 'done'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Getting requirements to build wheel: started\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Getting requirements to build wheel: finished with status 'done'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Installing backend dependencies: started\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Installing backend dependencies: finished with status 'done'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     Preparing wheel metadata: started\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     Preparing wheel metadata: finished with status 'done'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Installing collected packages: refactor\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   Running setup.py develop for refactor\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Successfully installed refactor-0.6.3\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2705  Success - Main Install dependencies\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \u2b50 Run Main Test\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | ============================= test session starts ==============================\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | platform linux -- Python 3.9.6, pytest-7.4.0, pluggy-1.2.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | collected 139 items\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py ...................                                [ 13%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_ast.py ....................                                   [ 28%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_ast_delta.py ................                                 [ 39%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_change.py .                                                   [ 40%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_common.py ......................................              [ 67%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_complete_rules.py ..............                              [ 77%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_context.py .......                                            [ 82%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_core.py .................                                     [ 94%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_position_provider.py .                                        [ 95%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_validation.py ...                                             [ 97%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_warning.py ...                                                [100%]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | =============================== warnings summary ===============================\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:51\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:51: PytestCollectionWarning: cannot collect test class 'TestInsertAfterBottom' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertAfterBottom(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:79\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:79: PytestCollectionWarning: cannot collect test class 'TestInsertBeforeTop' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertBeforeTop(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:107\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:107: PytestCollectionWarning: cannot collect test class 'TestInsertAfter' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertAfter(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:170\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:170: PytestCollectionWarning: cannot collect test class 'TestInsertBefore' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertBefore(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:233\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:233: PytestCollectionWarning: cannot collect test class 'TestInsertAfterThenBefore' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertAfterThenBefore(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:314\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:314: PytestCollectionWarning: cannot collect test class 'TestInsertBeforeThenAfterBothReversed' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertBeforeThenAfterBothReversed(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | tests/test_actions.py:395\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |   /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/tests/test_actions.py:395: PytestCollectionWarning: cannot collect test class 'TestInsertAfterBeforeRepeat' because it has a __init__ constructor (from: tests/test_actions.py)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   |     class TestInsertAfterBeforeRepeat(Rule):\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | \n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/report.xml -\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | ======================= 139 passed, 7 warnings in 2.19s ========================\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2705  Success - Main Test\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \u2b50 Run Post actions/setup-python@v4\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/cache-save/index.js] user= workdir=\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::paths for caching are /home/runneradmin/.cache/pip\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::1.5.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.cache/pip'\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.cache/pip\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Cache Paths:\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.cache/pip\"]\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Archive Path: /tmp/3f663aa7-163d-4ace-bf70-d54704c39bcd/cache.tzst\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor --files-from manifest.txt --use-compress-program zstdmt\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::File Size: 1352718\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Reserving Cache\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:36363/_apis/artifactcache/caches\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Upload cache\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:36363/_apis/artifactcache/caches/1\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Awaiting all uploads\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Uploading chunk of size 1352718 bytes at offset 0 with content range: bytes 0-1352717/*\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Commiting cache\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Cache Size: ~1 MB (1352718 B)\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:36363/_apis/artifactcache/caches/1\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Cache saved successfully\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   | Cache saved with the key: setup-python-Linux-20.04-Ubuntu-python-3.9.6-pip-dcbc511ffaa82d2bc22dab25e0ef591caea3093cbbaad145e667deb459ec43e0\n[b9421228-083b-4b38-9fd6-472bde930a27/test]   \u2705  Success - Post actions/setup-python@v4\n[b9421228-083b-4b38-9fd6-472bde930a27/test] \ud83c\udfc1  Job succeeded\n",
        "stderr": "",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/isidentical-refactor/.github/workflows/test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 218.33711528778076
    }
}